
RTOS-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009d94  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409d94  00409d94  00019d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  00409d9c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000c0c8  204009c0  0040a75c  000209c0  2**2
                  ALLOC
  4 .stack        00002000  2040ca88  00416824  000209c0  2**0
                  ALLOC
  5 .heap         00000200  2040ea88  00418824  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002c  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      000000b4  00000000  00000000  000209ec  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002f08a  00000000  00000000  00020aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00006088  00000000  00000000  0004fb2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000013f8  00000000  00000000  00055bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002831e  00000000  00000000  00056faa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018e5e  00000000  00000000  0007f2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a05e6  00000000  00000000  00098126  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000ef90  00000000  00000000  0013870c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001660  00000000  00000000  0014769c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000042ac  00000000  00000000  00148cfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	88 ea 40 20 41 20 40 00 3f 20 40 00 3f 20 40 00     ..@ A @.? @.? @.
  400010:	3f 20 40 00 3f 20 40 00 3f 20 40 00 00 00 00 00     ? @.? @.? @.....
	...
  40002c:	19 24 40 00 3f 20 40 00 00 00 00 00 b9 24 40 00     .$@.? @......$@.
  40003c:	21 25 40 00 3f 20 40 00 3f 20 40 00 3f 20 40 00     !%@.? @.? @.? @.
  40004c:	3f 20 40 00 3f 20 40 00 3f 20 40 00 3f 20 40 00     ? @.? @.? @.? @.
  40005c:	3f 20 40 00 3f 20 40 00 00 00 00 00 b9 19 40 00     ? @.? @.......@.
  40006c:	cd 19 40 00 e1 19 40 00 3f 20 40 00 3f 20 40 00     ..@...@.? @.? @.
  40007c:	3f 20 40 00 f5 19 40 00 09 1a 40 00 3f 20 40 00     ? @...@...@.? @.
  40008c:	3f 20 40 00 3f 20 40 00 3f 20 40 00 3f 20 40 00     ? @.? @.? @.? @.
  40009c:	3f 20 40 00 5d 41 40 00 3f 20 40 00 3f 20 40 00     ? @.]A@.? @.? @.
  4000ac:	3f 20 40 00 3f 20 40 00 49 04 40 00 3f 20 40 00     ? @.? @.I.@.? @.
  4000bc:	3f 20 40 00 3f 20 40 00 3f 20 40 00 3f 20 40 00     ? @.? @.? @.? @.
  4000cc:	3f 20 40 00 3f 20 40 00 3f 20 40 00 3f 20 40 00     ? @.? @.? @.? @.
  4000dc:	3f 20 40 00 5d 04 40 00 3f 20 40 00 3f 20 40 00     ? @.].@.? @.? @.
  4000ec:	3f 20 40 00 3f 20 40 00 3f 20 40 00 3f 20 40 00     ? @.? @.? @.? @.
  4000fc:	3f 20 40 00 3f 20 40 00 3f 20 40 00 3f 20 40 00     ? @.? @.? @.? @.
  40010c:	3f 20 40 00 3f 20 40 00 00 00 00 00 00 00 00 00     ? @.? @.........
  40011c:	00 00 00 00 3f 20 40 00 3f 20 40 00 3f 20 40 00     ....? @.? @.? @.
  40012c:	3f 20 40 00 3f 20 40 00 3f 20 40 00 3f 20 40 00     ? @.? @.? @.? @.
  40013c:	3f 20 40 00 3f 20 40 00 3f 20 40 00 3f 20 40 00     ? @.? @.? @.? @.
  40014c:	3f 20 40 00 3f 20 40 00 3f 20 40 00 3f 20 40 00     ? @.? @.? @.? @.
  40015c:	3f 20 40 00 3f 20 40 00 3f 20 40 00                 ? @.? @.? @.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009c0 	.word	0x204009c0
  400184:	00000000 	.word	0x00000000
  400188:	00409d9c 	.word	0x00409d9c

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00409d9c 	.word	0x00409d9c
  4001c8:	204009c4 	.word	0x204009c4
  4001cc:	00409d9c 	.word	0x00409d9c
  4001d0:	00000000 	.word	0x00000000

004001d4 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4001d4:	b570      	push	{r4, r5, r6, lr}
  4001d6:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4001d8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4001da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4001dc:	4013      	ands	r3, r2
  4001de:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001e0:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  4001e2:	4e1c      	ldr	r6, [pc, #112]	; (400254 <afec_process_callback+0x80>)
  4001e4:	4d1c      	ldr	r5, [pc, #112]	; (400258 <afec_process_callback+0x84>)
  4001e6:	42a8      	cmp	r0, r5
  4001e8:	bf14      	ite	ne
  4001ea:	2000      	movne	r0, #0
  4001ec:	2001      	moveq	r0, #1
  4001ee:	0105      	lsls	r5, r0, #4
  4001f0:	e00b      	b.n	40020a <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4001f2:	2c0e      	cmp	r4, #14
  4001f4:	d81e      	bhi.n	400234 <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4001f6:	9a01      	ldr	r2, [sp, #4]
  4001f8:	f104 010c 	add.w	r1, r4, #12
  4001fc:	2301      	movs	r3, #1
  4001fe:	408b      	lsls	r3, r1
  400200:	4213      	tst	r3, r2
  400202:	d110      	bne.n	400226 <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  400204:	3401      	adds	r4, #1
  400206:	2c10      	cmp	r4, #16
  400208:	d022      	beq.n	400250 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40020a:	2c0b      	cmp	r4, #11
  40020c:	d8f1      	bhi.n	4001f2 <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  40020e:	9a01      	ldr	r2, [sp, #4]
  400210:	2301      	movs	r3, #1
  400212:	40a3      	lsls	r3, r4
  400214:	4213      	tst	r3, r2
  400216:	d0f5      	beq.n	400204 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400218:	192b      	adds	r3, r5, r4
  40021a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40021e:	2b00      	cmp	r3, #0
  400220:	d0f0      	beq.n	400204 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400222:	4798      	blx	r3
  400224:	e7ee      	b.n	400204 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400226:	192b      	adds	r3, r5, r4
  400228:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40022c:	2b00      	cmp	r3, #0
  40022e:	d0e9      	beq.n	400204 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400230:	4798      	blx	r3
  400232:	e7e7      	b.n	400204 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  400234:	9a01      	ldr	r2, [sp, #4]
  400236:	f104 010f 	add.w	r1, r4, #15
  40023a:	2301      	movs	r3, #1
  40023c:	408b      	lsls	r3, r1
  40023e:	4213      	tst	r3, r2
  400240:	d0e0      	beq.n	400204 <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  400242:	192b      	adds	r3, r5, r4
  400244:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400248:	2b00      	cmp	r3, #0
  40024a:	d0db      	beq.n	400204 <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  40024c:	4798      	blx	r3
  40024e:	e7d9      	b.n	400204 <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400250:	b002      	add	sp, #8
  400252:	bd70      	pop	{r4, r5, r6, pc}
  400254:	2040c978 	.word	0x2040c978
  400258:	40064000 	.word	0x40064000

0040025c <afec_ch_set_config>:
{
  40025c:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  40025e:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400260:	2301      	movs	r3, #1
  400262:	408b      	lsls	r3, r1
  400264:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400268:	7815      	ldrb	r5, [r2, #0]
  40026a:	2d00      	cmp	r5, #0
  40026c:	bf08      	it	eq
  40026e:	2300      	moveq	r3, #0
  400270:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  400272:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  400274:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  400276:	004b      	lsls	r3, r1, #1
  400278:	2103      	movs	r1, #3
  40027a:	4099      	lsls	r1, r3
  40027c:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400280:	7851      	ldrb	r1, [r2, #1]
  400282:	4099      	lsls	r1, r3
  400284:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  400286:	6541      	str	r1, [r0, #84]	; 0x54
}
  400288:	bc30      	pop	{r4, r5}
  40028a:	4770      	bx	lr

0040028c <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  40028c:	784b      	ldrb	r3, [r1, #1]
  40028e:	780a      	ldrb	r2, [r1, #0]
  400290:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  400292:	6703      	str	r3, [r0, #112]	; 0x70
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  400294:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  400296:	884b      	ldrh	r3, [r1, #2]
  400298:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40029c:	6743      	str	r3, [r0, #116]	; 0x74
  40029e:	4770      	bx	lr

004002a0 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  4002a0:	2200      	movs	r2, #0
  4002a2:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  4002a4:	4b08      	ldr	r3, [pc, #32]	; (4002c8 <afec_get_config_defaults+0x28>)
  4002a6:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  4002a8:	4b08      	ldr	r3, [pc, #32]	; (4002cc <afec_get_config_defaults+0x2c>)
  4002aa:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  4002ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  4002b0:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  4002b2:	2302      	movs	r3, #2
  4002b4:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  4002b6:	2301      	movs	r3, #1
  4002b8:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  4002ba:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  4002bc:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  4002be:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  4002c0:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  4002c2:	7583      	strb	r3, [r0, #22]
  4002c4:	4770      	bx	lr
  4002c6:	bf00      	nop
  4002c8:	11e1a300 	.word	0x11e1a300
  4002cc:	005b8d80 	.word	0x005b8d80

004002d0 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  4002d0:	2300      	movs	r3, #0
  4002d2:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  4002d4:	2301      	movs	r3, #1
  4002d6:	7043      	strb	r3, [r0, #1]
  4002d8:	4770      	bx	lr

004002da <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  4002da:	2300      	movs	r3, #0
  4002dc:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  4002de:	2320      	movs	r3, #32
  4002e0:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  4002e2:	23ff      	movs	r3, #255	; 0xff
  4002e4:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  4002e6:	f640 73ff 	movw	r3, #4095	; 0xfff
  4002ea:	8083      	strh	r3, [r0, #4]
  4002ec:	4770      	bx	lr
	...

004002f0 <afec_init>:
	return afec->AFEC_ISR;
  4002f0:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  4002f2:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  4002f6:	d001      	beq.n	4002fc <afec_init+0xc>
		return STATUS_ERR_BUSY;
  4002f8:	2019      	movs	r0, #25
  4002fa:	4770      	bx	lr
{
  4002fc:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  4002fe:	2301      	movs	r3, #1
  400300:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400302:	7ccb      	ldrb	r3, [r1, #19]
  400304:	2b00      	cmp	r3, #0
  400306:	bf18      	it	ne
  400308:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  40030c:	684b      	ldr	r3, [r1, #4]
  40030e:	688c      	ldr	r4, [r1, #8]
  400310:	fbb3 f3f4 	udiv	r3, r3, r4
  400314:	3b01      	subs	r3, #1
  400316:	021b      	lsls	r3, r3, #8
  400318:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40031a:	68cc      	ldr	r4, [r1, #12]
  40031c:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  400320:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  400322:	7c0c      	ldrb	r4, [r1, #16]
  400324:	0624      	lsls	r4, r4, #24
  400326:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40032a:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  40032c:	7c4c      	ldrb	r4, [r1, #17]
  40032e:	0724      	lsls	r4, r4, #28
  400330:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400334:	4323      	orrs	r3, r4
  400336:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  400338:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40033a:	7d0b      	ldrb	r3, [r1, #20]
  40033c:	2b00      	cmp	r3, #0
  40033e:	bf14      	ite	ne
  400340:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  400344:	2300      	moveq	r3, #0
  400346:	680a      	ldr	r2, [r1, #0]
  400348:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  40034a:	7d4a      	ldrb	r2, [r1, #21]
  40034c:	2a00      	cmp	r2, #0
  40034e:	bf14      	ite	ne
  400350:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  400354:	2200      	moveq	r2, #0
			(config->resolution) |
  400356:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400358:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  40035a:	7d8b      	ldrb	r3, [r1, #22]
  40035c:	021b      	lsls	r3, r3, #8
  40035e:	f403 7340 	and.w	r3, r3, #768	; 0x300
  400362:	f043 030c 	orr.w	r3, r3, #12
  400366:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  40036a:	4b0f      	ldr	r3, [pc, #60]	; (4003a8 <afec_init+0xb8>)
  40036c:	4298      	cmp	r0, r3
  40036e:	d006      	beq.n	40037e <afec_init+0x8e>
	if(afec == AFEC1) {
  400370:	4b0e      	ldr	r3, [pc, #56]	; (4003ac <afec_init+0xbc>)
  400372:	4298      	cmp	r0, r3
  400374:	d00d      	beq.n	400392 <afec_init+0xa2>
	return STATUS_OK;
  400376:	2000      	movs	r0, #0
}
  400378:	f85d 4b04 	ldr.w	r4, [sp], #4
  40037c:	4770      	bx	lr
  40037e:	4b0c      	ldr	r3, [pc, #48]	; (4003b0 <afec_init+0xc0>)
  400380:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  400384:	2200      	movs	r2, #0
  400386:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40038a:	428b      	cmp	r3, r1
  40038c:	d1fb      	bne.n	400386 <afec_init+0x96>
	return STATUS_OK;
  40038e:	2000      	movs	r0, #0
  400390:	e7f2      	b.n	400378 <afec_init+0x88>
  400392:	4b08      	ldr	r3, [pc, #32]	; (4003b4 <afec_init+0xc4>)
  400394:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  400398:	2200      	movs	r2, #0
  40039a:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40039e:	428b      	cmp	r3, r1
  4003a0:	d1fb      	bne.n	40039a <afec_init+0xaa>
	return STATUS_OK;
  4003a2:	2000      	movs	r0, #0
  4003a4:	e7e8      	b.n	400378 <afec_init+0x88>
  4003a6:	bf00      	nop
  4003a8:	4003c000 	.word	0x4003c000
  4003ac:	40064000 	.word	0x40064000
  4003b0:	2040c974 	.word	0x2040c974
  4003b4:	2040c9b8 	.word	0x2040c9b8

004003b8 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  4003b8:	4b0c      	ldr	r3, [pc, #48]	; (4003ec <afec_enable_interrupt+0x34>)
  4003ba:	4299      	cmp	r1, r3
  4003bc:	d007      	beq.n	4003ce <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  4003be:	290b      	cmp	r1, #11
  4003c0:	d80b      	bhi.n	4003da <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  4003c2:	d006      	beq.n	4003d2 <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  4003c4:	2301      	movs	r3, #1
  4003c6:	fa03 f101 	lsl.w	r1, r3, r1
  4003ca:	6241      	str	r1, [r0, #36]	; 0x24
  4003cc:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  4003ce:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  4003d0:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  4003d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4003d6:	6243      	str	r3, [r0, #36]	; 0x24
  4003d8:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  4003da:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  4003dc:	bf94      	ite	ls
  4003de:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  4003e0:	310f      	addhi	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  4003e2:	2301      	movs	r3, #1
  4003e4:	fa03 f101 	lsl.w	r1, r3, r1
  4003e8:	6241      	str	r1, [r0, #36]	; 0x24
  4003ea:	4770      	bx	lr
  4003ec:	47000fff 	.word	0x47000fff

004003f0 <afec_set_callback>:
{
  4003f0:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  4003f2:	4c11      	ldr	r4, [pc, #68]	; (400438 <afec_set_callback+0x48>)
  4003f4:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  4003f6:	bf0c      	ite	eq
  4003f8:	2410      	moveq	r4, #16
  4003fa:	2400      	movne	r4, #0
  4003fc:	440c      	add	r4, r1
  4003fe:	4d0f      	ldr	r5, [pc, #60]	; (40043c <afec_set_callback+0x4c>)
  400400:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  400404:	d10a      	bne.n	40041c <afec_set_callback+0x2c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400406:	4a0e      	ldr	r2, [pc, #56]	; (400440 <afec_set_callback+0x50>)
  400408:	f44f 7480 	mov.w	r4, #256	; 0x100
  40040c:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400410:	015b      	lsls	r3, r3, #5
  400412:	b2db      	uxtb	r3, r3
  400414:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400418:	6054      	str	r4, [r2, #4]
  40041a:	e009      	b.n	400430 <afec_set_callback+0x40>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40041c:	4a08      	ldr	r2, [pc, #32]	; (400440 <afec_set_callback+0x50>)
  40041e:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  400422:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400426:	015b      	lsls	r3, r3, #5
  400428:	b2db      	uxtb	r3, r3
  40042a:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40042e:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  400430:	4b04      	ldr	r3, [pc, #16]	; (400444 <afec_set_callback+0x54>)
  400432:	4798      	blx	r3
  400434:	bd38      	pop	{r3, r4, r5, pc}
  400436:	bf00      	nop
  400438:	40064000 	.word	0x40064000
  40043c:	2040c978 	.word	0x2040c978
  400440:	e000e100 	.word	0xe000e100
  400444:	004003b9 	.word	0x004003b9

00400448 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400448:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  40044a:	4802      	ldr	r0, [pc, #8]	; (400454 <AFEC0_Handler+0xc>)
  40044c:	4b02      	ldr	r3, [pc, #8]	; (400458 <AFEC0_Handler+0x10>)
  40044e:	4798      	blx	r3
  400450:	bd08      	pop	{r3, pc}
  400452:	bf00      	nop
  400454:	4003c000 	.word	0x4003c000
  400458:	004001d5 	.word	0x004001d5

0040045c <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  40045c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  40045e:	4802      	ldr	r0, [pc, #8]	; (400468 <AFEC1_Handler+0xc>)
  400460:	4b02      	ldr	r3, [pc, #8]	; (40046c <AFEC1_Handler+0x10>)
  400462:	4798      	blx	r3
  400464:	bd08      	pop	{r3, pc}
  400466:	bf00      	nop
  400468:	40064000 	.word	0x40064000
  40046c:	004001d5 	.word	0x004001d5

00400470 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  400470:	b500      	push	{lr}
  400472:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  400474:	4b13      	ldr	r3, [pc, #76]	; (4004c4 <afec_enable+0x54>)
  400476:	4298      	cmp	r0, r3
  400478:	bf0c      	ite	eq
  40047a:	2028      	moveq	r0, #40	; 0x28
  40047c:	201d      	movne	r0, #29
  40047e:	4b12      	ldr	r3, [pc, #72]	; (4004c8 <afec_enable+0x58>)
  400480:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  400482:	4b12      	ldr	r3, [pc, #72]	; (4004cc <afec_enable+0x5c>)
  400484:	789b      	ldrb	r3, [r3, #2]
  400486:	2bff      	cmp	r3, #255	; 0xff
  400488:	d01a      	beq.n	4004c0 <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40048a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40048e:	fab3 f383 	clz	r3, r3
  400492:	095b      	lsrs	r3, r3, #5
  400494:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400496:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400498:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40049c:	2200      	movs	r2, #0
  40049e:	4b0c      	ldr	r3, [pc, #48]	; (4004d0 <afec_enable+0x60>)
  4004a0:	701a      	strb	r2, [r3, #0]
	return flags;
  4004a2:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4004a4:	4a09      	ldr	r2, [pc, #36]	; (4004cc <afec_enable+0x5c>)
  4004a6:	7893      	ldrb	r3, [r2, #2]
  4004a8:	3301      	adds	r3, #1
  4004aa:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4004ac:	b129      	cbz	r1, 4004ba <afec_enable+0x4a>
		cpu_irq_enable();
  4004ae:	2201      	movs	r2, #1
  4004b0:	4b07      	ldr	r3, [pc, #28]	; (4004d0 <afec_enable+0x60>)
  4004b2:	701a      	strb	r2, [r3, #0]
  4004b4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4004b8:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  4004ba:	b003      	add	sp, #12
  4004bc:	f85d fb04 	ldr.w	pc, [sp], #4
  4004c0:	e7fe      	b.n	4004c0 <afec_enable+0x50>
  4004c2:	bf00      	nop
  4004c4:	40064000 	.word	0x40064000
  4004c8:	00401b3d 	.word	0x00401b3d
  4004cc:	2040c970 	.word	0x2040c970
  4004d0:	2040000a 	.word	0x2040000a

004004d4 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4004d4:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4004d6:	0189      	lsls	r1, r1, #6
  4004d8:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4004da:	2402      	movs	r4, #2
  4004dc:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4004de:	f04f 31ff 	mov.w	r1, #4294967295
  4004e2:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4004e4:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4004e6:	605a      	str	r2, [r3, #4]
}
  4004e8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004ec:	4770      	bx	lr

004004ee <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4004ee:	0189      	lsls	r1, r1, #6
  4004f0:	2305      	movs	r3, #5
  4004f2:	5043      	str	r3, [r0, r1]
  4004f4:	4770      	bx	lr

004004f6 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4004f6:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4004fa:	61ca      	str	r2, [r1, #28]
  4004fc:	4770      	bx	lr

004004fe <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4004fe:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400502:	624a      	str	r2, [r1, #36]	; 0x24
  400504:	4770      	bx	lr

00400506 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400506:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  40050a:	6a08      	ldr	r0, [r1, #32]
}
  40050c:	4770      	bx	lr

0040050e <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  40050e:	b4f0      	push	{r4, r5, r6, r7}
  400510:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400512:	2402      	movs	r4, #2
  400514:	9401      	str	r4, [sp, #4]
  400516:	2408      	movs	r4, #8
  400518:	9402      	str	r4, [sp, #8]
  40051a:	2420      	movs	r4, #32
  40051c:	9403      	str	r4, [sp, #12]
  40051e:	2480      	movs	r4, #128	; 0x80
  400520:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400522:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400524:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400526:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400528:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  40052c:	d814      	bhi.n	400558 <tc_find_mck_divisor+0x4a>
  40052e:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400530:	42a0      	cmp	r0, r4
  400532:	d217      	bcs.n	400564 <tc_find_mck_divisor+0x56>
  400534:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400536:	af01      	add	r7, sp, #4
  400538:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  40053c:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400540:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400542:	4284      	cmp	r4, r0
  400544:	d30a      	bcc.n	40055c <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400546:	4286      	cmp	r6, r0
  400548:	d90d      	bls.n	400566 <tc_find_mck_divisor+0x58>
			ul_index++) {
  40054a:	3501      	adds	r5, #1
	for (ul_index = 0;
  40054c:	2d05      	cmp	r5, #5
  40054e:	d1f3      	bne.n	400538 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400550:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400552:	b006      	add	sp, #24
  400554:	bcf0      	pop	{r4, r5, r6, r7}
  400556:	4770      	bx	lr
			return 0;
  400558:	2000      	movs	r0, #0
  40055a:	e7fa      	b.n	400552 <tc_find_mck_divisor+0x44>
  40055c:	2000      	movs	r0, #0
  40055e:	e7f8      	b.n	400552 <tc_find_mck_divisor+0x44>
	return 1;
  400560:	2001      	movs	r0, #1
  400562:	e7f6      	b.n	400552 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400564:	2500      	movs	r5, #0
	if (p_uldiv) {
  400566:	b12a      	cbz	r2, 400574 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400568:	a906      	add	r1, sp, #24
  40056a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  40056e:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400572:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400574:	2b00      	cmp	r3, #0
  400576:	d0f3      	beq.n	400560 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400578:	601d      	str	r5, [r3, #0]
	return 1;
  40057a:	2001      	movs	r0, #1
  40057c:	e7e9      	b.n	400552 <tc_find_mck_divisor+0x44>
	...

00400580 <mxt_init>:
  400580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400584:	b09c      	sub	sp, #112	; 0x70
  400586:	4604      	mov	r4, r0
  400588:	4d48      	ldr	r5, [pc, #288]	; (4006ac <mxt_init+0x12c>)
  40058a:	ab19      	add	r3, sp, #100	; 0x64
  40058c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  400590:	c303      	stmia	r3!, {r0, r1}
  400592:	801a      	strh	r2, [r3, #0]
  400594:	ae10      	add	r6, sp, #64	; 0x40
  400596:	f105 070c 	add.w	r7, r5, #12
  40059a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  40059c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  40059e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  4005a0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4005a2:	683b      	ldr	r3, [r7, #0]
  4005a4:	6033      	str	r3, [r6, #0]
  4005a6:	ab0d      	add	r3, sp, #52	; 0x34
  4005a8:	f105 0230 	add.w	r2, r5, #48	; 0x30
  4005ac:	ca07      	ldmia	r2, {r0, r1, r2}
  4005ae:	c303      	stmia	r3!, {r0, r1}
  4005b0:	701a      	strb	r2, [r3, #0]
  4005b2:	ae04      	add	r6, sp, #16
  4005b4:	353c      	adds	r5, #60	; 0x3c
  4005b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4005b8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4005ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4005bc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  4005be:	682b      	ldr	r3, [r5, #0]
  4005c0:	7033      	strb	r3, [r6, #0]
  4005c2:	2500      	movs	r5, #0
  4005c4:	9503      	str	r5, [sp, #12]
  4005c6:	4b3a      	ldr	r3, [pc, #232]	; (4006b0 <mxt_init+0x130>)
  4005c8:	9302      	str	r3, [sp, #8]
  4005ca:	274a      	movs	r7, #74	; 0x4a
  4005cc:	f88d 700c 	strb.w	r7, [sp, #12]
  4005d0:	4b38      	ldr	r3, [pc, #224]	; (4006b4 <mxt_init+0x134>)
  4005d2:	9301      	str	r3, [sp, #4]
  4005d4:	2013      	movs	r0, #19
  4005d6:	4b38      	ldr	r3, [pc, #224]	; (4006b8 <mxt_init+0x138>)
  4005d8:	4798      	blx	r3
  4005da:	4e38      	ldr	r6, [pc, #224]	; (4006bc <mxt_init+0x13c>)
  4005dc:	a901      	add	r1, sp, #4
  4005de:	4630      	mov	r0, r6
  4005e0:	4b37      	ldr	r3, [pc, #220]	; (4006c0 <mxt_init+0x140>)
  4005e2:	4798      	blx	r3
  4005e4:	2302      	movs	r3, #2
  4005e6:	463a      	mov	r2, r7
  4005e8:	4631      	mov	r1, r6
  4005ea:	4620      	mov	r0, r4
  4005ec:	4e35      	ldr	r6, [pc, #212]	; (4006c4 <mxt_init+0x144>)
  4005ee:	47b0      	blx	r6
  4005f0:	462a      	mov	r2, r5
  4005f2:	2106      	movs	r1, #6
  4005f4:	4620      	mov	r0, r4
  4005f6:	4e34      	ldr	r6, [pc, #208]	; (4006c8 <mxt_init+0x148>)
  4005f8:	47b0      	blx	r6
  4005fa:	2201      	movs	r2, #1
  4005fc:	4601      	mov	r1, r0
  4005fe:	4620      	mov	r0, r4
  400600:	4f32      	ldr	r7, [pc, #200]	; (4006cc <mxt_init+0x14c>)
  400602:	47b8      	blx	r7
  400604:	4832      	ldr	r0, [pc, #200]	; (4006d0 <mxt_init+0x150>)
  400606:	4b33      	ldr	r3, [pc, #204]	; (4006d4 <mxt_init+0x154>)
  400608:	4798      	blx	r3
  40060a:	462a      	mov	r2, r5
  40060c:	2107      	movs	r1, #7
  40060e:	4620      	mov	r0, r4
  400610:	47b0      	blx	r6
  400612:	2220      	movs	r2, #32
  400614:	4601      	mov	r1, r0
  400616:	4620      	mov	r0, r4
  400618:	47b8      	blx	r7
  40061a:	462a      	mov	r2, r5
  40061c:	2107      	movs	r1, #7
  40061e:	4620      	mov	r0, r4
  400620:	47b0      	blx	r6
  400622:	1c41      	adds	r1, r0, #1
  400624:	2210      	movs	r2, #16
  400626:	b289      	uxth	r1, r1
  400628:	4620      	mov	r0, r4
  40062a:	47b8      	blx	r7
  40062c:	462a      	mov	r2, r5
  40062e:	2107      	movs	r1, #7
  400630:	4620      	mov	r0, r4
  400632:	47b0      	blx	r6
  400634:	1c81      	adds	r1, r0, #2
  400636:	224b      	movs	r2, #75	; 0x4b
  400638:	b289      	uxth	r1, r1
  40063a:	4620      	mov	r0, r4
  40063c:	47b8      	blx	r7
  40063e:	462a      	mov	r2, r5
  400640:	2107      	movs	r1, #7
  400642:	4620      	mov	r0, r4
  400644:	47b0      	blx	r6
  400646:	1cc1      	adds	r1, r0, #3
  400648:	2284      	movs	r2, #132	; 0x84
  40064a:	b289      	uxth	r1, r1
  40064c:	4620      	mov	r0, r4
  40064e:	47b8      	blx	r7
  400650:	462a      	mov	r2, r5
  400652:	2108      	movs	r1, #8
  400654:	4620      	mov	r0, r4
  400656:	47b0      	blx	r6
  400658:	aa19      	add	r2, sp, #100	; 0x64
  40065a:	4601      	mov	r1, r0
  40065c:	4620      	mov	r0, r4
  40065e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 4006d8 <mxt_init+0x158>
  400662:	47c0      	blx	r8
  400664:	462a      	mov	r2, r5
  400666:	2109      	movs	r1, #9
  400668:	4620      	mov	r0, r4
  40066a:	47b0      	blx	r6
  40066c:	aa10      	add	r2, sp, #64	; 0x40
  40066e:	4601      	mov	r1, r0
  400670:	4620      	mov	r0, r4
  400672:	47c0      	blx	r8
  400674:	462a      	mov	r2, r5
  400676:	212e      	movs	r1, #46	; 0x2e
  400678:	4620      	mov	r0, r4
  40067a:	47b0      	blx	r6
  40067c:	aa0d      	add	r2, sp, #52	; 0x34
  40067e:	4601      	mov	r1, r0
  400680:	4620      	mov	r0, r4
  400682:	47c0      	blx	r8
  400684:	462a      	mov	r2, r5
  400686:	2138      	movs	r1, #56	; 0x38
  400688:	4620      	mov	r0, r4
  40068a:	47b0      	blx	r6
  40068c:	aa04      	add	r2, sp, #16
  40068e:	4601      	mov	r1, r0
  400690:	4620      	mov	r0, r4
  400692:	47c0      	blx	r8
  400694:	462a      	mov	r2, r5
  400696:	2106      	movs	r1, #6
  400698:	4620      	mov	r0, r4
  40069a:	47b0      	blx	r6
  40069c:	1c81      	adds	r1, r0, #2
  40069e:	2201      	movs	r2, #1
  4006a0:	b289      	uxth	r1, r1
  4006a2:	4620      	mov	r0, r4
  4006a4:	47b8      	blx	r7
  4006a6:	b01c      	add	sp, #112	; 0x70
  4006a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4006ac:	00409918 	.word	0x00409918
  4006b0:	00061a80 	.word	0x00061a80
  4006b4:	08f0d180 	.word	0x08f0d180
  4006b8:	00401b3d 	.word	0x00401b3d
  4006bc:	40018000 	.word	0x40018000
  4006c0:	00401d89 	.word	0x00401d89
  4006c4:	004006dd 	.word	0x004006dd
  4006c8:	00400975 	.word	0x00400975
  4006cc:	00400a2d 	.word	0x00400a2d
  4006d0:	003228d8 	.word	0x003228d8
  4006d4:	20400001 	.word	0x20400001
  4006d8:	004009b5 	.word	0x004009b5

004006dc <mxt_init_device>:
 * \param chgpin IOPORT pin instance attached to the maXTouch device's /CHG pin
 * \return Operation result status code
 */
status_code_t mxt_init_device(struct mxt_device *device,
		twihs_master_t interface, uint8_t chip_adr, uint32_t chgpin)
{
  4006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4006de:	b087      	sub	sp, #28
  4006e0:	4604      	mov	r4, r0
  4006e2:	460e      	mov	r6, r1
  4006e4:	4617      	mov	r7, r2
	int8_t status;

	/* Set TWI interface, TWI address and CHG-pin of the maXTouch device. */
	device->interface = interface;
  4006e6:	6081      	str	r1, [r0, #8]
	device->mxt_chip_adr = chip_adr;
  4006e8:	7302      	strb	r2, [r0, #12]
	device->chgpin = chgpin;
  4006ea:	6183      	str	r3, [r0, #24]
	device->handler = NULL;
  4006ec:	2500      	movs	r5, #0
  4006ee:	6105      	str	r5, [r0, #16]
			malloc(sizeof(struct mxt_info_object));
  4006f0:	2007      	movs	r0, #7
  4006f2:	4b9d      	ldr	r3, [pc, #628]	; (400968 <mxt_init_device+0x28c>)
  4006f4:	4798      	blx	r3
	device->info_object = (struct mxt_info_object *)
  4006f6:	6020      	str	r0, [r4, #0]
	twihs_package_t packet = {
  4006f8:	9501      	str	r5, [sp, #4]
  4006fa:	9505      	str	r5, [sp, #20]
  4006fc:	2302      	movs	r3, #2
  4006fe:	9302      	str	r3, [sp, #8]
  400700:	9003      	str	r0, [sp, #12]
  400702:	2307      	movs	r3, #7
  400704:	9304      	str	r3, [sp, #16]
  400706:	f88d 7014 	strb.w	r7, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  40070a:	a901      	add	r1, sp, #4
  40070c:	4630      	mov	r0, r6
  40070e:	4b97      	ldr	r3, [pc, #604]	; (40096c <mxt_init_device+0x290>)
  400710:	4798      	blx	r3
  400712:	1b40      	subs	r0, r0, r5
  400714:	bf18      	it	ne
  400716:	2001      	movne	r0, #1
  400718:	4240      	negs	r0, r0
	if ((status = mxt_read_id_block(device)) != STATUS_OK) {
  40071a:	b108      	cbz	r0, 400720 <mxt_init_device+0x44>
	}

	device->multitouch_report_offset = status;

	return STATUS_OK;
}
  40071c:	b007      	add	sp, #28
  40071e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			malloc(device->info_object->obj_count *
  400720:	6825      	ldr	r5, [r4, #0]
  400722:	79a8      	ldrb	r0, [r5, #6]
  400724:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  400728:	0040      	lsls	r0, r0, #1
  40072a:	4b8f      	ldr	r3, [pc, #572]	; (400968 <mxt_init_device+0x28c>)
  40072c:	4798      	blx	r3
	device->object_list = (struct mxt_object *)
  40072e:	6060      	str	r0, [r4, #4]
	twihs_package_t packet = {
  400730:	2300      	movs	r3, #0
  400732:	9301      	str	r3, [sp, #4]
  400734:	9304      	str	r3, [sp, #16]
  400736:	9305      	str	r3, [sp, #20]
  400738:	2307      	movs	r3, #7
  40073a:	f88d 3004 	strb.w	r3, [sp, #4]
  40073e:	2302      	movs	r3, #2
  400740:	9302      	str	r3, [sp, #8]
  400742:	9003      	str	r0, [sp, #12]
		.length       = device->info_object->obj_count *
  400744:	79ab      	ldrb	r3, [r5, #6]
  400746:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40074a:	005b      	lsls	r3, r3, #1
	twihs_package_t packet = {
  40074c:	9304      	str	r3, [sp, #16]
  40074e:	7b23      	ldrb	r3, [r4, #12]
  400750:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  400754:	a901      	add	r1, sp, #4
  400756:	68a0      	ldr	r0, [r4, #8]
  400758:	4b84      	ldr	r3, [pc, #528]	; (40096c <mxt_init_device+0x290>)
  40075a:	4798      	blx	r3
  40075c:	3000      	adds	r0, #0
  40075e:	bf18      	it	ne
  400760:	2001      	movne	r0, #1
  400762:	4240      	negs	r0, r0
	if (status != STATUS_OK) {
  400764:	2800      	cmp	r0, #0
  400766:	d1d9      	bne.n	40071c <mxt_init_device+0x40>
	uint8_t *id_pointer = (uint8_t *)device->info_object;
  400768:	6827      	ldr	r7, [r4, #0]
	uint8_t *objects_pointer = (uint8_t *)device->object_list;
  40076a:	6860      	ldr	r0, [r4, #4]
			(device->info_object->obj_count *
  40076c:	79bb      	ldrb	r3, [r7, #6]
  40076e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
  400772:	0076      	lsls	r6, r6, #1
	crc_area_size = MXT_ID_BLOCK_SIZE +
  400774:	3607      	adds	r6, #7
  400776:	b2b6      	uxth	r6, r6
  400778:	463a      	mov	r2, r7
  40077a:	3706      	adds	r7, #6
	uint32_t crc_tmp = 0;
  40077c:	2100      	movs	r1, #0
		result ^= crcpoly;
  40077e:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 400970 <mxt_init_device+0x294>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  400782:	f892 e001 	ldrb.w	lr, [r2, #1]
  400786:	7815      	ldrb	r5, [r2, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  400788:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
  40078c:	ea85 0141 	eor.w	r1, r5, r1, lsl #1
	if (result & 0x1000000) {
  400790:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
		result ^= crcpoly;
  400794:	bf18      	it	ne
  400796:	ea81 010c 	eorne.w	r1, r1, ip
  40079a:	3202      	adds	r2, #2
	for (i = 0; i < MXT_ID_BLOCK_SIZE - 1; i += 2) {
  40079c:	42ba      	cmp	r2, r7
  40079e:	d1f0      	bne.n	400782 <mxt_init_device+0xa6>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  4007a0:	7802      	ldrb	r2, [r0, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4007a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4007a6:	ea83 0241 	eor.w	r2, r3, r1, lsl #1
	if (result & 0x1000000) {
  4007aa:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4007ae:	d003      	beq.n	4007b8 <mxt_init_device+0xdc>
		result ^= crcpoly;
  4007b0:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  4007b4:	f082 021b 	eor.w	r2, r2, #27
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  4007b8:	f1a6 0708 	sub.w	r7, r6, #8
  4007bc:	2f01      	cmp	r7, #1
  4007be:	dd12      	ble.n	4007e6 <mxt_init_device+0x10a>
  4007c0:	2301      	movs	r3, #1
		result ^= crcpoly;
  4007c2:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 400970 <mxt_init_device+0x294>
		crc_tmp = mxt_crc_24(crc_tmp, objects_pointer[i],
  4007c6:	18c1      	adds	r1, r0, r3
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  4007c8:	784d      	ldrb	r5, [r1, #1]
  4007ca:	5cc1      	ldrb	r1, [r0, r3]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4007cc:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  4007d0:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
	if (result & 0x1000000) {
  4007d4:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		result ^= crcpoly;
  4007d8:	bf18      	it	ne
  4007da:	ea82 020e 	eorne.w	r2, r2, lr
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  4007de:	3302      	adds	r3, #2
  4007e0:	b29b      	uxth	r3, r3
  4007e2:	42bb      	cmp	r3, r7
  4007e4:	dbef      	blt.n	4007c6 <mxt_init_device+0xea>
	crc_tmp = mxt_crc_24(crc_tmp,
  4007e6:	4430      	add	r0, r6
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4007e8:	f810 3c08 	ldrb.w	r3, [r0, #-8]
  4007ec:	ea83 0242 	eor.w	r2, r3, r2, lsl #1
	if (result & 0x1000000) {
  4007f0:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4007f4:	d003      	beq.n	4007fe <mxt_init_device+0x122>
		result ^= crcpoly;
  4007f6:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  4007fa:	f082 021b 	eor.w	r2, r2, #27
	*crc = (crc_tmp & 0x00FFFFFF);
  4007fe:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	twihs_package_t packet = {
  400802:	2300      	movs	r3, #0
  400804:	9301      	str	r3, [sp, #4]
  400806:	9305      	str	r3, [sp, #20]
  400808:	f88d 6004 	strb.w	r6, [sp, #4]
  40080c:	0a36      	lsrs	r6, r6, #8
  40080e:	f88d 6005 	strb.w	r6, [sp, #5]
  400812:	2302      	movs	r3, #2
  400814:	9302      	str	r3, [sp, #8]
  400816:	f8cd d00c 	str.w	sp, [sp, #12]
  40081a:	2303      	movs	r3, #3
  40081c:	9304      	str	r3, [sp, #16]
  40081e:	7b23      	ldrb	r3, [r4, #12]
  400820:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  400824:	a901      	add	r1, sp, #4
  400826:	68a0      	ldr	r0, [r4, #8]
  400828:	4b50      	ldr	r3, [pc, #320]	; (40096c <mxt_init_device+0x290>)
  40082a:	4798      	blx	r3
  40082c:	b328      	cbz	r0, 40087a <mxt_init_device+0x19e>
		return ERR_IO_ERROR;
  40082e:	f04f 33ff 	mov.w	r3, #4294967295
	if (crc_calculated != crc_read) {
  400832:	42ab      	cmp	r3, r5
  400834:	f040 808b 	bne.w	40094e <mxt_init_device+0x272>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400838:	6825      	ldr	r5, [r4, #0]
  40083a:	79a8      	ldrb	r0, [r5, #6]
  40083c:	b198      	cbz	r0, 400866 <mxt_init_device+0x18a>
  40083e:	2300      	movs	r3, #0
  400840:	3301      	adds	r3, #1
  400842:	b2da      	uxtb	r2, r3
  400844:	4290      	cmp	r0, r2
  400846:	d8fb      	bhi.n	400840 <mxt_init_device+0x164>
		tot_report_ids += (device->object_list[i].num_report_ids);
  400848:	6862      	ldr	r2, [r4, #4]
  40084a:	1e43      	subs	r3, r0, #1
  40084c:	b2db      	uxtb	r3, r3
  40084e:	3301      	adds	r3, #1
  400850:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400854:	eb02 0143 	add.w	r1, r2, r3, lsl #1
  400858:	2000      	movs	r0, #0
  40085a:	7953      	ldrb	r3, [r2, #5]
  40085c:	4418      	add	r0, r3
  40085e:	b2c0      	uxtb	r0, r0
  400860:	3206      	adds	r2, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400862:	4291      	cmp	r1, r2
  400864:	d1f9      	bne.n	40085a <mxt_init_device+0x17e>
			malloc(sizeof(struct mxt_report_id_map) *
  400866:	0040      	lsls	r0, r0, #1
  400868:	4b3f      	ldr	r3, [pc, #252]	; (400968 <mxt_init_device+0x28c>)
  40086a:	4798      	blx	r3
	device->report_id_map = (struct mxt_report_id_map *)
  40086c:	6160      	str	r0, [r4, #20]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40086e:	79ab      	ldrb	r3, [r5, #6]
  400870:	b173      	cbz	r3, 400890 <mxt_init_device+0x1b4>
  400872:	2700      	movs	r7, #0
  400874:	2601      	movs	r6, #1
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  400876:	46be      	mov	lr, r7
  400878:	e037      	b.n	4008ea <mxt_init_device+0x20e>
		return ((uint32_t)crc[2] << 16) | ((uint16_t)crc[1] << 8) | crc[0];
  40087a:	f89d 2002 	ldrb.w	r2, [sp, #2]
  40087e:	f89d 3000 	ldrb.w	r3, [sp]
  400882:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400886:	f89d 2001 	ldrb.w	r2, [sp, #1]
  40088a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40088e:	e7d0      	b.n	400832 <mxt_init_device+0x156>
		return ERR_BAD_DATA;
  400890:	f06f 0003 	mvn.w	r0, #3
  400894:	e742      	b.n	40071c <mxt_init_device+0x40>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  400896:	3001      	adds	r0, #1
  400898:	b2c0      	uxtb	r0, r0
  40089a:	6862      	ldr	r2, [r4, #4]
  40089c:	1953      	adds	r3, r2, r5
  40089e:	7919      	ldrb	r1, [r3, #4]
  4008a0:	4281      	cmp	r1, r0
  4008a2:	d31c      	bcc.n	4008de <mxt_init_device+0x202>
			if (device->object_list[i].num_report_ids != 0) {
  4008a4:	795b      	ldrb	r3, [r3, #5]
  4008a6:	2b00      	cmp	r3, #0
  4008a8:	d0f5      	beq.n	400896 <mxt_init_device+0x1ba>
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  4008aa:	6862      	ldr	r2, [r4, #4]
  4008ac:	442a      	add	r2, r5
  4008ae:	7953      	ldrb	r3, [r2, #5]
  4008b0:	2b00      	cmp	r3, #0
  4008b2:	d0f0      	beq.n	400896 <mxt_init_device+0x1ba>
  4008b4:	4633      	mov	r3, r6
							device->object_list[i].type;
  4008b6:	7811      	ldrb	r1, [r2, #0]
					device->report_id_map[id_index].object_type =
  4008b8:	6962      	ldr	r2, [r4, #20]
  4008ba:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
					device->report_id_map[id_index].instance = j;
  4008be:	6962      	ldr	r2, [r4, #20]
  4008c0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  4008c4:	7050      	strb	r0, [r2, #1]
					id_index++;
  4008c6:	3301      	adds	r3, #1
  4008c8:	b2db      	uxtb	r3, r3
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  4008ca:	6862      	ldr	r2, [r4, #4]
  4008cc:	442a      	add	r2, r5
  4008ce:	1b99      	subs	r1, r3, r6
  4008d0:	f892 c005 	ldrb.w	ip, [r2, #5]
  4008d4:	b2c9      	uxtb	r1, r1
  4008d6:	458c      	cmp	ip, r1
  4008d8:	d8ed      	bhi.n	4008b6 <mxt_init_device+0x1da>
					id_index++;
  4008da:	461e      	mov	r6, r3
  4008dc:	e7db      	b.n	400896 <mxt_init_device+0x1ba>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4008de:	3701      	adds	r7, #1
  4008e0:	b2ff      	uxtb	r7, r7
  4008e2:	6823      	ldr	r3, [r4, #0]
  4008e4:	799b      	ldrb	r3, [r3, #6]
  4008e6:	429f      	cmp	r7, r3
  4008e8:	d207      	bcs.n	4008fa <mxt_init_device+0x21e>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  4008ea:	eb07 0347 	add.w	r3, r7, r7, lsl #1
  4008ee:	005a      	lsls	r2, r3, #1
  4008f0:	4615      	mov	r5, r2
  4008f2:	6863      	ldr	r3, [r4, #4]
  4008f4:	4413      	add	r3, r2
  4008f6:	4670      	mov	r0, lr
  4008f8:	e7d4      	b.n	4008a4 <mxt_init_device+0x1c8>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4008fa:	b35b      	cbz	r3, 400954 <mxt_init_device+0x278>
  4008fc:	4610      	mov	r0, r2
  4008fe:	3b01      	subs	r3, #1
  400900:	b2db      	uxtb	r3, r3
  400902:	3301      	adds	r3, #1
  400904:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400908:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  40090c:	2100      	movs	r1, #0
		tot_report_ids += (device->object_list[i].num_report_ids);
  40090e:	7943      	ldrb	r3, [r0, #5]
  400910:	4419      	add	r1, r3
  400912:	b2c9      	uxtb	r1, r1
  400914:	3006      	adds	r0, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400916:	4282      	cmp	r2, r0
  400918:	d1f9      	bne.n	40090e <mxt_init_device+0x232>
	for (i = 0; i < tot_rpt_id; ++i) {
  40091a:	b1f1      	cbz	r1, 40095a <mxt_init_device+0x27e>
		if (device->report_id_map[i].object_type == object_type) {
  40091c:	6962      	ldr	r2, [r4, #20]
  40091e:	7813      	ldrb	r3, [r2, #0]
  400920:	2b09      	cmp	r3, #9
  400922:	d00f      	beq.n	400944 <mxt_init_device+0x268>
  400924:	2300      	movs	r3, #0
	for (i = 0; i < tot_rpt_id; ++i) {
  400926:	3301      	adds	r3, #1
  400928:	b2db      	uxtb	r3, r3
  40092a:	428b      	cmp	r3, r1
  40092c:	d00c      	beq.n	400948 <mxt_init_device+0x26c>
		if (device->report_id_map[i].object_type == object_type) {
  40092e:	f812 0f02 	ldrb.w	r0, [r2, #2]!
  400932:	2809      	cmp	r0, #9
  400934:	d1f7      	bne.n	400926 <mxt_init_device+0x24a>
			return i;
  400936:	b25b      	sxtb	r3, r3
	if (status == -1) {
  400938:	f1b3 3fff 	cmp.w	r3, #4294967295
  40093c:	d010      	beq.n	400960 <mxt_init_device+0x284>
	device->multitouch_report_offset = status;
  40093e:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
  400940:	2000      	movs	r0, #0
  400942:	e6eb      	b.n	40071c <mxt_init_device+0x40>
		if (device->report_id_map[i].object_type == object_type) {
  400944:	2300      	movs	r3, #0
  400946:	e7f6      	b.n	400936 <mxt_init_device+0x25a>
		return ERR_BAD_DATA;
  400948:	f06f 0003 	mvn.w	r0, #3
  40094c:	e6e6      	b.n	40071c <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  40094e:	f06f 0003 	mvn.w	r0, #3
  400952:	e6e3      	b.n	40071c <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  400954:	f06f 0003 	mvn.w	r0, #3
  400958:	e6e0      	b.n	40071c <mxt_init_device+0x40>
  40095a:	f06f 0003 	mvn.w	r0, #3
  40095e:	e6dd      	b.n	40071c <mxt_init_device+0x40>
  400960:	f06f 0003 	mvn.w	r0, #3
  400964:	e6da      	b.n	40071c <mxt_init_device+0x40>
  400966:	bf00      	nop
  400968:	00406a09 	.word	0x00406a09
  40096c:	00401dbd 	.word	0x00401dbd
  400970:	0080001b 	.word	0x0080001b

00400974 <mxt_get_object_address>:
uint16_t mxt_get_object_address(struct mxt_device *device, uint8_t object_id,
		uint8_t instance)
{
	uint8_t i;

	for (i = 0; i < device->info_object->obj_count; i++) {
  400974:	6803      	ldr	r3, [r0, #0]
  400976:	799a      	ldrb	r2, [r3, #6]
  400978:	b1d2      	cbz	r2, 4009b0 <mxt_get_object_address+0x3c>
{
  40097a:	b410      	push	{r4}
		if (object_id == device->object_list[i].type) {
  40097c:	6844      	ldr	r4, [r0, #4]
  40097e:	7823      	ldrb	r3, [r4, #0]
  400980:	428b      	cmp	r3, r1
  400982:	d00e      	beq.n	4009a2 <mxt_get_object_address+0x2e>
  400984:	1da3      	adds	r3, r4, #6
  400986:	3a01      	subs	r2, #1
  400988:	b2d2      	uxtb	r2, r2
  40098a:	3201      	adds	r2, #1
  40098c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  400990:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; i++) {
  400994:	4293      	cmp	r3, r2
  400996:	d009      	beq.n	4009ac <mxt_get_object_address+0x38>
		if (object_id == device->object_list[i].type) {
  400998:	461c      	mov	r4, r3
  40099a:	f813 0b06 	ldrb.w	r0, [r3], #6
  40099e:	4288      	cmp	r0, r1
  4009a0:	d1f8      	bne.n	400994 <mxt_get_object_address+0x20>
			return device->object_list[i].start_address;
  4009a2:	f8b4 0001 	ldrh.w	r0, [r4, #1]
		}
	}

	return 0;
}
  4009a6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4009aa:	4770      	bx	lr
	return 0;
  4009ac:	2000      	movs	r0, #0
  4009ae:	e7fa      	b.n	4009a6 <mxt_get_object_address+0x32>
  4009b0:	2000      	movs	r0, #0
  4009b2:	4770      	bx	lr

004009b4 <mxt_write_config_object>:
 * \param *obj_data Pointer to memory buffer containing object data
 * \result Operation result status code
 */
status_code_t mxt_write_config_object(struct mxt_device *device,
		mxt_memory_adr memory_adr, void *obj_data)
{
  4009b4:	b530      	push	{r4, r5, lr}
  4009b6:	b087      	sub	sp, #28
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  4009b8:	2300      	movs	r3, #0
  4009ba:	9301      	str	r3, [sp, #4]
  4009bc:	9304      	str	r3, [sp, #16]
  4009be:	9305      	str	r3, [sp, #20]
  4009c0:	f88d 1004 	strb.w	r1, [sp, #4]
  4009c4:	0a0b      	lsrs	r3, r1, #8
  4009c6:	f88d 3005 	strb.w	r3, [sp, #5]
  4009ca:	2302      	movs	r3, #2
  4009cc:	9302      	str	r3, [sp, #8]
  4009ce:	9203      	str	r2, [sp, #12]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4009d0:	6803      	ldr	r3, [r0, #0]
  4009d2:	799a      	ldrb	r2, [r3, #6]
  4009d4:	b1ba      	cbz	r2, 400a06 <mxt_write_config_object+0x52>
		if (device->object_list[i].start_address == mem_adr) {
  4009d6:	6844      	ldr	r4, [r0, #4]
  4009d8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
  4009dc:	428b      	cmp	r3, r1
  4009de:	d00f      	beq.n	400a00 <mxt_write_config_object+0x4c>
  4009e0:	1da3      	adds	r3, r4, #6
  4009e2:	3a01      	subs	r2, #1
  4009e4:	b2d2      	uxtb	r2, r2
  4009e6:	3201      	adds	r2, #1
  4009e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  4009ec:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4009f0:	4293      	cmp	r3, r2
  4009f2:	d016      	beq.n	400a22 <mxt_write_config_object+0x6e>
		if (device->object_list[i].start_address == mem_adr) {
  4009f4:	461c      	mov	r4, r3
  4009f6:	3306      	adds	r3, #6
  4009f8:	f8b4 5001 	ldrh.w	r5, [r4, #1]
  4009fc:	428d      	cmp	r5, r1
  4009fe:	d1f7      	bne.n	4009f0 <mxt_write_config_object+0x3c>
			return (device->object_list[i].size + 1);
  400a00:	78e2      	ldrb	r2, [r4, #3]
  400a02:	3201      	adds	r2, #1
  400a04:	b2d2      	uxtb	r2, r2
		.addr[0]      = memory_adr,
		.addr[1]      = memory_adr >> 8,
		.addr_length  = sizeof(mxt_memory_adr),
		.chip         = device->mxt_chip_adr,
		.buffer       = obj_data,
		.length       = mxt_get_object_size(device, memory_adr)
  400a06:	9204      	str	r2, [sp, #16]
	twihs_package_t packet = {
  400a08:	7b03      	ldrb	r3, [r0, #12]
  400a0a:	f88d 3014 	strb.w	r3, [sp, #20]
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  400a0e:	a901      	add	r1, sp, #4
  400a10:	6880      	ldr	r0, [r0, #8]
  400a12:	4b05      	ldr	r3, [pc, #20]	; (400a28 <mxt_write_config_object+0x74>)
  400a14:	4798      	blx	r3
  400a16:	3000      	adds	r0, #0
  400a18:	bf18      	it	ne
  400a1a:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}

}
  400a1c:	4240      	negs	r0, r0
  400a1e:	b007      	add	sp, #28
  400a20:	bd30      	pop	{r4, r5, pc}
	return 0;
  400a22:	2200      	movs	r2, #0
  400a24:	e7ef      	b.n	400a06 <mxt_write_config_object+0x52>
  400a26:	bf00      	nop
  400a28:	00401e69 	.word	0x00401e69

00400a2c <mxt_write_config_reg>:
 * \param value Value to be written to register
 * \result Operation result status code
 */
status_code_t mxt_write_config_reg(struct mxt_device *device,
		mxt_memory_adr memory_adr, uint8_t value)
{
  400a2c:	b500      	push	{lr}
  400a2e:	b089      	sub	sp, #36	; 0x24
  400a30:	f88d 2007 	strb.w	r2, [sp, #7]
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  400a34:	2300      	movs	r3, #0
  400a36:	9303      	str	r3, [sp, #12]
  400a38:	9307      	str	r3, [sp, #28]
  400a3a:	f88d 100c 	strb.w	r1, [sp, #12]
  400a3e:	0a09      	lsrs	r1, r1, #8
  400a40:	f88d 100d 	strb.w	r1, [sp, #13]
  400a44:	2302      	movs	r3, #2
  400a46:	9304      	str	r3, [sp, #16]
  400a48:	f10d 0307 	add.w	r3, sp, #7
  400a4c:	9305      	str	r3, [sp, #20]
  400a4e:	2301      	movs	r3, #1
  400a50:	9306      	str	r3, [sp, #24]
  400a52:	7b03      	ldrb	r3, [r0, #12]
  400a54:	f88d 301c 	strb.w	r3, [sp, #28]
		.chip         = device->mxt_chip_adr,
		.buffer       = &value,
		.length       = sizeof(value)
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  400a58:	a903      	add	r1, sp, #12
  400a5a:	6880      	ldr	r0, [r0, #8]
  400a5c:	4b04      	ldr	r3, [pc, #16]	; (400a70 <mxt_write_config_reg+0x44>)
  400a5e:	4798      	blx	r3
  400a60:	3000      	adds	r0, #0
  400a62:	bf18      	it	ne
  400a64:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}
}
  400a66:	4240      	negs	r0, r0
  400a68:	b009      	add	sp, #36	; 0x24
  400a6a:	f85d fb04 	ldr.w	pc, [sp], #4
  400a6e:	bf00      	nop
  400a70:	00401e69 	.word	0x00401e69

00400a74 <mxt_is_message_pending>:
 * \param *device Pointer to mxt_device instance
 * \return Return /CHG pin status
 */
bool mxt_is_message_pending(struct mxt_device *device)
{
	if (ioport_get_pin_level(device->chgpin) == false) {
  400a74:	6982      	ldr	r2, [r0, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400a76:	4b07      	ldr	r3, [pc, #28]	; (400a94 <mxt_is_message_pending+0x20>)
  400a78:	eb03 1352 	add.w	r3, r3, r2, lsr #5
  400a7c:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400a7e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  400a80:	f002 021f 	and.w	r2, r2, #31
  400a84:	2301      	movs	r3, #1
  400a86:	fa03 f202 	lsl.w	r2, r3, r2
  400a8a:	420a      	tst	r2, r1
		return true;
	} else {
		return false;
	}
}
  400a8c:	bf0c      	ite	eq
  400a8e:	4618      	moveq	r0, r3
  400a90:	2000      	movne	r0, #0
  400a92:	4770      	bx	lr
  400a94:	00200707 	.word	0x00200707

00400a98 <mxt_read_message>:
 * \param *message Pointer to mxt_message instance
 * \return Operation result status code
 */
status_code_t mxt_read_message(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
  400a98:	b530      	push	{r4, r5, lr}
  400a9a:	b087      	sub	sp, #28
  400a9c:	4604      	mov	r4, r0
  400a9e:	460d      	mov	r5, r1
	uint16_t obj_adr = mxt_get_object_address(device,
  400aa0:	2200      	movs	r2, #0
  400aa2:	2105      	movs	r1, #5
  400aa4:	4b0d      	ldr	r3, [pc, #52]	; (400adc <mxt_read_message+0x44>)
  400aa6:	4798      	blx	r3
			MXT_GEN_MESSAGEPROCESSOR_T5, 0);

	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  400aa8:	2300      	movs	r3, #0
  400aaa:	9301      	str	r3, [sp, #4]
  400aac:	9305      	str	r3, [sp, #20]
  400aae:	f88d 0004 	strb.w	r0, [sp, #4]
  400ab2:	0a00      	lsrs	r0, r0, #8
  400ab4:	f88d 0005 	strb.w	r0, [sp, #5]
  400ab8:	2302      	movs	r3, #2
  400aba:	9302      	str	r3, [sp, #8]
  400abc:	9503      	str	r5, [sp, #12]
  400abe:	2309      	movs	r3, #9
  400ac0:	9304      	str	r3, [sp, #16]
  400ac2:	7b23      	ldrb	r3, [r4, #12]
  400ac4:	f88d 3014 	strb.w	r3, [sp, #20]
		.buffer       = message,
		.length       = MXT_TWI_MSG_SIZE_T5
	};

	/* Read information from the slave */
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  400ac8:	a901      	add	r1, sp, #4
  400aca:	68a0      	ldr	r0, [r4, #8]
  400acc:	4b04      	ldr	r3, [pc, #16]	; (400ae0 <mxt_read_message+0x48>)
  400ace:	4798      	blx	r3
  400ad0:	3000      	adds	r0, #0
  400ad2:	bf18      	it	ne
  400ad4:	2001      	movne	r0, #1
		return mxt_validate_message(&packet);
#else
		return STATUS_OK;
#endif
	}
}
  400ad6:	4240      	negs	r0, r0
  400ad8:	b007      	add	sp, #28
  400ada:	bd30      	pop	{r4, r5, pc}
  400adc:	00400975 	.word	0x00400975
  400ae0:	00401dbd 	.word	0x00401dbd

00400ae4 <mxt_read_touch_event>:
 * \param *touch_event Pointer to mxt_touch_event instance
 * \return Operation result status code
 */
status_code_t mxt_read_touch_event(struct mxt_device *device,
		struct mxt_touch_event *touch_event)
{
  400ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
  400ae6:	b085      	sub	sp, #20
  400ae8:	4604      	mov	r4, r0
  400aea:	460e      	mov	r6, r1
	uint8_t obj_type, status;
	struct mxt_conf_messageprocessor_t5 message;

	while (mxt_is_message_pending(device)) {
  400aec:	4d17      	ldr	r5, [pc, #92]	; (400b4c <mxt_read_touch_event+0x68>)
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  400aee:	4f18      	ldr	r7, [pc, #96]	; (400b50 <mxt_read_touch_event+0x6c>)
	while (mxt_is_message_pending(device)) {
  400af0:	4620      	mov	r0, r4
  400af2:	47a8      	blx	r5
  400af4:	b328      	cbz	r0, 400b42 <mxt_read_touch_event+0x5e>
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  400af6:	a901      	add	r1, sp, #4
  400af8:	4620      	mov	r0, r4
  400afa:	47b8      	blx	r7
  400afc:	4603      	mov	r3, r0
  400afe:	bb10      	cbnz	r0, 400b46 <mxt_read_touch_event+0x62>
 * \return Operation
 */
enum mxt_object_type mxt_get_object_type(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
	return (enum mxt_object_type)(device->report_id_map[message->reportid].object_type);
  400b00:	f89d 3004 	ldrb.w	r3, [sp, #4]
  400b04:	6962      	ldr	r2, [r4, #20]
		if (obj_type == MXT_TOUCH_MULTITOUCHSCREEN_T9) {
  400b06:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
  400b0a:	2a09      	cmp	r2, #9
  400b0c:	d1f0      	bne.n	400af0 <mxt_read_touch_event+0xc>
			touch_event->id = (message.reportid -
  400b0e:	7f22      	ldrb	r2, [r4, #28]
  400b10:	1a9b      	subs	r3, r3, r2
  400b12:	7033      	strb	r3, [r6, #0]
			touch_event->status = message.message[0];
  400b14:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400b18:	7073      	strb	r3, [r6, #1]
					((message.message[3] & 0xf0) >> 4);
  400b1a:	f89d 3008 	ldrb.w	r3, [sp, #8]
			touch_event->x = (message.message[1] << 4) |
  400b1e:	f89d 1006 	ldrb.w	r1, [sp, #6]
					((message.message[3] & 0xf0) >> 4);
  400b22:	091a      	lsrs	r2, r3, #4
			touch_event->x = (message.message[1] << 4) |
  400b24:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
  400b28:	8072      	strh	r2, [r6, #2]
			touch_event->y = (message.message[2] << 4) |
  400b2a:	f89d 2007 	ldrb.w	r2, [sp, #7]
					(message.message[3] & 0x0f);
  400b2e:	f003 030f 	and.w	r3, r3, #15
			touch_event->y = (message.message[2] << 4) |
  400b32:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  400b36:	80b3      	strh	r3, [r6, #4]
			touch_event->size = message.message[4];
  400b38:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400b3c:	71b3      	strb	r3, [r6, #6]
			return STATUS_OK;
  400b3e:	2300      	movs	r3, #0
  400b40:	e001      	b.n	400b46 <mxt_read_touch_event+0x62>
	return ERR_BAD_DATA;
  400b42:	f06f 0303 	mvn.w	r3, #3
}
  400b46:	4618      	mov	r0, r3
  400b48:	b005      	add	sp, #20
  400b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400b4c:	00400a75 	.word	0x00400a75
  400b50:	00400a99 	.word	0x00400a99

00400b54 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400b54:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400b56:	4810      	ldr	r0, [pc, #64]	; (400b98 <sysclk_init+0x44>)
  400b58:	4b10      	ldr	r3, [pc, #64]	; (400b9c <sysclk_init+0x48>)
  400b5a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400b5c:	213e      	movs	r1, #62	; 0x3e
  400b5e:	2000      	movs	r0, #0
  400b60:	4b0f      	ldr	r3, [pc, #60]	; (400ba0 <sysclk_init+0x4c>)
  400b62:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400b64:	4c0f      	ldr	r4, [pc, #60]	; (400ba4 <sysclk_init+0x50>)
  400b66:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400b68:	2800      	cmp	r0, #0
  400b6a:	d0fc      	beq.n	400b66 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400b6c:	4b0e      	ldr	r3, [pc, #56]	; (400ba8 <sysclk_init+0x54>)
  400b6e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400b70:	4a0e      	ldr	r2, [pc, #56]	; (400bac <sysclk_init+0x58>)
  400b72:	4b0f      	ldr	r3, [pc, #60]	; (400bb0 <sysclk_init+0x5c>)
  400b74:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400b76:	4c0f      	ldr	r4, [pc, #60]	; (400bb4 <sysclk_init+0x60>)
  400b78:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400b7a:	2800      	cmp	r0, #0
  400b7c:	d0fc      	beq.n	400b78 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400b7e:	2002      	movs	r0, #2
  400b80:	4b0d      	ldr	r3, [pc, #52]	; (400bb8 <sysclk_init+0x64>)
  400b82:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400b84:	2000      	movs	r0, #0
  400b86:	4b0d      	ldr	r3, [pc, #52]	; (400bbc <sysclk_init+0x68>)
  400b88:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400b8a:	4b0d      	ldr	r3, [pc, #52]	; (400bc0 <sysclk_init+0x6c>)
  400b8c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400b8e:	480d      	ldr	r0, [pc, #52]	; (400bc4 <sysclk_init+0x70>)
  400b90:	4b02      	ldr	r3, [pc, #8]	; (400b9c <sysclk_init+0x48>)
  400b92:	4798      	blx	r3
  400b94:	bd10      	pop	{r4, pc}
  400b96:	bf00      	nop
  400b98:	07270e00 	.word	0x07270e00
  400b9c:	00402215 	.word	0x00402215
  400ba0:	00401ab9 	.word	0x00401ab9
  400ba4:	00401b0d 	.word	0x00401b0d
  400ba8:	00401b1d 	.word	0x00401b1d
  400bac:	20183f01 	.word	0x20183f01
  400bb0:	400e0600 	.word	0x400e0600
  400bb4:	00401b2d 	.word	0x00401b2d
  400bb8:	00401a1d 	.word	0x00401a1d
  400bbc:	00401a55 	.word	0x00401a55
  400bc0:	00402109 	.word	0x00402109
  400bc4:	11e1a300 	.word	0x11e1a300

00400bc8 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  400bc8:	b510      	push	{r4, lr}
  400bca:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  400bcc:	4b10      	ldr	r3, [pc, #64]	; (400c10 <spi_master_init+0x48>)
  400bce:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  400bd0:	2380      	movs	r3, #128	; 0x80
  400bd2:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400bd4:	6863      	ldr	r3, [r4, #4]
  400bd6:	f043 0301 	orr.w	r3, r3, #1
  400bda:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400bdc:	6863      	ldr	r3, [r4, #4]
  400bde:	f043 0310 	orr.w	r3, r3, #16
  400be2:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400be4:	6863      	ldr	r3, [r4, #4]
  400be6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400bea:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  400bec:	2100      	movs	r1, #0
  400bee:	4620      	mov	r0, r4
  400bf0:	4b08      	ldr	r3, [pc, #32]	; (400c14 <spi_master_init+0x4c>)
  400bf2:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400bf4:	6863      	ldr	r3, [r4, #4]
  400bf6:	f023 0302 	bic.w	r3, r3, #2
  400bfa:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  400bfc:	6863      	ldr	r3, [r4, #4]
  400bfe:	f023 0304 	bic.w	r3, r3, #4
  400c02:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  400c04:	2100      	movs	r1, #0
  400c06:	4620      	mov	r0, r4
  400c08:	4b03      	ldr	r3, [pc, #12]	; (400c18 <spi_master_init+0x50>)
  400c0a:	4798      	blx	r3
  400c0c:	bd10      	pop	{r4, pc}
  400c0e:	bf00      	nop
  400c10:	00401b5d 	.word	0x00401b5d
  400c14:	00401b89 	.word	0x00401b89
  400c18:	00401b9f 	.word	0x00401b9f

00400c1c <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  400c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400c20:	4604      	mov	r4, r0
  400c22:	460d      	mov	r5, r1
  400c24:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  400c26:	4915      	ldr	r1, [pc, #84]	; (400c7c <spi_master_setup_device+0x60>)
  400c28:	4618      	mov	r0, r3
  400c2a:	4b15      	ldr	r3, [pc, #84]	; (400c80 <spi_master_setup_device+0x64>)
  400c2c:	4798      	blx	r3
  400c2e:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  400c30:	2300      	movs	r3, #0
  400c32:	461a      	mov	r2, r3
  400c34:	6829      	ldr	r1, [r5, #0]
  400c36:	4620      	mov	r0, r4
  400c38:	f8df 805c 	ldr.w	r8, [pc, #92]	; 400c98 <spi_master_setup_device+0x7c>
  400c3c:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  400c3e:	2208      	movs	r2, #8
  400c40:	6829      	ldr	r1, [r5, #0]
  400c42:	4620      	mov	r0, r4
  400c44:	4b0f      	ldr	r3, [pc, #60]	; (400c84 <spi_master_setup_device+0x68>)
  400c46:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  400c48:	b2fa      	uxtb	r2, r7
  400c4a:	6829      	ldr	r1, [r5, #0]
  400c4c:	4620      	mov	r0, r4
  400c4e:	4b0e      	ldr	r3, [pc, #56]	; (400c88 <spi_master_setup_device+0x6c>)
  400c50:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  400c52:	2208      	movs	r2, #8
  400c54:	6829      	ldr	r1, [r5, #0]
  400c56:	4620      	mov	r0, r4
  400c58:	4b0c      	ldr	r3, [pc, #48]	; (400c8c <spi_master_setup_device+0x70>)
  400c5a:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  400c5c:	0872      	lsrs	r2, r6, #1
  400c5e:	6829      	ldr	r1, [r5, #0]
  400c60:	4620      	mov	r0, r4
  400c62:	4b0b      	ldr	r3, [pc, #44]	; (400c90 <spi_master_setup_device+0x74>)
  400c64:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  400c66:	f086 0201 	eor.w	r2, r6, #1
  400c6a:	f002 0201 	and.w	r2, r2, #1
  400c6e:	6829      	ldr	r1, [r5, #0]
  400c70:	4620      	mov	r0, r4
  400c72:	4b08      	ldr	r3, [pc, #32]	; (400c94 <spi_master_setup_device+0x78>)
  400c74:	4798      	blx	r3
  400c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400c7a:	bf00      	nop
  400c7c:	08f0d180 	.word	0x08f0d180
  400c80:	00401c7b 	.word	0x00401c7b
  400c84:	00401c67 	.word	0x00401c67
  400c88:	00401c91 	.word	0x00401c91
  400c8c:	00401c21 	.word	0x00401c21
  400c90:	00401be5 	.word	0x00401be5
  400c94:	00401c03 	.word	0x00401c03
  400c98:	00401cb9 	.word	0x00401cb9

00400c9c <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  400c9c:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  400c9e:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  400ca0:	f013 0f04 	tst.w	r3, #4
  400ca4:	d006      	beq.n	400cb4 <spi_select_device+0x18>
		if (device->id < MAX_NUM_WITH_DECODER) {
  400ca6:	6809      	ldr	r1, [r1, #0]
  400ca8:	290f      	cmp	r1, #15
  400caa:	d900      	bls.n	400cae <spi_select_device+0x12>
  400cac:	bd08      	pop	{r3, pc}
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  400cae:	4b06      	ldr	r3, [pc, #24]	; (400cc8 <spi_select_device+0x2c>)
  400cb0:	4798      	blx	r3
  400cb2:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  400cb4:	6809      	ldr	r1, [r1, #0]
  400cb6:	2903      	cmp	r1, #3
  400cb8:	d8f8      	bhi.n	400cac <spi_select_device+0x10>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  400cba:	2301      	movs	r3, #1
  400cbc:	fa03 f101 	lsl.w	r1, r3, r1
  400cc0:	43c9      	mvns	r1, r1
  400cc2:	4b01      	ldr	r3, [pc, #4]	; (400cc8 <spi_select_device+0x2c>)
  400cc4:	4798      	blx	r3
		}
	}
}
  400cc6:	e7f1      	b.n	400cac <spi_select_device+0x10>
  400cc8:	00401b89 	.word	0x00401b89

00400ccc <spi_write_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  400ccc:	b11a      	cbz	r2, 400cd6 <spi_write_packet+0xa>
{
  400cce:	b410      	push	{r4}
  400cd0:	460c      	mov	r4, r1
  400cd2:	4411      	add	r1, r2
  400cd4:	e006      	b.n	400ce4 <spi_write_packet+0x18>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  400cd6:	2000      	movs	r0, #0
  400cd8:	4770      	bx	lr
		val = data[i];
  400cda:	f814 3b01 	ldrb.w	r3, [r4], #1
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400cde:	60c3      	str	r3, [r0, #12]
	while (len) {
  400ce0:	42a1      	cmp	r1, r4
  400ce2:	d00c      	beq.n	400cfe <spi_write_packet+0x32>
{
  400ce4:	f643 2399 	movw	r3, #15001	; 0x3a99
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  400ce8:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  400cea:	f012 0f02 	tst.w	r2, #2
  400cee:	d1f4      	bne.n	400cda <spi_write_packet+0xe>
			if (!timeout--) {
  400cf0:	3b01      	subs	r3, #1
  400cf2:	d1f9      	bne.n	400ce8 <spi_write_packet+0x1c>
				return ERR_TIMEOUT;
  400cf4:	f06f 0002 	mvn.w	r0, #2
}
  400cf8:	f85d 4b04 	ldr.w	r4, [sp], #4
  400cfc:	4770      	bx	lr
	return STATUS_OK;
  400cfe:	2000      	movs	r0, #0
  400d00:	e7fa      	b.n	400cf8 <spi_write_packet+0x2c>

00400d02 <spi_read_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  400d02:	b13a      	cbz	r2, 400d14 <spi_read_packet+0x12>
{
  400d04:	b470      	push	{r4, r5, r6}
  400d06:	4615      	mov	r5, r2
  400d08:	460c      	mov	r4, r1
  400d0a:	440d      	add	r5, r1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400d0c:	26ff      	movs	r6, #255	; 0xff
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  400d0e:	f240 2101 	movw	r1, #513	; 0x201
  400d12:	e012      	b.n	400d3a <spi_read_packet+0x38>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  400d14:	2000      	movs	r0, #0
  400d16:	4770      	bx	lr
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400d18:	60c6      	str	r6, [r0, #12]
		while (!spi_is_rx_ready(p_spi)) {
  400d1a:	f643 2399 	movw	r3, #15001	; 0x3a99
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  400d1e:	6902      	ldr	r2, [r0, #16]
  400d20:	ea31 0202 	bics.w	r2, r1, r2
  400d24:	d004      	beq.n	400d30 <spi_read_packet+0x2e>
			if (!timeout--) {
  400d26:	3b01      	subs	r3, #1
  400d28:	d1f9      	bne.n	400d1e <spi_read_packet+0x1c>
				return ERR_TIMEOUT;
  400d2a:	f06f 0002 	mvn.w	r0, #2
  400d2e:	e00e      	b.n	400d4e <spi_read_packet+0x4c>
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  400d30:	6883      	ldr	r3, [r0, #8]
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
	*data = (uint8_t)spi_get(p_spi);
  400d32:	f804 3b01 	strb.w	r3, [r4], #1
	while (len) {
  400d36:	42a5      	cmp	r5, r4
  400d38:	d00b      	beq.n	400d52 <spi_read_packet+0x50>
{
  400d3a:	f643 2399 	movw	r3, #15001	; 0x3a99
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  400d3e:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  400d40:	f012 0f02 	tst.w	r2, #2
  400d44:	d1e8      	bne.n	400d18 <spi_read_packet+0x16>
			if (!timeout--) {
  400d46:	3b01      	subs	r3, #1
  400d48:	d1f9      	bne.n	400d3e <spi_read_packet+0x3c>
				return ERR_TIMEOUT;
  400d4a:	f06f 0002 	mvn.w	r0, #2
}
  400d4e:	bc70      	pop	{r4, r5, r6}
  400d50:	4770      	bx	lr
	return STATUS_OK;
  400d52:	2000      	movs	r0, #0
  400d54:	e7fb      	b.n	400d4e <spi_read_packet+0x4c>
	...

00400d58 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400d5c:	b980      	cbnz	r0, 400d80 <_read+0x28>
  400d5e:	460c      	mov	r4, r1
  400d60:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400d62:	2a00      	cmp	r2, #0
  400d64:	dd0f      	ble.n	400d86 <_read+0x2e>
  400d66:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400d68:	4e08      	ldr	r6, [pc, #32]	; (400d8c <_read+0x34>)
  400d6a:	4d09      	ldr	r5, [pc, #36]	; (400d90 <_read+0x38>)
  400d6c:	6830      	ldr	r0, [r6, #0]
  400d6e:	4621      	mov	r1, r4
  400d70:	682b      	ldr	r3, [r5, #0]
  400d72:	4798      	blx	r3
		ptr++;
  400d74:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400d76:	42bc      	cmp	r4, r7
  400d78:	d1f8      	bne.n	400d6c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400d7a:	4640      	mov	r0, r8
  400d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400d80:	f04f 38ff 	mov.w	r8, #4294967295
  400d84:	e7f9      	b.n	400d7a <_read+0x22>
	for (; len > 0; --len) {
  400d86:	4680      	mov	r8, r0
  400d88:	e7f7      	b.n	400d7a <_read+0x22>
  400d8a:	bf00      	nop
  400d8c:	2040ca00 	.word	0x2040ca00
  400d90:	2040c9f8 	.word	0x2040c9f8

00400d94 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400d94:	3801      	subs	r0, #1
  400d96:	2802      	cmp	r0, #2
  400d98:	d815      	bhi.n	400dc6 <_write+0x32>
{
  400d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400d9e:	460e      	mov	r6, r1
  400da0:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400da2:	b19a      	cbz	r2, 400dcc <_write+0x38>
  400da4:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400da6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400de0 <_write+0x4c>
  400daa:	4f0c      	ldr	r7, [pc, #48]	; (400ddc <_write+0x48>)
  400dac:	f8d8 0000 	ldr.w	r0, [r8]
  400db0:	f815 1b01 	ldrb.w	r1, [r5], #1
  400db4:	683b      	ldr	r3, [r7, #0]
  400db6:	4798      	blx	r3
  400db8:	2800      	cmp	r0, #0
  400dba:	db0a      	blt.n	400dd2 <_write+0x3e>
  400dbc:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400dbe:	3c01      	subs	r4, #1
  400dc0:	d1f4      	bne.n	400dac <_write+0x18>
  400dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400dc6:	f04f 30ff 	mov.w	r0, #4294967295
  400dca:	4770      	bx	lr
	for (; len != 0; --len) {
  400dcc:	4610      	mov	r0, r2
  400dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400dd2:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400dda:	bf00      	nop
  400ddc:	2040c9fc 	.word	0x2040c9fc
  400de0:	2040ca00 	.word	0x2040ca00

00400de4 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400de8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400dec:	4b9e      	ldr	r3, [pc, #632]	; (401068 <board_init+0x284>)
  400dee:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  400df0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400df4:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400df8:	4b9c      	ldr	r3, [pc, #624]	; (40106c <board_init+0x288>)
  400dfa:	2200      	movs	r2, #0
  400dfc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400e00:	695a      	ldr	r2, [r3, #20]
  400e02:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400e06:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400e08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400e0c:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400e10:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400e14:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400e18:	f007 0007 	and.w	r0, r7, #7
  400e1c:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400e1e:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400e22:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400e26:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400e2a:	f3bf 8f4f 	dsb	sy
  400e2e:	f04f 34ff 	mov.w	r4, #4294967295
  400e32:	fa04 fc00 	lsl.w	ip, r4, r0
  400e36:	fa06 f000 	lsl.w	r0, r6, r0
  400e3a:	fa04 f40e 	lsl.w	r4, r4, lr
  400e3e:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400e42:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400e44:	463a      	mov	r2, r7
  400e46:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400e48:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400e4c:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400e50:	3a01      	subs	r2, #1
  400e52:	4423      	add	r3, r4
  400e54:	f1b2 3fff 	cmp.w	r2, #4294967295
  400e58:	d1f6      	bne.n	400e48 <board_init+0x64>
        } while(sets--);
  400e5a:	3e01      	subs	r6, #1
  400e5c:	4460      	add	r0, ip
  400e5e:	f1b6 3fff 	cmp.w	r6, #4294967295
  400e62:	d1ef      	bne.n	400e44 <board_init+0x60>
  400e64:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400e68:	4b80      	ldr	r3, [pc, #512]	; (40106c <board_init+0x288>)
  400e6a:	695a      	ldr	r2, [r3, #20]
  400e6c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400e70:	615a      	str	r2, [r3, #20]
  400e72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400e76:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400e7a:	4a7d      	ldr	r2, [pc, #500]	; (401070 <board_init+0x28c>)
  400e7c:	497d      	ldr	r1, [pc, #500]	; (401074 <board_init+0x290>)
  400e7e:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400e80:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400e84:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400e86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400e8a:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400e8e:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400e92:	f022 0201 	bic.w	r2, r2, #1
  400e96:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400e9a:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400e9e:	f022 0201 	bic.w	r2, r2, #1
  400ea2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400ea6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400eaa:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400eae:	200a      	movs	r0, #10
  400eb0:	4c71      	ldr	r4, [pc, #452]	; (401078 <board_init+0x294>)
  400eb2:	47a0      	blx	r4
  400eb4:	200b      	movs	r0, #11
  400eb6:	47a0      	blx	r4
  400eb8:	200c      	movs	r0, #12
  400eba:	47a0      	blx	r4
  400ebc:	2010      	movs	r0, #16
  400ebe:	47a0      	blx	r4
  400ec0:	2011      	movs	r0, #17
  400ec2:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400ec4:	4e6d      	ldr	r6, [pc, #436]	; (40107c <board_init+0x298>)
  400ec6:	f44f 7880 	mov.w	r8, #256	; 0x100
  400eca:	f8c6 8010 	str.w	r8, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400ece:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400ed2:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400ed6:	4c6a      	ldr	r4, [pc, #424]	; (401080 <board_init+0x29c>)
  400ed8:	f44f 6500 	mov.w	r5, #2048	; 0x800
  400edc:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400ede:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  400ee2:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400ee4:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400ee8:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  400eea:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  400eec:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400ef0:	6f23      	ldr	r3, [r4, #112]	; 0x70
  400ef2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  400ef6:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400ef8:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400efa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  400efe:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400f00:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400f04:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400f08:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400f0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  400f10:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400f12:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400f16:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400f18:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400f1a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400f1e:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400f20:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400f24:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400f26:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400f28:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400f2c:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400f2e:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400f30:	4a54      	ldr	r2, [pc, #336]	; (401084 <board_init+0x2a0>)
  400f32:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400f36:	f043 0310 	orr.w	r3, r3, #16
  400f3a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400f3e:	f502 22b2 	add.w	r2, r2, #364544	; 0x59000
  400f42:	2310      	movs	r3, #16
  400f44:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400f46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400f4a:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400f4c:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400f4e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400f52:	6f11      	ldr	r1, [r2, #112]	; 0x70
  400f54:	4319      	orrs	r1, r3
  400f56:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400f58:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400f5a:	4319      	orrs	r1, r3
  400f5c:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400f5e:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  400f60:	2208      	movs	r2, #8
  400f62:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400f64:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400f68:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400f6a:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400f6c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400f70:	6f21      	ldr	r1, [r4, #112]	; 0x70
  400f72:	f021 0108 	bic.w	r1, r1, #8
  400f76:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400f78:	6f61      	ldr	r1, [r4, #116]	; 0x74
  400f7a:	f021 0108 	bic.w	r1, r1, #8
  400f7e:	6761      	str	r1, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400f80:	6062      	str	r2, [r4, #4]
		base->PIO_PUDR = mask;
  400f82:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400f84:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400f88:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400f8a:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400f8c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400f90:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400f92:	f022 0210 	bic.w	r2, r2, #16
  400f96:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400f98:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400f9a:	f022 0210 	bic.w	r2, r2, #16
  400f9e:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400fa0:	6063      	str	r3, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  400fa2:	2300      	movs	r3, #0
  400fa4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400fa8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400fac:	4630      	mov	r0, r6
  400fae:	4f36      	ldr	r7, [pc, #216]	; (401088 <board_init+0x2a4>)
  400fb0:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  400fb2:	2300      	movs	r3, #0
  400fb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400fb8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400fbc:	4630      	mov	r0, r6
  400fbe:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  400fc0:	2301      	movs	r3, #1
  400fc2:	22ff      	movs	r2, #255	; 0xff
  400fc4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400fc8:	4630      	mov	r0, r6
  400fca:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  400fcc:	2301      	movs	r3, #1
  400fce:	223f      	movs	r2, #63	; 0x3f
  400fd0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400fd4:	482d      	ldr	r0, [pc, #180]	; (40108c <board_init+0x2a8>)
  400fd6:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  400fd8:	2301      	movs	r3, #1
  400fda:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  400fde:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400fe2:	4620      	mov	r0, r4
  400fe4:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  400fe6:	2301      	movs	r3, #1
  400fe8:	4642      	mov	r2, r8
  400fea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400fee:	4630      	mov	r0, r6
  400ff0:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  400ff2:	2301      	movs	r3, #1
  400ff4:	462a      	mov	r2, r5
  400ff6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ffa:	4630      	mov	r0, r6
  400ffc:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  400ffe:	2301      	movs	r3, #1
  401000:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401004:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401008:	4821      	ldr	r0, [pc, #132]	; (401090 <board_init+0x2ac>)
  40100a:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  40100c:	2300      	movs	r3, #0
  40100e:	f44f 7200 	mov.w	r2, #512	; 0x200
  401012:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401016:	4630      	mov	r0, r6
  401018:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  40101a:	f44f 7100 	mov.w	r1, #512	; 0x200
  40101e:	4630      	mov	r0, r6
  401020:	4b1c      	ldr	r3, [pc, #112]	; (401094 <board_init+0x2b0>)
  401022:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on SPI*/
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  401024:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401028:	2074      	movs	r0, #116	; 0x74
  40102a:	4c1b      	ldr	r4, [pc, #108]	; (401098 <board_init+0x2b4>)
  40102c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  40102e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401032:	2075      	movs	r0, #117	; 0x75
  401034:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  401036:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40103a:	2076      	movs	r0, #118	; 0x76
  40103c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  40103e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401042:	207b      	movs	r0, #123	; 0x7b
  401044:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  401046:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40104a:	2018      	movs	r0, #24
  40104c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  40104e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401052:	2006      	movs	r0, #6
  401054:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
  401056:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40105a:	2053      	movs	r0, #83	; 0x53
  40105c:	47a0      	blx	r4
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);
  40105e:	2053      	movs	r0, #83	; 0x53
  401060:	4b0e      	ldr	r3, [pc, #56]	; (40109c <board_init+0x2b8>)
  401062:	4798      	blx	r3
  401064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401068:	400e1850 	.word	0x400e1850
  40106c:	e000ed00 	.word	0xe000ed00
  401070:	400e0c00 	.word	0x400e0c00
  401074:	5a00080c 	.word	0x5a00080c
  401078:	00401b3d 	.word	0x00401b3d
  40107c:	400e1200 	.word	0x400e1200
  401080:	400e0e00 	.word	0x400e0e00
  401084:	40088000 	.word	0x40088000
  401088:	00401769 	.word	0x00401769
  40108c:	400e1600 	.word	0x400e1600
  401090:	400e1400 	.word	0x400e1400
  401094:	00401675 	.word	0x00401675
  401098:	00401839 	.word	0x00401839
  40109c:	00401801 	.word	0x00401801

004010a0 <ili9488_check_box_coordinates>:
 * \param p_ul_x2 X coordinate of lower-right corner on LCD.
 * \param p_ul_y2 Y coordinate of lower-right corner on LCD.
 */
static void ili9488_check_box_coordinates(uint32_t *p_ul_x1, uint32_t *p_ul_y1,
		uint32_t *p_ul_x2, uint32_t *p_ul_y2)
{
  4010a0:	b430      	push	{r4, r5}
	uint32_t dw;

	if (*p_ul_x1 >= ILI9488_LCD_WIDTH) {
  4010a2:	6804      	ldr	r4, [r0, #0]
  4010a4:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  4010a8:	d302      	bcc.n	4010b0 <ili9488_check_box_coordinates+0x10>
		*p_ul_x1 = ILI9488_LCD_WIDTH - 1;
  4010aa:	f240 14df 	movw	r4, #479	; 0x1df
  4010ae:	6004      	str	r4, [r0, #0]
	}

	if (*p_ul_x2 >= ILI9488_LCD_WIDTH) {
  4010b0:	6814      	ldr	r4, [r2, #0]
  4010b2:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  4010b6:	d302      	bcc.n	4010be <ili9488_check_box_coordinates+0x1e>
		*p_ul_x2 = ILI9488_LCD_WIDTH - 1;
  4010b8:	f240 14df 	movw	r4, #479	; 0x1df
  4010bc:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 >= ILI9488_LCD_HEIGHT) {
  4010be:	680c      	ldr	r4, [r1, #0]
  4010c0:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  4010c4:	d302      	bcc.n	4010cc <ili9488_check_box_coordinates+0x2c>
		*p_ul_y1 = ILI9488_LCD_HEIGHT - 1;
  4010c6:	f240 143f 	movw	r4, #319	; 0x13f
  4010ca:	600c      	str	r4, [r1, #0]
	}

	if (*p_ul_y2 >= ILI9488_LCD_HEIGHT) {
  4010cc:	681c      	ldr	r4, [r3, #0]
  4010ce:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  4010d2:	d302      	bcc.n	4010da <ili9488_check_box_coordinates+0x3a>
		*p_ul_y2 = ILI9488_LCD_HEIGHT - 1;
  4010d4:	f240 143f 	movw	r4, #319	; 0x13f
  4010d8:	601c      	str	r4, [r3, #0]
	}

	if (*p_ul_x1 > *p_ul_x2) {
  4010da:	6804      	ldr	r4, [r0, #0]
  4010dc:	6815      	ldr	r5, [r2, #0]
  4010de:	42ac      	cmp	r4, r5
  4010e0:	d901      	bls.n	4010e6 <ili9488_check_box_coordinates+0x46>
		dw = *p_ul_x1;
		*p_ul_x1 = *p_ul_x2;
  4010e2:	6005      	str	r5, [r0, #0]
		*p_ul_x2 = dw;
  4010e4:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 > *p_ul_y2) {
  4010e6:	680a      	ldr	r2, [r1, #0]
  4010e8:	6818      	ldr	r0, [r3, #0]
  4010ea:	4282      	cmp	r2, r0
  4010ec:	d901      	bls.n	4010f2 <ili9488_check_box_coordinates+0x52>
		dw = *p_ul_y1;
		*p_ul_y1 = *p_ul_y2;
  4010ee:	6008      	str	r0, [r1, #0]
		*p_ul_y2 = dw;
  4010f0:	601a      	str	r2, [r3, #0]
	}
}
  4010f2:	bc30      	pop	{r4, r5}
  4010f4:	4770      	bx	lr
	...

004010f8 <ili9488_write_ram_prepare>:
{
  4010f8:	b510      	push	{r4, lr}
  4010fa:	b082      	sub	sp, #8
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  4010fc:	2006      	movs	r0, #6
  4010fe:	4b0a      	ldr	r3, [pc, #40]	; (401128 <ili9488_write_ram_prepare+0x30>)
  401100:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, ILI9488_CMD_MEMORY_WRITE, BOARD_ILI9488_SPI_NPCS, 0);
  401102:	2300      	movs	r3, #0
  401104:	2203      	movs	r2, #3
  401106:	212c      	movs	r1, #44	; 0x2c
  401108:	4808      	ldr	r0, [pc, #32]	; (40112c <ili9488_write_ram_prepare+0x34>)
  40110a:	4c09      	ldr	r4, [pc, #36]	; (401130 <ili9488_write_ram_prepare+0x38>)
  40110c:	47a0      	blx	r4
	for(i = 0; i < 0xFF; i++);
  40110e:	2300      	movs	r3, #0
  401110:	9301      	str	r3, [sp, #4]
  401112:	9b01      	ldr	r3, [sp, #4]
  401114:	2bfe      	cmp	r3, #254	; 0xfe
  401116:	d805      	bhi.n	401124 <ili9488_write_ram_prepare+0x2c>
  401118:	9b01      	ldr	r3, [sp, #4]
  40111a:	3301      	adds	r3, #1
  40111c:	9301      	str	r3, [sp, #4]
  40111e:	9b01      	ldr	r3, [sp, #4]
  401120:	2bfe      	cmp	r3, #254	; 0xfe
  401122:	d9f9      	bls.n	401118 <ili9488_write_ram_prepare+0x20>
}
  401124:	b002      	add	sp, #8
  401126:	bd10      	pop	{r4, pc}
  401128:	0040181d 	.word	0x0040181d
  40112c:	40008000 	.word	0x40008000
  401130:	00401bb1 	.word	0x00401bb1

00401134 <ili9488_write_register>:
{
  401134:	b570      	push	{r4, r5, r6, lr}
  401136:	b082      	sub	sp, #8
  401138:	4605      	mov	r5, r0
  40113a:	460e      	mov	r6, r1
  40113c:	4614      	mov	r4, r2
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  40113e:	2006      	movs	r0, #6
  401140:	4b14      	ldr	r3, [pc, #80]	; (401194 <ili9488_write_register+0x60>)
  401142:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, uc_reg, BOARD_ILI9488_SPI_NPCS, 0);
  401144:	2300      	movs	r3, #0
  401146:	2203      	movs	r2, #3
  401148:	4629      	mov	r1, r5
  40114a:	4813      	ldr	r0, [pc, #76]	; (401198 <ili9488_write_register+0x64>)
  40114c:	4d13      	ldr	r5, [pc, #76]	; (40119c <ili9488_write_register+0x68>)
  40114e:	47a8      	blx	r5
	for(i = 0; i < 0xFF; i++);
  401150:	2300      	movs	r3, #0
  401152:	9301      	str	r3, [sp, #4]
  401154:	9b01      	ldr	r3, [sp, #4]
  401156:	2bfe      	cmp	r3, #254	; 0xfe
  401158:	d805      	bhi.n	401166 <ili9488_write_register+0x32>
  40115a:	9b01      	ldr	r3, [sp, #4]
  40115c:	3301      	adds	r3, #1
  40115e:	9301      	str	r3, [sp, #4]
  401160:	9b01      	ldr	r3, [sp, #4]
  401162:	2bfe      	cmp	r3, #254	; 0xfe
  401164:	d9f9      	bls.n	40115a <ili9488_write_register+0x26>
	if(size > 0) {
  401166:	b90c      	cbnz	r4, 40116c <ili9488_write_register+0x38>
}
  401168:	b002      	add	sp, #8
  40116a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_pin_high(LCD_SPI_CDS_PIO);
  40116c:	2006      	movs	r0, #6
  40116e:	4b0c      	ldr	r3, [pc, #48]	; (4011a0 <ili9488_write_register+0x6c>)
  401170:	4798      	blx	r3
		spi_write_packet(BOARD_ILI9488_SPI, us_data, size);
  401172:	4622      	mov	r2, r4
  401174:	4631      	mov	r1, r6
  401176:	4808      	ldr	r0, [pc, #32]	; (401198 <ili9488_write_register+0x64>)
  401178:	4b0a      	ldr	r3, [pc, #40]	; (4011a4 <ili9488_write_register+0x70>)
  40117a:	4798      	blx	r3
		for(i = 0; i < 0x5F; i++);
  40117c:	2300      	movs	r3, #0
  40117e:	9301      	str	r3, [sp, #4]
  401180:	9b01      	ldr	r3, [sp, #4]
  401182:	2b5e      	cmp	r3, #94	; 0x5e
  401184:	d8f0      	bhi.n	401168 <ili9488_write_register+0x34>
  401186:	9b01      	ldr	r3, [sp, #4]
  401188:	3301      	adds	r3, #1
  40118a:	9301      	str	r3, [sp, #4]
  40118c:	9b01      	ldr	r3, [sp, #4]
  40118e:	2b5e      	cmp	r3, #94	; 0x5e
  401190:	d9f9      	bls.n	401186 <ili9488_write_register+0x52>
  401192:	e7e9      	b.n	401168 <ili9488_write_register+0x34>
  401194:	0040181d 	.word	0x0040181d
  401198:	40008000 	.word	0x40008000
  40119c:	00401bb1 	.word	0x00401bb1
  4011a0:	00401801 	.word	0x00401801
  4011a4:	00400ccd 	.word	0x00400ccd

004011a8 <ili9488_write_ram_buffer>:
{
  4011a8:	b530      	push	{r4, r5, lr}
  4011aa:	b083      	sub	sp, #12
  4011ac:	4604      	mov	r4, r0
  4011ae:	460d      	mov	r5, r1
	pio_set_pin_high(LCD_SPI_CDS_PIO);
  4011b0:	2006      	movs	r0, #6
  4011b2:	4b0a      	ldr	r3, [pc, #40]	; (4011dc <ili9488_write_ram_buffer+0x34>)
  4011b4:	4798      	blx	r3
	spi_write_packet(BOARD_ILI9488_SPI, p_ul_buf, ul_size);
  4011b6:	462a      	mov	r2, r5
  4011b8:	4621      	mov	r1, r4
  4011ba:	4809      	ldr	r0, [pc, #36]	; (4011e0 <ili9488_write_ram_buffer+0x38>)
  4011bc:	4b09      	ldr	r3, [pc, #36]	; (4011e4 <ili9488_write_ram_buffer+0x3c>)
  4011be:	4798      	blx	r3
	for(i = 0; i < 0xFF; i++);
  4011c0:	2300      	movs	r3, #0
  4011c2:	9301      	str	r3, [sp, #4]
  4011c4:	9b01      	ldr	r3, [sp, #4]
  4011c6:	2bfe      	cmp	r3, #254	; 0xfe
  4011c8:	d805      	bhi.n	4011d6 <ili9488_write_ram_buffer+0x2e>
  4011ca:	9b01      	ldr	r3, [sp, #4]
  4011cc:	3301      	adds	r3, #1
  4011ce:	9301      	str	r3, [sp, #4]
  4011d0:	9b01      	ldr	r3, [sp, #4]
  4011d2:	2bfe      	cmp	r3, #254	; 0xfe
  4011d4:	d9f9      	bls.n	4011ca <ili9488_write_ram_buffer+0x22>
}
  4011d6:	b003      	add	sp, #12
  4011d8:	bd30      	pop	{r4, r5, pc}
  4011da:	bf00      	nop
  4011dc:	00401801 	.word	0x00401801
  4011e0:	40008000 	.word	0x40008000
  4011e4:	00400ccd 	.word	0x00400ccd

004011e8 <ili9488_delay>:
	for(i = 0; i < ul_ms; i++) {
  4011e8:	4601      	mov	r1, r0
  4011ea:	b130      	cbz	r0, 4011fa <ili9488_delay+0x12>
  4011ec:	4a03      	ldr	r2, [pc, #12]	; (4011fc <ili9488_delay+0x14>)
{
  4011ee:	4b04      	ldr	r3, [pc, #16]	; (401200 <ili9488_delay+0x18>)
		for(i = 0; i < 100000; i++) {
  4011f0:	3b01      	subs	r3, #1
  4011f2:	d1fd      	bne.n	4011f0 <ili9488_delay+0x8>
	for(i = 0; i < ul_ms; i++) {
  4011f4:	4291      	cmp	r1, r2
  4011f6:	d8fa      	bhi.n	4011ee <ili9488_delay+0x6>
  4011f8:	4770      	bx	lr
  4011fa:	4770      	bx	lr
  4011fc:	000186a1 	.word	0x000186a1
  401200:	000186a0 	.word	0x000186a0

00401204 <ili9488_set_display_direction>:
 * \brief ILI9488 configure landscape.
 *
 * \Param LandscaprMode Landscape Mode.
 */
void ili9488_set_display_direction(enum ili9488_display_direction direction )
{
  401204:	b500      	push	{lr}
  401206:	b083      	sub	sp, #12
	ili9488_color_t value;
	if(direction) {
  401208:	b958      	cbnz	r0, 401222 <ili9488_set_display_direction+0x1e>
		value = 0xE8;
	} else {
		value = 0x48;
  40120a:	2348      	movs	r3, #72	; 0x48
  40120c:	f88d 3007 	strb.w	r3, [sp, #7]
	}
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &value, 1);
  401210:	2201      	movs	r2, #1
  401212:	f10d 0107 	add.w	r1, sp, #7
  401216:	2036      	movs	r0, #54	; 0x36
  401218:	4b04      	ldr	r3, [pc, #16]	; (40122c <ili9488_set_display_direction+0x28>)
  40121a:	4798      	blx	r3
}
  40121c:	b003      	add	sp, #12
  40121e:	f85d fb04 	ldr.w	pc, [sp], #4
		value = 0xE8;
  401222:	23e8      	movs	r3, #232	; 0xe8
  401224:	f88d 3007 	strb.w	r3, [sp, #7]
  401228:	e7f2      	b.n	401210 <ili9488_set_display_direction+0xc>
  40122a:	bf00      	nop
  40122c:	00401135 	.word	0x00401135

00401230 <ili9488_set_window>:
 * \Param y start position.
 * \Param width  Width of window.
 * \Param height Height of window.
 */
void ili9488_set_window(uint16_t x, uint16_t y, uint16_t width, uint16_t height )
{
  401230:	b510      	push	{r4, lr}
  401232:	b084      	sub	sp, #16
	uint32_t cnt = 0;
	ili9488_color_t buf[4];

	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	col_start  =  x ;
  401234:	f8ad 000e 	strh.w	r0, [sp, #14]
	col_end    =  width + x - 1;
  401238:	3a01      	subs	r2, #1
  40123a:	4402      	add	r2, r0
  40123c:	f8ad 200c 	strh.w	r2, [sp, #12]

	row_start = y ;
  401240:	f8ad 100a 	strh.w	r1, [sp, #10]
	row_end   = height + y - 1;
  401244:	3b01      	subs	r3, #1
  401246:	4419      	add	r1, r3
  401248:	f8ad 1008 	strh.w	r1, [sp, #8]

	buf[0] = get_8b_to_16b(col_start);
  40124c:	0a03      	lsrs	r3, r0, #8
  40124e:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(col_start);
  401252:	f88d 0005 	strb.w	r0, [sp, #5]
	buf[2] = get_8b_to_16b(col_end);
  401256:	f3c2 2307 	ubfx	r3, r2, #8, #8
  40125a:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(col_end);
  40125e:	f88d 2007 	strb.w	r2, [sp, #7]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  401262:	2204      	movs	r2, #4
  401264:	eb0d 0102 	add.w	r1, sp, r2
  401268:	202a      	movs	r0, #42	; 0x2a
  40126a:	4c10      	ldr	r4, [pc, #64]	; (4012ac <ili9488_set_window+0x7c>)
  40126c:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  40126e:	2200      	movs	r2, #0
  401270:	4611      	mov	r1, r2
  401272:	4610      	mov	r0, r2
  401274:	47a0      	blx	r4

	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(row_start);
  401276:	f89d 300b 	ldrb.w	r3, [sp, #11]
  40127a:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(row_start);
  40127e:	f89d 300a 	ldrb.w	r3, [sp, #10]
  401282:	f88d 3005 	strb.w	r3, [sp, #5]
	buf[2] = get_8b_to_16b(row_end);
  401286:	f89d 3009 	ldrb.w	r3, [sp, #9]
  40128a:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(row_end);
  40128e:	f89d 3008 	ldrb.w	r3, [sp, #8]
  401292:	f88d 3007 	strb.w	r3, [sp, #7]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  401296:	2204      	movs	r2, #4
  401298:	eb0d 0102 	add.w	r1, sp, r2
  40129c:	202b      	movs	r0, #43	; 0x2b
  40129e:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  4012a0:	2200      	movs	r2, #0
  4012a2:	4611      	mov	r1, r2
  4012a4:	4610      	mov	r0, r2
  4012a6:	47a0      	blx	r4
}
  4012a8:	b004      	add	sp, #16
  4012aa:	bd10      	pop	{r4, pc}
  4012ac:	00401135 	.word	0x00401135

004012b0 <ili9488_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9488_display_on(void)
{
  4012b0:	b508      	push	{r3, lr}
	ili9488_write_register(ILI9488_CMD_DISPLAY_ON, 0, 0);
  4012b2:	2200      	movs	r2, #0
  4012b4:	4611      	mov	r1, r2
  4012b6:	2029      	movs	r0, #41	; 0x29
  4012b8:	4b01      	ldr	r3, [pc, #4]	; (4012c0 <ili9488_display_on+0x10>)
  4012ba:	4798      	blx	r3
  4012bc:	bd08      	pop	{r3, pc}
  4012be:	bf00      	nop
  4012c0:	00401135 	.word	0x00401135

004012c4 <ili9488_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9488_set_foreground_color(uint32_t ul_color)
{
  4012c4:	b410      	push	{r4}
		g_ul_pixel_cache[i] = ul_color;
	}
#endif
#ifdef ILI9488_SPIMODE
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
		g_ul_pixel_cache[i++] = ul_color>>16;
  4012c6:	f3c0 4407 	ubfx	r4, r0, #16, #8
		g_ul_pixel_cache[i++] = ul_color>>8;
  4012ca:	f3c0 2107 	ubfx	r1, r0, #8, #8
  4012ce:	4b06      	ldr	r3, [pc, #24]	; (4012e8 <ili9488_set_foreground_color+0x24>)
  4012d0:	f503 62b4 	add.w	r2, r3, #1440	; 0x5a0
		g_ul_pixel_cache[i++] = ul_color>>16;
  4012d4:	701c      	strb	r4, [r3, #0]
		g_ul_pixel_cache[i++] = ul_color>>8;
  4012d6:	7059      	strb	r1, [r3, #1]
		g_ul_pixel_cache[i++] = ul_color&0xFF;
  4012d8:	7098      	strb	r0, [r3, #2]
  4012da:	3303      	adds	r3, #3
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
  4012dc:	4293      	cmp	r3, r2
  4012de:	d1f9      	bne.n	4012d4 <ili9488_set_foreground_color+0x10>
	}
#endif
}
  4012e0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4012e4:	4770      	bx	lr
  4012e6:	bf00      	nop
  4012e8:	204009dc 	.word	0x204009dc

004012ec <ili9488_set_cursor_position>:
 *
 * \param x X coordinate of upper-left corner on LCD.
 * \param y Y coordinate of upper-left corner on LCD.
 */
void ili9488_set_cursor_position(uint16_t x, uint16_t y)
{
  4012ec:	b510      	push	{r4, lr}
  4012ee:	b084      	sub	sp, #16
  4012f0:	f8ad 0006 	strh.w	r0, [sp, #6]
  4012f4:	f8ad 1004 	strh.w	r1, [sp, #4]
	uint32_t cnt = 0;

	ili9488_color_t buf[4];
	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	buf[0] = get_8b_to_16b(x);
  4012f8:	0a03      	lsrs	r3, r0, #8
  4012fa:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[1] = get_0b_to_8b(x);
  4012fe:	b2c0      	uxtb	r0, r0
  401300:	f88d 000d 	strb.w	r0, [sp, #13]
	buf[2] = get_8b_to_16b(x);
  401304:	f88d 300e 	strb.w	r3, [sp, #14]
	buf[3] = get_0b_to_8b(x);
  401308:	f88d 000f 	strb.w	r0, [sp, #15]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  40130c:	2204      	movs	r2, #4
  40130e:	a903      	add	r1, sp, #12
  401310:	202a      	movs	r0, #42	; 0x2a
  401312:	4c0e      	ldr	r4, [pc, #56]	; (40134c <ili9488_set_cursor_position+0x60>)
  401314:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  401316:	2200      	movs	r2, #0
  401318:	4611      	mov	r1, r2
  40131a:	4610      	mov	r0, r2
  40131c:	47a0      	blx	r4


	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(y);
  40131e:	f89d 2005 	ldrb.w	r2, [sp, #5]
  401322:	f88d 200c 	strb.w	r2, [sp, #12]
	buf[1] = get_0b_to_8b(y);
  401326:	f89d 3004 	ldrb.w	r3, [sp, #4]
  40132a:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[2] = get_8b_to_16b(y);
  40132e:	f88d 200e 	strb.w	r2, [sp, #14]
	buf[3] = get_0b_to_8b(y);
  401332:	f88d 300f 	strb.w	r3, [sp, #15]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  401336:	2204      	movs	r2, #4
  401338:	a903      	add	r1, sp, #12
  40133a:	202b      	movs	r0, #43	; 0x2b
  40133c:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  40133e:	2200      	movs	r2, #0
  401340:	4611      	mov	r1, r2
  401342:	4610      	mov	r0, r2
  401344:	47a0      	blx	r4
}
  401346:	b004      	add	sp, #16
  401348:	bd10      	pop	{r4, pc}
  40134a:	bf00      	nop
  40134c:	00401135 	.word	0x00401135

00401350 <ili9488_init>:
{
  401350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401354:	b087      	sub	sp, #28
  401356:	4681      	mov	r9, r0
	struct spi_device ILI9488_SPI_DEVICE = {
  401358:	2703      	movs	r7, #3
  40135a:	ae06      	add	r6, sp, #24
  40135c:	f846 7d08 	str.w	r7, [r6, #-8]!
	spi_master_init(BOARD_ILI9488_SPI);
  401360:	4d5d      	ldr	r5, [pc, #372]	; (4014d8 <ili9488_init+0x188>)
  401362:	4628      	mov	r0, r5
  401364:	4b5d      	ldr	r3, [pc, #372]	; (4014dc <ili9488_init+0x18c>)
  401366:	4798      	blx	r3
	spi_master_setup_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE, SPI_MODE_3, ILI9488_SPI_BAUDRATE, 0);
  401368:	2400      	movs	r4, #0
  40136a:	9400      	str	r4, [sp, #0]
  40136c:	4b5c      	ldr	r3, [pc, #368]	; (4014e0 <ili9488_init+0x190>)
  40136e:	463a      	mov	r2, r7
  401370:	4631      	mov	r1, r6
  401372:	4628      	mov	r0, r5
  401374:	f8df 8198 	ldr.w	r8, [pc, #408]	; 401510 <ili9488_init+0x1c0>
  401378:	47c0      	blx	r8
	spi_configure_cs_behavior(BOARD_ILI9488_SPI, BOARD_ILI9488_SPI_NPCS, SPI_CS_RISE_NO_TX);
  40137a:	4622      	mov	r2, r4
  40137c:	4639      	mov	r1, r7
  40137e:	4628      	mov	r0, r5
  401380:	4b58      	ldr	r3, [pc, #352]	; (4014e4 <ili9488_init+0x194>)
  401382:	4798      	blx	r3
	spi_select_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE);
  401384:	4631      	mov	r1, r6
  401386:	4628      	mov	r0, r5
  401388:	4b57      	ldr	r3, [pc, #348]	; (4014e8 <ili9488_init+0x198>)
  40138a:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  40138c:	2001      	movs	r0, #1
  40138e:	6028      	str	r0, [r5, #0]
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
	p_spi->SPI_IER = ul_sources;
  401390:	6168      	str	r0, [r5, #20]
	ili9488_write_register(ILI9488_CMD_SOFTWARE_RESET, 0x0000, 0);
  401392:	4622      	mov	r2, r4
  401394:	4621      	mov	r1, r4
  401396:	4e55      	ldr	r6, [pc, #340]	; (4014ec <ili9488_init+0x19c>)
  401398:	47b0      	blx	r6
	ili9488_delay(200);
  40139a:	20c8      	movs	r0, #200	; 0xc8
  40139c:	4d54      	ldr	r5, [pc, #336]	; (4014f0 <ili9488_init+0x1a0>)
  40139e:	47a8      	blx	r5
	ili9488_write_register(ILI9488_CMD_SLEEP_OUT, 0x0000, 0);
  4013a0:	4622      	mov	r2, r4
  4013a2:	4621      	mov	r1, r4
  4013a4:	2011      	movs	r0, #17
  4013a6:	47b0      	blx	r6
	ili9488_delay(200);
  4013a8:	20c8      	movs	r0, #200	; 0xc8
  4013aa:	47a8      	blx	r5
	reg = 0x81;
  4013ac:	2381      	movs	r3, #129	; 0x81
  4013ae:	f88d 300a 	strb.w	r3, [sp, #10]
	param = 0x0;
  4013b2:	f88d 400b 	strb.w	r4, [sp, #11]
  4013b6:	2610      	movs	r6, #16
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  4013b8:	f04f 0801 	mov.w	r8, #1
  4013bc:	4f4b      	ldr	r7, [pc, #300]	; (4014ec <ili9488_init+0x19c>)
		for(j = 0; j < 0xFF; j++);
  4013be:	4625      	mov	r5, r4
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  4013c0:	4642      	mov	r2, r8
  4013c2:	f10d 010a 	add.w	r1, sp, #10
  4013c6:	20fb      	movs	r0, #251	; 0xfb
  4013c8:	47b8      	blx	r7
		reg++;
  4013ca:	f89d 300a 	ldrb.w	r3, [sp, #10]
  4013ce:	3301      	adds	r3, #1
  4013d0:	f88d 300a 	strb.w	r3, [sp, #10]
		for(j = 0; j < 0xFF; j++);
  4013d4:	9503      	str	r5, [sp, #12]
  4013d6:	9b03      	ldr	r3, [sp, #12]
  4013d8:	2bfe      	cmp	r3, #254	; 0xfe
  4013da:	d805      	bhi.n	4013e8 <ili9488_init+0x98>
  4013dc:	9b03      	ldr	r3, [sp, #12]
  4013de:	3301      	adds	r3, #1
  4013e0:	9303      	str	r3, [sp, #12]
  4013e2:	9b03      	ldr	r3, [sp, #12]
  4013e4:	2bfe      	cmp	r3, #254	; 0xfe
  4013e6:	d9f9      	bls.n	4013dc <ili9488_init+0x8c>
		ili9488_write_register(ILI9488_CMD_READ_ID4, 0, 0);
  4013e8:	462a      	mov	r2, r5
  4013ea:	4629      	mov	r1, r5
  4013ec:	20d3      	movs	r0, #211	; 0xd3
  4013ee:	47b8      	blx	r7
			pio_set_pin_high(LCD_SPI_CDS_PIO);
  4013f0:	2006      	movs	r0, #6
  4013f2:	4b40      	ldr	r3, [pc, #256]	; (4014f4 <ili9488_init+0x1a4>)
  4013f4:	4798      	blx	r3
			spi_read_packet(BOARD_ILI9488_SPI, &chipidBuf, 1);
  4013f6:	4642      	mov	r2, r8
  4013f8:	f10d 0109 	add.w	r1, sp, #9
  4013fc:	4836      	ldr	r0, [pc, #216]	; (4014d8 <ili9488_init+0x188>)
  4013fe:	4b3e      	ldr	r3, [pc, #248]	; (4014f8 <ili9488_init+0x1a8>)
  401400:	4798      	blx	r3
			for(j = 0; j < 0xFF; j++);
  401402:	9503      	str	r5, [sp, #12]
  401404:	9b03      	ldr	r3, [sp, #12]
  401406:	2bfe      	cmp	r3, #254	; 0xfe
  401408:	d805      	bhi.n	401416 <ili9488_init+0xc6>
  40140a:	9b03      	ldr	r3, [sp, #12]
  40140c:	3301      	adds	r3, #1
  40140e:	9303      	str	r3, [sp, #12]
  401410:	9b03      	ldr	r3, [sp, #12]
  401412:	2bfe      	cmp	r3, #254	; 0xfe
  401414:	d9f9      	bls.n	40140a <ili9488_init+0xba>
		chipid |= (chipidBuf & 0xFF) << ((i - 1) << 3);
  401416:	f89d 3009 	ldrb.w	r3, [sp, #9]
  40141a:	40b3      	lsls	r3, r6
  40141c:	431c      	orrs	r4, r3
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &param, 1);
  40141e:	4642      	mov	r2, r8
  401420:	f10d 010b 	add.w	r1, sp, #11
  401424:	20fb      	movs	r0, #251	; 0xfb
  401426:	47b8      	blx	r7
		for(j = 0; j < 0xFFF; j++);
  401428:	9503      	str	r5, [sp, #12]
  40142a:	9a03      	ldr	r2, [sp, #12]
  40142c:	f640 73fe 	movw	r3, #4094	; 0xffe
  401430:	429a      	cmp	r2, r3
  401432:	d806      	bhi.n	401442 <ili9488_init+0xf2>
  401434:	461a      	mov	r2, r3
  401436:	9b03      	ldr	r3, [sp, #12]
  401438:	3301      	adds	r3, #1
  40143a:	9303      	str	r3, [sp, #12]
  40143c:	9b03      	ldr	r3, [sp, #12]
  40143e:	4293      	cmp	r3, r2
  401440:	d9f9      	bls.n	401436 <ili9488_init+0xe6>
  401442:	3e08      	subs	r6, #8
	for (i = 3; i > 0; i--) {
  401444:	f116 0f08 	cmn.w	r6, #8
  401448:	d1ba      	bne.n	4013c0 <ili9488_init+0x70>
	if (chipid != ILI9488_DEVICE_CODE) {
  40144a:	f249 4388 	movw	r3, #38024	; 0x9488
  40144e:	429c      	cmp	r4, r3
  401450:	d003      	beq.n	40145a <ili9488_init+0x10a>
		return 1;
  401452:	2001      	movs	r0, #1
}
  401454:	b007      	add	sp, #28
  401456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	param = 0x48;
  40145a:	ad06      	add	r5, sp, #24
  40145c:	2348      	movs	r3, #72	; 0x48
  40145e:	f805 3d01 	strb.w	r3, [r5, #-1]!
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &param, 1);
  401462:	2201      	movs	r2, #1
  401464:	4629      	mov	r1, r5
  401466:	2036      	movs	r0, #54	; 0x36
  401468:	4e20      	ldr	r6, [pc, #128]	; (4014ec <ili9488_init+0x19c>)
  40146a:	47b0      	blx	r6
	ili9488_delay(100);
  40146c:	2064      	movs	r0, #100	; 0x64
  40146e:	4c20      	ldr	r4, [pc, #128]	; (4014f0 <ili9488_init+0x1a0>)
  401470:	47a0      	blx	r4
	param = 0x04;
  401472:	2304      	movs	r3, #4
  401474:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_CABC_CONTROL_9, &param, 1);
  401478:	2201      	movs	r2, #1
  40147a:	4629      	mov	r1, r5
  40147c:	20cf      	movs	r0, #207	; 0xcf
  40147e:	47b0      	blx	r6
	ili9488_delay(100);
  401480:	2064      	movs	r0, #100	; 0x64
  401482:	47a0      	blx	r4
	param = 0x06;
  401484:	2306      	movs	r3, #6
  401486:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_COLMOD_PIXEL_FORMAT_SET, &param, 1);
  40148a:	2201      	movs	r2, #1
  40148c:	4629      	mov	r1, r5
  40148e:	203a      	movs	r0, #58	; 0x3a
  401490:	47b0      	blx	r6
	ili9488_delay(100);
  401492:	2064      	movs	r0, #100	; 0x64
  401494:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NORMAL_DISP_MODE_ON, 0, 0);
  401496:	2200      	movs	r2, #0
  401498:	4611      	mov	r1, r2
  40149a:	2013      	movs	r0, #19
  40149c:	47b0      	blx	r6
	ili9488_delay(100);
  40149e:	2064      	movs	r0, #100	; 0x64
  4014a0:	47a0      	blx	r4
	ili9488_display_on();
  4014a2:	4b16      	ldr	r3, [pc, #88]	; (4014fc <ili9488_init+0x1ac>)
  4014a4:	4798      	blx	r3
	ili9488_delay(100);
  4014a6:	2064      	movs	r0, #100	; 0x64
  4014a8:	47a0      	blx	r4
	ili9488_set_display_direction(LANDSCAPE);
  4014aa:	2000      	movs	r0, #0
  4014ac:	4b14      	ldr	r3, [pc, #80]	; (401500 <ili9488_init+0x1b0>)
  4014ae:	4798      	blx	r3
	ili9488_delay(100);
  4014b0:	2064      	movs	r0, #100	; 0x64
  4014b2:	47a0      	blx	r4
	ili9488_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  4014b4:	f8b9 3004 	ldrh.w	r3, [r9, #4]
  4014b8:	f8b9 2000 	ldrh.w	r2, [r9]
  4014bc:	2100      	movs	r1, #0
  4014be:	4608      	mov	r0, r1
  4014c0:	4c10      	ldr	r4, [pc, #64]	; (401504 <ili9488_init+0x1b4>)
  4014c2:	47a0      	blx	r4
	ili9488_set_foreground_color(p_opt->foreground_color);
  4014c4:	f8d9 0008 	ldr.w	r0, [r9, #8]
  4014c8:	4b0f      	ldr	r3, [pc, #60]	; (401508 <ili9488_init+0x1b8>)
  4014ca:	4798      	blx	r3
	ili9488_set_cursor_position(0, 0);
  4014cc:	2100      	movs	r1, #0
  4014ce:	4608      	mov	r0, r1
  4014d0:	4b0e      	ldr	r3, [pc, #56]	; (40150c <ili9488_init+0x1bc>)
  4014d2:	4798      	blx	r3
	return 0;
  4014d4:	2000      	movs	r0, #0
  4014d6:	e7bd      	b.n	401454 <ili9488_init+0x104>
  4014d8:	40008000 	.word	0x40008000
  4014dc:	00400bc9 	.word	0x00400bc9
  4014e0:	01312d00 	.word	0x01312d00
  4014e4:	00401c21 	.word	0x00401c21
  4014e8:	00400c9d 	.word	0x00400c9d
  4014ec:	00401135 	.word	0x00401135
  4014f0:	004011e9 	.word	0x004011e9
  4014f4:	00401801 	.word	0x00401801
  4014f8:	00400d03 	.word	0x00400d03
  4014fc:	004012b1 	.word	0x004012b1
  401500:	00401205 	.word	0x00401205
  401504:	00401231 	.word	0x00401231
  401508:	004012c5 	.word	0x004012c5
  40150c:	004012ed 	.word	0x004012ed
  401510:	00400c1d 	.word	0x00400c1d

00401514 <ili9488_draw_filled_rectangle>:
 * \param ul_x2 X coordinate of lower-right corner on LCD.
 * \param ul_y2 Y coordinate of lower-right corner on LCD.
 */
void ili9488_draw_filled_rectangle(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
  401514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401518:	b084      	sub	sp, #16
  40151a:	9003      	str	r0, [sp, #12]
  40151c:	9102      	str	r1, [sp, #8]
  40151e:	9201      	str	r2, [sp, #4]
  401520:	aa04      	add	r2, sp, #16
  401522:	f842 3d10 	str.w	r3, [r2, #-16]!
	uint32_t size, blocks;

	/* Swap coordinates if necessary */
	ili9488_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
  401526:	4613      	mov	r3, r2
  401528:	aa01      	add	r2, sp, #4
  40152a:	a902      	add	r1, sp, #8
  40152c:	a803      	add	r0, sp, #12
  40152e:	4c22      	ldr	r4, [pc, #136]	; (4015b8 <ili9488_draw_filled_rectangle+0xa4>)
  401530:	47a0      	blx	r4

	/* Determine the refresh window area */
	ili9488_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1, (ul_y2 - ul_y1) + 1);
  401532:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  401536:	f8bd 1008 	ldrh.w	r1, [sp, #8]
  40153a:	9b00      	ldr	r3, [sp, #0]
  40153c:	3301      	adds	r3, #1
  40153e:	1a5b      	subs	r3, r3, r1
  401540:	9a01      	ldr	r2, [sp, #4]
  401542:	3201      	adds	r2, #1
  401544:	1a12      	subs	r2, r2, r0
  401546:	b29b      	uxth	r3, r3
  401548:	b292      	uxth	r2, r2
  40154a:	4c1c      	ldr	r4, [pc, #112]	; (4015bc <ili9488_draw_filled_rectangle+0xa8>)
  40154c:	47a0      	blx	r4

	/* Prepare to write in GRAM */
	ili9488_write_ram_prepare();
  40154e:	4b1c      	ldr	r3, [pc, #112]	; (4015c0 <ili9488_draw_filled_rectangle+0xac>)
  401550:	4798      	blx	r3

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);
  401552:	9903      	ldr	r1, [sp, #12]
  401554:	9d01      	ldr	r5, [sp, #4]
  401556:	1a69      	subs	r1, r5, r1
  401558:	9d00      	ldr	r5, [sp, #0]
  40155a:	3501      	adds	r5, #1
  40155c:	9b02      	ldr	r3, [sp, #8]
  40155e:	1aed      	subs	r5, r5, r3
  401560:	fb01 5505 	mla	r5, r1, r5, r5
	/* Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
  401564:	4b17      	ldr	r3, [pc, #92]	; (4015c4 <ili9488_draw_filled_rectangle+0xb0>)
  401566:	fba3 2305 	umull	r2, r3, r3, r5
  40156a:	0a1b      	lsrs	r3, r3, #8
	while (blocks--) {
  40156c:	b163      	cbz	r3, 401588 <ili9488_draw_filled_rectangle+0x74>
  40156e:	1e5c      	subs	r4, r3, #1
		ili9488_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT);
  401570:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4015cc <ili9488_draw_filled_rectangle+0xb8>
  401574:	f44f 67b4 	mov.w	r7, #1440	; 0x5a0
  401578:	4e13      	ldr	r6, [pc, #76]	; (4015c8 <ili9488_draw_filled_rectangle+0xb4>)
  40157a:	4639      	mov	r1, r7
  40157c:	4640      	mov	r0, r8
  40157e:	47b0      	blx	r6
	while (blocks--) {
  401580:	3c01      	subs	r4, #1
  401582:	f1b4 3fff 	cmp.w	r4, #4294967295
  401586:	d1f8      	bne.n	40157a <ili9488_draw_filled_rectangle+0x66>
	}

	/* Send remaining pixels */
	ili9488_write_ram_buffer(g_ul_pixel_cache, (size % LCD_DATA_CACHE_SIZE) * LCD_DATA_COLOR_UNIT);
  401588:	490e      	ldr	r1, [pc, #56]	; (4015c4 <ili9488_draw_filled_rectangle+0xb0>)
  40158a:	fba1 3105 	umull	r3, r1, r1, r5
  40158e:	0a09      	lsrs	r1, r1, #8
  401590:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
  401594:	eba5 1141 	sub.w	r1, r5, r1, lsl #5
  401598:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  40159c:	480b      	ldr	r0, [pc, #44]	; (4015cc <ili9488_draw_filled_rectangle+0xb8>)
  40159e:	4b0a      	ldr	r3, [pc, #40]	; (4015c8 <ili9488_draw_filled_rectangle+0xb4>)
  4015a0:	4798      	blx	r3

	/* Reset the refresh window area */
	ili9488_set_window(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  4015a2:	f44f 73a0 	mov.w	r3, #320	; 0x140
  4015a6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  4015aa:	2100      	movs	r1, #0
  4015ac:	4608      	mov	r0, r1
  4015ae:	4c03      	ldr	r4, [pc, #12]	; (4015bc <ili9488_draw_filled_rectangle+0xa8>)
  4015b0:	47a0      	blx	r4

}
  4015b2:	b004      	add	sp, #16
  4015b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4015b8:	004010a1 	.word	0x004010a1
  4015bc:	00401231 	.word	0x00401231
  4015c0:	004010f9 	.word	0x004010f9
  4015c4:	88888889 	.word	0x88888889
  4015c8:	004011a9 	.word	0x004011a9
  4015cc:	204009dc 	.word	0x204009dc

004015d0 <ili9488_draw_filled_circle>:
	signed int d;       /* Decision Variable */
	uint32_t dwCurX;    /* Current X Value */
	uint32_t dwCurY;    /* Current Y Value */
	uint32_t dwXmin, dwYmin;

	if (ul_r == 0) {
  4015d0:	2a00      	cmp	r2, #0
  4015d2:	d04a      	beq.n	40166a <ili9488_draw_filled_circle+0x9a>
{
  4015d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4015d8:	4607      	mov	r7, r0
  4015da:	4688      	mov	r8, r1
  4015dc:	4615      	mov	r5, r2
		return 1;
	}

	d = 3 - (ul_r << 1);
  4015de:	0056      	lsls	r6, r2, #1
  4015e0:	f1c6 0603 	rsb	r6, r6, #3
	dwCurX = 0;
  4015e4:	2400      	movs	r4, #0
	dwCurY = ul_r;

	while (dwCurX <= dwCurY) {
		dwXmin = (dwCurX > ul_x) ? 0 : ul_x - dwCurX;
		dwYmin = (dwCurY > ul_y) ? 0 : ul_y - dwCurY;
		ili9488_draw_filled_rectangle(dwXmin, dwYmin, ul_x + dwCurX, dwYmin);
  4015e6:	f8df a088 	ldr.w	sl, [pc, #136]	; 401670 <ili9488_draw_filled_circle+0xa0>
  4015ea:	e005      	b.n	4015f8 <ili9488_draw_filled_circle+0x28>
		dwYmin = (dwCurX > ul_y) ? 0 : ul_y - dwCurX;
		ili9488_draw_filled_rectangle(dwXmin, dwYmin, ul_x + dwCurY, dwYmin);
		ili9488_draw_filled_rectangle(dwXmin, ul_y + dwCurX, ul_x + dwCurY, ul_y + dwCurX);

		if (d < 0) {
			d += (dwCurX << 2) + 6;
  4015ec:	3606      	adds	r6, #6
  4015ee:	eb06 0684 	add.w	r6, r6, r4, lsl #2
		} else {
			d += ((dwCurX - dwCurY) << 2) + 10;
			dwCurY--;
		}

		dwCurX++;
  4015f2:	3401      	adds	r4, #1
	while (dwCurX <= dwCurY) {
  4015f4:	42a5      	cmp	r5, r4
  4015f6:	d335      	bcc.n	401664 <ili9488_draw_filled_circle+0x94>
		dwXmin = (dwCurX > ul_x) ? 0 : ul_x - dwCurX;
  4015f8:	42a7      	cmp	r7, r4
  4015fa:	bf2c      	ite	cs
  4015fc:	eba7 0b04 	subcs.w	fp, r7, r4
  401600:	f04f 0b00 	movcc.w	fp, #0
		dwYmin = (dwCurY > ul_y) ? 0 : ul_y - dwCurY;
  401604:	45a8      	cmp	r8, r5
  401606:	bf2c      	ite	cs
  401608:	eba8 0105 	subcs.w	r1, r8, r5
  40160c:	2100      	movcc	r1, #0
		ili9488_draw_filled_rectangle(dwXmin, dwYmin, ul_x + dwCurX, dwYmin);
  40160e:	eb07 0904 	add.w	r9, r7, r4
  401612:	460b      	mov	r3, r1
  401614:	464a      	mov	r2, r9
  401616:	4658      	mov	r0, fp
  401618:	47d0      	blx	sl
		ili9488_draw_filled_rectangle(dwXmin, ul_y + dwCurY, ul_x + dwCurX, ul_y + dwCurY);
  40161a:	eb08 0105 	add.w	r1, r8, r5
  40161e:	460b      	mov	r3, r1
  401620:	464a      	mov	r2, r9
  401622:	4658      	mov	r0, fp
  401624:	47d0      	blx	sl
		dwXmin = (dwCurY > ul_x) ? 0 : ul_x - dwCurY;
  401626:	42af      	cmp	r7, r5
  401628:	bf2c      	ite	cs
  40162a:	eba7 0b05 	subcs.w	fp, r7, r5
  40162e:	f04f 0b00 	movcc.w	fp, #0
		dwYmin = (dwCurX > ul_y) ? 0 : ul_y - dwCurX;
  401632:	45a0      	cmp	r8, r4
  401634:	bf2c      	ite	cs
  401636:	eba8 0104 	subcs.w	r1, r8, r4
  40163a:	2100      	movcc	r1, #0
		ili9488_draw_filled_rectangle(dwXmin, dwYmin, ul_x + dwCurY, dwYmin);
  40163c:	eb07 0905 	add.w	r9, r7, r5
  401640:	460b      	mov	r3, r1
  401642:	464a      	mov	r2, r9
  401644:	4658      	mov	r0, fp
  401646:	47d0      	blx	sl
		ili9488_draw_filled_rectangle(dwXmin, ul_y + dwCurX, ul_x + dwCurY, ul_y + dwCurX);
  401648:	eb08 0104 	add.w	r1, r8, r4
  40164c:	460b      	mov	r3, r1
  40164e:	464a      	mov	r2, r9
  401650:	4658      	mov	r0, fp
  401652:	47d0      	blx	sl
		if (d < 0) {
  401654:	2e00      	cmp	r6, #0
  401656:	dbc9      	blt.n	4015ec <ili9488_draw_filled_circle+0x1c>
			d += ((dwCurX - dwCurY) << 2) + 10;
  401658:	1b63      	subs	r3, r4, r5
  40165a:	360a      	adds	r6, #10
  40165c:	eb06 0683 	add.w	r6, r6, r3, lsl #2
			dwCurY--;
  401660:	3d01      	subs	r5, #1
  401662:	e7c6      	b.n	4015f2 <ili9488_draw_filled_circle+0x22>
	}

	return 0;
  401664:	2000      	movs	r0, #0
  401666:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 1;
  40166a:	2001      	movs	r0, #1
  40166c:	4770      	bx	lr
  40166e:	bf00      	nop
  401670:	00401515 	.word	0x00401515

00401674 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  401674:	6301      	str	r1, [r0, #48]	; 0x30
  401676:	4770      	bx	lr

00401678 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401678:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40167a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40167e:	d03a      	beq.n	4016f6 <pio_set_peripheral+0x7e>
  401680:	d813      	bhi.n	4016aa <pio_set_peripheral+0x32>
  401682:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401686:	d025      	beq.n	4016d4 <pio_set_peripheral+0x5c>
  401688:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40168c:	d10a      	bne.n	4016a4 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40168e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401690:	4313      	orrs	r3, r2
  401692:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401694:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401696:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401698:	400b      	ands	r3, r1
  40169a:	ea23 0302 	bic.w	r3, r3, r2
  40169e:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4016a0:	6042      	str	r2, [r0, #4]
  4016a2:	4770      	bx	lr
	switch (ul_type) {
  4016a4:	2900      	cmp	r1, #0
  4016a6:	d1fb      	bne.n	4016a0 <pio_set_peripheral+0x28>
  4016a8:	4770      	bx	lr
  4016aa:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4016ae:	d021      	beq.n	4016f4 <pio_set_peripheral+0x7c>
  4016b0:	d809      	bhi.n	4016c6 <pio_set_peripheral+0x4e>
  4016b2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4016b6:	d1f3      	bne.n	4016a0 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4016b8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4016ba:	4313      	orrs	r3, r2
  4016bc:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4016be:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4016c0:	4313      	orrs	r3, r2
  4016c2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4016c4:	e7ec      	b.n	4016a0 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4016c6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4016ca:	d013      	beq.n	4016f4 <pio_set_peripheral+0x7c>
  4016cc:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4016d0:	d010      	beq.n	4016f4 <pio_set_peripheral+0x7c>
  4016d2:	e7e5      	b.n	4016a0 <pio_set_peripheral+0x28>
{
  4016d4:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4016d6:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4016d8:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4016da:	43d3      	mvns	r3, r2
  4016dc:	4021      	ands	r1, r4
  4016de:	461c      	mov	r4, r3
  4016e0:	4019      	ands	r1, r3
  4016e2:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4016e4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4016e6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4016e8:	400b      	ands	r3, r1
  4016ea:	4023      	ands	r3, r4
  4016ec:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4016ee:	6042      	str	r2, [r0, #4]
}
  4016f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4016f4:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4016f6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4016f8:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4016fa:	400b      	ands	r3, r1
  4016fc:	ea23 0302 	bic.w	r3, r3, r2
  401700:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401702:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401704:	4313      	orrs	r3, r2
  401706:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401708:	e7ca      	b.n	4016a0 <pio_set_peripheral+0x28>

0040170a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40170a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40170c:	f012 0f01 	tst.w	r2, #1
  401710:	d10d      	bne.n	40172e <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  401712:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401714:	f012 0f0a 	tst.w	r2, #10
  401718:	d00b      	beq.n	401732 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  40171a:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  40171c:	f012 0f02 	tst.w	r2, #2
  401720:	d109      	bne.n	401736 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  401722:	f012 0f08 	tst.w	r2, #8
  401726:	d008      	beq.n	40173a <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  401728:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  40172c:	e005      	b.n	40173a <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  40172e:	6641      	str	r1, [r0, #100]	; 0x64
  401730:	e7f0      	b.n	401714 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  401732:	6241      	str	r1, [r0, #36]	; 0x24
  401734:	e7f2      	b.n	40171c <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  401736:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  40173a:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40173c:	6001      	str	r1, [r0, #0]
  40173e:	4770      	bx	lr

00401740 <pio_set_output>:
{
  401740:	b410      	push	{r4}
  401742:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  401744:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401746:	b94c      	cbnz	r4, 40175c <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  401748:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  40174a:	b14b      	cbz	r3, 401760 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  40174c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40174e:	b94a      	cbnz	r2, 401764 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  401750:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  401752:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401754:	6001      	str	r1, [r0, #0]
}
  401756:	f85d 4b04 	ldr.w	r4, [sp], #4
  40175a:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40175c:	6641      	str	r1, [r0, #100]	; 0x64
  40175e:	e7f4      	b.n	40174a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  401760:	6541      	str	r1, [r0, #84]	; 0x54
  401762:	e7f4      	b.n	40174e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401764:	6301      	str	r1, [r0, #48]	; 0x30
  401766:	e7f4      	b.n	401752 <pio_set_output+0x12>

00401768 <pio_configure>:
{
  401768:	b570      	push	{r4, r5, r6, lr}
  40176a:	b082      	sub	sp, #8
  40176c:	4605      	mov	r5, r0
  40176e:	4616      	mov	r6, r2
  401770:	461c      	mov	r4, r3
	switch (ul_type) {
  401772:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401776:	d014      	beq.n	4017a2 <pio_configure+0x3a>
  401778:	d90a      	bls.n	401790 <pio_configure+0x28>
  40177a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40177e:	d024      	beq.n	4017ca <pio_configure+0x62>
  401780:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401784:	d021      	beq.n	4017ca <pio_configure+0x62>
  401786:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40178a:	d017      	beq.n	4017bc <pio_configure+0x54>
		return 0;
  40178c:	2000      	movs	r0, #0
  40178e:	e01a      	b.n	4017c6 <pio_configure+0x5e>
	switch (ul_type) {
  401790:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401794:	d005      	beq.n	4017a2 <pio_configure+0x3a>
  401796:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40179a:	d002      	beq.n	4017a2 <pio_configure+0x3a>
  40179c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4017a0:	d1f4      	bne.n	40178c <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  4017a2:	4632      	mov	r2, r6
  4017a4:	4628      	mov	r0, r5
  4017a6:	4b11      	ldr	r3, [pc, #68]	; (4017ec <pio_configure+0x84>)
  4017a8:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4017aa:	f014 0f01 	tst.w	r4, #1
  4017ae:	d102      	bne.n	4017b6 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  4017b0:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  4017b2:	2001      	movs	r0, #1
  4017b4:	e007      	b.n	4017c6 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  4017b6:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  4017b8:	2001      	movs	r0, #1
  4017ba:	e004      	b.n	4017c6 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  4017bc:	461a      	mov	r2, r3
  4017be:	4631      	mov	r1, r6
  4017c0:	4b0b      	ldr	r3, [pc, #44]	; (4017f0 <pio_configure+0x88>)
  4017c2:	4798      	blx	r3
	return 1;
  4017c4:	2001      	movs	r0, #1
}
  4017c6:	b002      	add	sp, #8
  4017c8:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4017ca:	f004 0301 	and.w	r3, r4, #1
  4017ce:	9300      	str	r3, [sp, #0]
  4017d0:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4017d4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4017d8:	bf14      	ite	ne
  4017da:	2200      	movne	r2, #0
  4017dc:	2201      	moveq	r2, #1
  4017de:	4631      	mov	r1, r6
  4017e0:	4628      	mov	r0, r5
  4017e2:	4c04      	ldr	r4, [pc, #16]	; (4017f4 <pio_configure+0x8c>)
  4017e4:	47a0      	blx	r4
	return 1;
  4017e6:	2001      	movs	r0, #1
		break;
  4017e8:	e7ed      	b.n	4017c6 <pio_configure+0x5e>
  4017ea:	bf00      	nop
  4017ec:	00401679 	.word	0x00401679
  4017f0:	0040170b 	.word	0x0040170b
  4017f4:	00401741 	.word	0x00401741

004017f8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4017f8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4017fa:	4770      	bx	lr

004017fc <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4017fc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4017fe:	4770      	bx	lr

00401800 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401800:	4b05      	ldr	r3, [pc, #20]	; (401818 <pio_set_pin_high+0x18>)
  401802:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  401806:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  401808:	f000 001f 	and.w	r0, r0, #31
  40180c:	2201      	movs	r2, #1
  40180e:	fa02 f000 	lsl.w	r0, r2, r0
  401812:	6318      	str	r0, [r3, #48]	; 0x30
  401814:	4770      	bx	lr
  401816:	bf00      	nop
  401818:	00200707 	.word	0x00200707

0040181c <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40181c:	4b05      	ldr	r3, [pc, #20]	; (401834 <pio_set_pin_low+0x18>)
  40181e:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  401822:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  401824:	f000 001f 	and.w	r0, r0, #31
  401828:	2201      	movs	r2, #1
  40182a:	fa02 f000 	lsl.w	r0, r2, r0
  40182e:	6358      	str	r0, [r3, #52]	; 0x34
  401830:	4770      	bx	lr
  401832:	bf00      	nop
  401834:	00200707 	.word	0x00200707

00401838 <pio_configure_pin>:
{
  401838:	b570      	push	{r4, r5, r6, lr}
  40183a:	b082      	sub	sp, #8
  40183c:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40183e:	4c46      	ldr	r4, [pc, #280]	; (401958 <pio_configure_pin+0x120>)
  401840:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  401844:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  401846:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40184a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40184e:	d059      	beq.n	401904 <pio_configure_pin+0xcc>
  401850:	d80a      	bhi.n	401868 <pio_configure_pin+0x30>
  401852:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401856:	d02f      	beq.n	4018b8 <pio_configure_pin+0x80>
  401858:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40185c:	d03f      	beq.n	4018de <pio_configure_pin+0xa6>
  40185e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401862:	d016      	beq.n	401892 <pio_configure_pin+0x5a>
		return 0;
  401864:	2000      	movs	r0, #0
  401866:	e012      	b.n	40188e <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  401868:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40186c:	d05d      	beq.n	40192a <pio_configure_pin+0xf2>
  40186e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401872:	d05a      	beq.n	40192a <pio_configure_pin+0xf2>
  401874:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401878:	d1f4      	bne.n	401864 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40187a:	f000 011f 	and.w	r1, r0, #31
  40187e:	2601      	movs	r6, #1
  401880:	462a      	mov	r2, r5
  401882:	fa06 f101 	lsl.w	r1, r6, r1
  401886:	4620      	mov	r0, r4
  401888:	4b34      	ldr	r3, [pc, #208]	; (40195c <pio_configure_pin+0x124>)
  40188a:	4798      	blx	r3
	return 1;
  40188c:	4630      	mov	r0, r6
}
  40188e:	b002      	add	sp, #8
  401890:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401892:	f000 001f 	and.w	r0, r0, #31
  401896:	2601      	movs	r6, #1
  401898:	4086      	lsls	r6, r0
  40189a:	4632      	mov	r2, r6
  40189c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4018a0:	4620      	mov	r0, r4
  4018a2:	4b2f      	ldr	r3, [pc, #188]	; (401960 <pio_configure_pin+0x128>)
  4018a4:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4018a6:	f015 0f01 	tst.w	r5, #1
  4018aa:	d102      	bne.n	4018b2 <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  4018ac:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4018ae:	2001      	movs	r0, #1
  4018b0:	e7ed      	b.n	40188e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4018b2:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4018b4:	2001      	movs	r0, #1
  4018b6:	e7ea      	b.n	40188e <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4018b8:	f000 001f 	and.w	r0, r0, #31
  4018bc:	2601      	movs	r6, #1
  4018be:	4086      	lsls	r6, r0
  4018c0:	4632      	mov	r2, r6
  4018c2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4018c6:	4620      	mov	r0, r4
  4018c8:	4b25      	ldr	r3, [pc, #148]	; (401960 <pio_configure_pin+0x128>)
  4018ca:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4018cc:	f015 0f01 	tst.w	r5, #1
  4018d0:	d102      	bne.n	4018d8 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  4018d2:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4018d4:	2001      	movs	r0, #1
  4018d6:	e7da      	b.n	40188e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4018d8:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4018da:	2001      	movs	r0, #1
  4018dc:	e7d7      	b.n	40188e <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4018de:	f000 001f 	and.w	r0, r0, #31
  4018e2:	2601      	movs	r6, #1
  4018e4:	4086      	lsls	r6, r0
  4018e6:	4632      	mov	r2, r6
  4018e8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4018ec:	4620      	mov	r0, r4
  4018ee:	4b1c      	ldr	r3, [pc, #112]	; (401960 <pio_configure_pin+0x128>)
  4018f0:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4018f2:	f015 0f01 	tst.w	r5, #1
  4018f6:	d102      	bne.n	4018fe <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  4018f8:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4018fa:	2001      	movs	r0, #1
  4018fc:	e7c7      	b.n	40188e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4018fe:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401900:	2001      	movs	r0, #1
  401902:	e7c4      	b.n	40188e <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401904:	f000 001f 	and.w	r0, r0, #31
  401908:	2601      	movs	r6, #1
  40190a:	4086      	lsls	r6, r0
  40190c:	4632      	mov	r2, r6
  40190e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401912:	4620      	mov	r0, r4
  401914:	4b12      	ldr	r3, [pc, #72]	; (401960 <pio_configure_pin+0x128>)
  401916:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401918:	f015 0f01 	tst.w	r5, #1
  40191c:	d102      	bne.n	401924 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  40191e:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  401920:	2001      	movs	r0, #1
  401922:	e7b4      	b.n	40188e <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  401924:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401926:	2001      	movs	r0, #1
  401928:	e7b1      	b.n	40188e <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40192a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40192e:	f000 011f 	and.w	r1, r0, #31
  401932:	2601      	movs	r6, #1
  401934:	ea05 0306 	and.w	r3, r5, r6
  401938:	9300      	str	r3, [sp, #0]
  40193a:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40193e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  401942:	bf14      	ite	ne
  401944:	2200      	movne	r2, #0
  401946:	2201      	moveq	r2, #1
  401948:	fa06 f101 	lsl.w	r1, r6, r1
  40194c:	4620      	mov	r0, r4
  40194e:	4c05      	ldr	r4, [pc, #20]	; (401964 <pio_configure_pin+0x12c>)
  401950:	47a0      	blx	r4
	return 1;
  401952:	4630      	mov	r0, r6
		break;
  401954:	e79b      	b.n	40188e <pio_configure_pin+0x56>
  401956:	bf00      	nop
  401958:	00200707 	.word	0x00200707
  40195c:	0040170b 	.word	0x0040170b
  401960:	00401679 	.word	0x00401679
  401964:	00401741 	.word	0x00401741

00401968 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40196c:	4604      	mov	r4, r0
  40196e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401970:	4b0e      	ldr	r3, [pc, #56]	; (4019ac <pio_handler_process+0x44>)
  401972:	4798      	blx	r3
  401974:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401976:	4620      	mov	r0, r4
  401978:	4b0d      	ldr	r3, [pc, #52]	; (4019b0 <pio_handler_process+0x48>)
  40197a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40197c:	4005      	ands	r5, r0
  40197e:	d013      	beq.n	4019a8 <pio_handler_process+0x40>
  401980:	4c0c      	ldr	r4, [pc, #48]	; (4019b4 <pio_handler_process+0x4c>)
  401982:	f104 0660 	add.w	r6, r4, #96	; 0x60
  401986:	e003      	b.n	401990 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401988:	42b4      	cmp	r4, r6
  40198a:	d00d      	beq.n	4019a8 <pio_handler_process+0x40>
  40198c:	3410      	adds	r4, #16
		while (status != 0) {
  40198e:	b15d      	cbz	r5, 4019a8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401990:	6820      	ldr	r0, [r4, #0]
  401992:	4540      	cmp	r0, r8
  401994:	d1f8      	bne.n	401988 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401996:	6861      	ldr	r1, [r4, #4]
  401998:	4229      	tst	r1, r5
  40199a:	d0f5      	beq.n	401988 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40199c:	68e3      	ldr	r3, [r4, #12]
  40199e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4019a0:	6863      	ldr	r3, [r4, #4]
  4019a2:	ea25 0503 	bic.w	r5, r5, r3
  4019a6:	e7ef      	b.n	401988 <pio_handler_process+0x20>
  4019a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4019ac:	004017f9 	.word	0x004017f9
  4019b0:	004017fd 	.word	0x004017fd
  4019b4:	20400f7c 	.word	0x20400f7c

004019b8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4019b8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4019ba:	210a      	movs	r1, #10
  4019bc:	4801      	ldr	r0, [pc, #4]	; (4019c4 <PIOA_Handler+0xc>)
  4019be:	4b02      	ldr	r3, [pc, #8]	; (4019c8 <PIOA_Handler+0x10>)
  4019c0:	4798      	blx	r3
  4019c2:	bd08      	pop	{r3, pc}
  4019c4:	400e0e00 	.word	0x400e0e00
  4019c8:	00401969 	.word	0x00401969

004019cc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4019cc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4019ce:	210b      	movs	r1, #11
  4019d0:	4801      	ldr	r0, [pc, #4]	; (4019d8 <PIOB_Handler+0xc>)
  4019d2:	4b02      	ldr	r3, [pc, #8]	; (4019dc <PIOB_Handler+0x10>)
  4019d4:	4798      	blx	r3
  4019d6:	bd08      	pop	{r3, pc}
  4019d8:	400e1000 	.word	0x400e1000
  4019dc:	00401969 	.word	0x00401969

004019e0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4019e0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4019e2:	210c      	movs	r1, #12
  4019e4:	4801      	ldr	r0, [pc, #4]	; (4019ec <PIOC_Handler+0xc>)
  4019e6:	4b02      	ldr	r3, [pc, #8]	; (4019f0 <PIOC_Handler+0x10>)
  4019e8:	4798      	blx	r3
  4019ea:	bd08      	pop	{r3, pc}
  4019ec:	400e1200 	.word	0x400e1200
  4019f0:	00401969 	.word	0x00401969

004019f4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4019f4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4019f6:	2110      	movs	r1, #16
  4019f8:	4801      	ldr	r0, [pc, #4]	; (401a00 <PIOD_Handler+0xc>)
  4019fa:	4b02      	ldr	r3, [pc, #8]	; (401a04 <PIOD_Handler+0x10>)
  4019fc:	4798      	blx	r3
  4019fe:	bd08      	pop	{r3, pc}
  401a00:	400e1400 	.word	0x400e1400
  401a04:	00401969 	.word	0x00401969

00401a08 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401a08:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  401a0a:	2111      	movs	r1, #17
  401a0c:	4801      	ldr	r0, [pc, #4]	; (401a14 <PIOE_Handler+0xc>)
  401a0e:	4b02      	ldr	r3, [pc, #8]	; (401a18 <PIOE_Handler+0x10>)
  401a10:	4798      	blx	r3
  401a12:	bd08      	pop	{r3, pc}
  401a14:	400e1600 	.word	0x400e1600
  401a18:	00401969 	.word	0x00401969

00401a1c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401a1c:	2803      	cmp	r0, #3
  401a1e:	d011      	beq.n	401a44 <pmc_mck_set_division+0x28>
  401a20:	2804      	cmp	r0, #4
  401a22:	d012      	beq.n	401a4a <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401a24:	2802      	cmp	r0, #2
  401a26:	bf0c      	ite	eq
  401a28:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401a2c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401a2e:	4a08      	ldr	r2, [pc, #32]	; (401a50 <pmc_mck_set_division+0x34>)
  401a30:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401a36:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401a38:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401a3a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401a3c:	f013 0f08 	tst.w	r3, #8
  401a40:	d0fb      	beq.n	401a3a <pmc_mck_set_division+0x1e>
}
  401a42:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401a44:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401a48:	e7f1      	b.n	401a2e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401a4a:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  401a4e:	e7ee      	b.n	401a2e <pmc_mck_set_division+0x12>
  401a50:	400e0600 	.word	0x400e0600

00401a54 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401a54:	4a17      	ldr	r2, [pc, #92]	; (401ab4 <pmc_switch_mck_to_pllack+0x60>)
  401a56:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401a5c:	4318      	orrs	r0, r3
  401a5e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401a60:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401a62:	f013 0f08 	tst.w	r3, #8
  401a66:	d10a      	bne.n	401a7e <pmc_switch_mck_to_pllack+0x2a>
  401a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401a6c:	4911      	ldr	r1, [pc, #68]	; (401ab4 <pmc_switch_mck_to_pllack+0x60>)
  401a6e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401a70:	f012 0f08 	tst.w	r2, #8
  401a74:	d103      	bne.n	401a7e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401a76:	3b01      	subs	r3, #1
  401a78:	d1f9      	bne.n	401a6e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401a7a:	2001      	movs	r0, #1
  401a7c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401a7e:	4a0d      	ldr	r2, [pc, #52]	; (401ab4 <pmc_switch_mck_to_pllack+0x60>)
  401a80:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401a82:	f023 0303 	bic.w	r3, r3, #3
  401a86:	f043 0302 	orr.w	r3, r3, #2
  401a8a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401a8c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401a8e:	f013 0f08 	tst.w	r3, #8
  401a92:	d10a      	bne.n	401aaa <pmc_switch_mck_to_pllack+0x56>
  401a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401a98:	4906      	ldr	r1, [pc, #24]	; (401ab4 <pmc_switch_mck_to_pllack+0x60>)
  401a9a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401a9c:	f012 0f08 	tst.w	r2, #8
  401aa0:	d105      	bne.n	401aae <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401aa2:	3b01      	subs	r3, #1
  401aa4:	d1f9      	bne.n	401a9a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401aa6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401aa8:	4770      	bx	lr
	return 0;
  401aaa:	2000      	movs	r0, #0
  401aac:	4770      	bx	lr
  401aae:	2000      	movs	r0, #0
  401ab0:	4770      	bx	lr
  401ab2:	bf00      	nop
  401ab4:	400e0600 	.word	0x400e0600

00401ab8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401ab8:	b9a0      	cbnz	r0, 401ae4 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401aba:	480e      	ldr	r0, [pc, #56]	; (401af4 <pmc_switch_mainck_to_xtal+0x3c>)
  401abc:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401abe:	0209      	lsls	r1, r1, #8
  401ac0:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401ac2:	4a0d      	ldr	r2, [pc, #52]	; (401af8 <pmc_switch_mainck_to_xtal+0x40>)
  401ac4:	401a      	ands	r2, r3
  401ac6:	4b0d      	ldr	r3, [pc, #52]	; (401afc <pmc_switch_mainck_to_xtal+0x44>)
  401ac8:	4313      	orrs	r3, r2
  401aca:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401acc:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401ace:	4602      	mov	r2, r0
  401ad0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401ad2:	f013 0f01 	tst.w	r3, #1
  401ad6:	d0fb      	beq.n	401ad0 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401ad8:	4a06      	ldr	r2, [pc, #24]	; (401af4 <pmc_switch_mainck_to_xtal+0x3c>)
  401ada:	6a11      	ldr	r1, [r2, #32]
  401adc:	4b08      	ldr	r3, [pc, #32]	; (401b00 <pmc_switch_mainck_to_xtal+0x48>)
  401ade:	430b      	orrs	r3, r1
  401ae0:	6213      	str	r3, [r2, #32]
  401ae2:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401ae4:	4903      	ldr	r1, [pc, #12]	; (401af4 <pmc_switch_mainck_to_xtal+0x3c>)
  401ae6:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401ae8:	4a06      	ldr	r2, [pc, #24]	; (401b04 <pmc_switch_mainck_to_xtal+0x4c>)
  401aea:	401a      	ands	r2, r3
  401aec:	4b06      	ldr	r3, [pc, #24]	; (401b08 <pmc_switch_mainck_to_xtal+0x50>)
  401aee:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401af0:	620b      	str	r3, [r1, #32]
  401af2:	4770      	bx	lr
  401af4:	400e0600 	.word	0x400e0600
  401af8:	ffc8fffc 	.word	0xffc8fffc
  401afc:	00370001 	.word	0x00370001
  401b00:	01370000 	.word	0x01370000
  401b04:	fec8fffc 	.word	0xfec8fffc
  401b08:	01370002 	.word	0x01370002

00401b0c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401b0c:	4b02      	ldr	r3, [pc, #8]	; (401b18 <pmc_osc_is_ready_mainck+0xc>)
  401b0e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401b10:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401b14:	4770      	bx	lr
  401b16:	bf00      	nop
  401b18:	400e0600 	.word	0x400e0600

00401b1c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401b1c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401b20:	4b01      	ldr	r3, [pc, #4]	; (401b28 <pmc_disable_pllack+0xc>)
  401b22:	629a      	str	r2, [r3, #40]	; 0x28
  401b24:	4770      	bx	lr
  401b26:	bf00      	nop
  401b28:	400e0600 	.word	0x400e0600

00401b2c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401b2c:	4b02      	ldr	r3, [pc, #8]	; (401b38 <pmc_is_locked_pllack+0xc>)
  401b2e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401b30:	f000 0002 	and.w	r0, r0, #2
  401b34:	4770      	bx	lr
  401b36:	bf00      	nop
  401b38:	400e0600 	.word	0x400e0600

00401b3c <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  401b3c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  401b40:	4b05      	ldr	r3, [pc, #20]	; (401b58 <pmc_enable_periph_clk+0x1c>)
  401b42:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  401b46:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  401b4a:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  401b4e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  401b52:	2000      	movs	r0, #0
  401b54:	4770      	bx	lr
  401b56:	bf00      	nop
  401b58:	400e0600 	.word	0x400e0600

00401b5c <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  401b5c:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  401b5e:	4b07      	ldr	r3, [pc, #28]	; (401b7c <spi_enable_clock+0x20>)
  401b60:	4298      	cmp	r0, r3
  401b62:	d003      	beq.n	401b6c <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  401b64:	4b06      	ldr	r3, [pc, #24]	; (401b80 <spi_enable_clock+0x24>)
  401b66:	4298      	cmp	r0, r3
  401b68:	d004      	beq.n	401b74 <spi_enable_clock+0x18>
  401b6a:	bd08      	pop	{r3, pc}
  401b6c:	2015      	movs	r0, #21
  401b6e:	4b05      	ldr	r3, [pc, #20]	; (401b84 <spi_enable_clock+0x28>)
  401b70:	4798      	blx	r3
  401b72:	bd08      	pop	{r3, pc}
  401b74:	202a      	movs	r0, #42	; 0x2a
  401b76:	4b03      	ldr	r3, [pc, #12]	; (401b84 <spi_enable_clock+0x28>)
  401b78:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  401b7a:	e7f6      	b.n	401b6a <spi_enable_clock+0xe>
  401b7c:	40008000 	.word	0x40008000
  401b80:	40058000 	.word	0x40058000
  401b84:	00401b3d 	.word	0x00401b3d

00401b88 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  401b88:	6843      	ldr	r3, [r0, #4]
  401b8a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  401b8e:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  401b90:	6843      	ldr	r3, [r0, #4]
  401b92:	0409      	lsls	r1, r1, #16
  401b94:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  401b98:	4319      	orrs	r1, r3
  401b9a:	6041      	str	r1, [r0, #4]
  401b9c:	4770      	bx	lr

00401b9e <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  401b9e:	6843      	ldr	r3, [r0, #4]
  401ba0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401ba4:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  401ba6:	6843      	ldr	r3, [r0, #4]
  401ba8:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  401bac:	6041      	str	r1, [r0, #4]
  401bae:	4770      	bx	lr

00401bb0 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  401bb0:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  401bb2:	f643 2499 	movw	r4, #15001	; 0x3a99
  401bb6:	6905      	ldr	r5, [r0, #16]
  401bb8:	f015 0f02 	tst.w	r5, #2
  401bbc:	d103      	bne.n	401bc6 <spi_write+0x16>
		if (!timeout--) {
  401bbe:	3c01      	subs	r4, #1
  401bc0:	d1f9      	bne.n	401bb6 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  401bc2:	2001      	movs	r0, #1
  401bc4:	e00c      	b.n	401be0 <spi_write+0x30>
	if (p_spi->SPI_MR & SPI_MR_PS) {
  401bc6:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  401bc8:	f014 0f02 	tst.w	r4, #2
  401bcc:	d006      	beq.n	401bdc <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  401bce:	0412      	lsls	r2, r2, #16
  401bd0:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  401bd4:	4311      	orrs	r1, r2
		if (uc_last) {
  401bd6:	b10b      	cbz	r3, 401bdc <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  401bd8:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  401bdc:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  401bde:	2000      	movs	r0, #0
}
  401be0:	bc30      	pop	{r4, r5}
  401be2:	4770      	bx	lr

00401be4 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  401be4:	b932      	cbnz	r2, 401bf4 <spi_set_clock_polarity+0x10>
  401be6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  401bea:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401bec:	f023 0301 	bic.w	r3, r3, #1
  401bf0:	6303      	str	r3, [r0, #48]	; 0x30
  401bf2:	4770      	bx	lr
  401bf4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  401bf8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401bfa:	f043 0301 	orr.w	r3, r3, #1
  401bfe:	6303      	str	r3, [r0, #48]	; 0x30
  401c00:	4770      	bx	lr

00401c02 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  401c02:	b932      	cbnz	r2, 401c12 <spi_set_clock_phase+0x10>
  401c04:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  401c08:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401c0a:	f023 0302 	bic.w	r3, r3, #2
  401c0e:	6303      	str	r3, [r0, #48]	; 0x30
  401c10:	4770      	bx	lr
  401c12:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  401c16:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401c18:	f043 0302 	orr.w	r3, r3, #2
  401c1c:	6303      	str	r3, [r0, #48]	; 0x30
  401c1e:	4770      	bx	lr

00401c20 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  401c20:	2a04      	cmp	r2, #4
  401c22:	d003      	beq.n	401c2c <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  401c24:	b16a      	cbz	r2, 401c42 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  401c26:	2a08      	cmp	r2, #8
  401c28:	d016      	beq.n	401c58 <spi_configure_cs_behavior+0x38>
  401c2a:	4770      	bx	lr
  401c2c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  401c30:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401c32:	f023 0308 	bic.w	r3, r3, #8
  401c36:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  401c38:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401c3a:	f043 0304 	orr.w	r3, r3, #4
  401c3e:	6303      	str	r3, [r0, #48]	; 0x30
  401c40:	4770      	bx	lr
  401c42:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  401c46:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401c48:	f023 0308 	bic.w	r3, r3, #8
  401c4c:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  401c4e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401c50:	f023 0304 	bic.w	r3, r3, #4
  401c54:	6303      	str	r3, [r0, #48]	; 0x30
  401c56:	4770      	bx	lr
  401c58:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  401c5c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401c5e:	f043 0308 	orr.w	r3, r3, #8
  401c62:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  401c64:	e7e1      	b.n	401c2a <spi_configure_cs_behavior+0xa>

00401c66 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  401c66:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  401c6a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401c6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  401c70:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  401c72:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401c74:	431a      	orrs	r2, r3
  401c76:	630a      	str	r2, [r1, #48]	; 0x30
  401c78:	4770      	bx	lr

00401c7a <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  401c7a:	1e43      	subs	r3, r0, #1
  401c7c:	4419      	add	r1, r3
  401c7e:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  401c82:	1e43      	subs	r3, r0, #1
  401c84:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  401c86:	bf94      	ite	ls
  401c88:	b200      	sxthls	r0, r0
		return -1;
  401c8a:	f04f 30ff 	movhi.w	r0, #4294967295
}
  401c8e:	4770      	bx	lr

00401c90 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  401c90:	b17a      	cbz	r2, 401cb2 <spi_set_baudrate_div+0x22>
{
  401c92:	b410      	push	{r4}
  401c94:	4614      	mov	r4, r2
  401c96:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  401c9a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401c9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  401ca0:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  401ca2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  401ca4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  401ca8:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  401caa:	2000      	movs	r0, #0
}
  401cac:	f85d 4b04 	ldr.w	r4, [sp], #4
  401cb0:	4770      	bx	lr
        return -1;
  401cb2:	f04f 30ff 	mov.w	r0, #4294967295
  401cb6:	4770      	bx	lr

00401cb8 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  401cb8:	b410      	push	{r4}
  401cba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  401cbe:	6b08      	ldr	r0, [r1, #48]	; 0x30
  401cc0:	b280      	uxth	r0, r0
  401cc2:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  401cc4:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  401cc6:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  401cca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  401cce:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  401cd0:	f85d 4b04 	ldr.w	r4, [sp], #4
  401cd4:	4770      	bx	lr
	...

00401cd8 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401cd8:	4b28      	ldr	r3, [pc, #160]	; (401d7c <twihs_set_speed+0xa4>)
  401cda:	4299      	cmp	r1, r3
  401cdc:	d84b      	bhi.n	401d76 <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  401cde:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  401ce2:	4299      	cmp	r1, r3
  401ce4:	d92d      	bls.n	401d42 <twihs_set_speed+0x6a>
{
  401ce6:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401ce8:	4c25      	ldr	r4, [pc, #148]	; (401d80 <twihs_set_speed+0xa8>)
  401cea:	fba4 3402 	umull	r3, r4, r4, r2
  401cee:	0ba4      	lsrs	r4, r4, #14
  401cf0:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401cf2:	4b24      	ldr	r3, [pc, #144]	; (401d84 <twihs_set_speed+0xac>)
  401cf4:	440b      	add	r3, r1
  401cf6:	009b      	lsls	r3, r3, #2
  401cf8:	fbb2 f2f3 	udiv	r2, r2, r3
  401cfc:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401cfe:	2cff      	cmp	r4, #255	; 0xff
  401d00:	d91d      	bls.n	401d3e <twihs_set_speed+0x66>
  401d02:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  401d04:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  401d06:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401d08:	2cff      	cmp	r4, #255	; 0xff
  401d0a:	d901      	bls.n	401d10 <twihs_set_speed+0x38>
  401d0c:	2906      	cmp	r1, #6
  401d0e:	d9f9      	bls.n	401d04 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401d10:	2aff      	cmp	r2, #255	; 0xff
  401d12:	d907      	bls.n	401d24 <twihs_set_speed+0x4c>
  401d14:	2906      	cmp	r1, #6
  401d16:	d805      	bhi.n	401d24 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  401d18:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  401d1a:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401d1c:	2aff      	cmp	r2, #255	; 0xff
  401d1e:	d901      	bls.n	401d24 <twihs_set_speed+0x4c>
  401d20:	2906      	cmp	r1, #6
  401d22:	d9f9      	bls.n	401d18 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401d24:	0213      	lsls	r3, r2, #8
  401d26:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  401d28:	0409      	lsls	r1, r1, #16
  401d2a:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401d2e:	430b      	orrs	r3, r1
  401d30:	b2e4      	uxtb	r4, r4
  401d32:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  401d34:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401d36:	2000      	movs	r0, #0
}
  401d38:	f85d 4b04 	ldr.w	r4, [sp], #4
  401d3c:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401d3e:	2100      	movs	r1, #0
  401d40:	e7e6      	b.n	401d10 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401d42:	0049      	lsls	r1, r1, #1
  401d44:	fbb2 f2f1 	udiv	r2, r2, r1
  401d48:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401d4a:	2aff      	cmp	r2, #255	; 0xff
  401d4c:	d911      	bls.n	401d72 <twihs_set_speed+0x9a>
  401d4e:	2300      	movs	r3, #0
			ckdiv++;
  401d50:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  401d52:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401d54:	2aff      	cmp	r2, #255	; 0xff
  401d56:	d901      	bls.n	401d5c <twihs_set_speed+0x84>
  401d58:	2b06      	cmp	r3, #6
  401d5a:	d9f9      	bls.n	401d50 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401d5c:	0211      	lsls	r1, r2, #8
  401d5e:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  401d60:	041b      	lsls	r3, r3, #16
  401d62:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401d66:	430b      	orrs	r3, r1
  401d68:	b2d2      	uxtb	r2, r2
  401d6a:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  401d6c:	6102      	str	r2, [r0, #16]
	return PASS;
  401d6e:	2000      	movs	r0, #0
  401d70:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401d72:	2300      	movs	r3, #0
  401d74:	e7f2      	b.n	401d5c <twihs_set_speed+0x84>
		return FAIL;
  401d76:	2001      	movs	r0, #1
  401d78:	4770      	bx	lr
  401d7a:	bf00      	nop
  401d7c:	00061a80 	.word	0x00061a80
  401d80:	057619f1 	.word	0x057619f1
  401d84:	3ffd1200 	.word	0x3ffd1200

00401d88 <twihs_master_init>:
{
  401d88:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  401d8a:	f04f 32ff 	mov.w	r2, #4294967295
  401d8e:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  401d90:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401d92:	2280      	movs	r2, #128	; 0x80
  401d94:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  401d96:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401d98:	2208      	movs	r2, #8
  401d9a:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401d9c:	2220      	movs	r2, #32
  401d9e:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401da0:	2204      	movs	r2, #4
  401da2:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401da4:	680a      	ldr	r2, [r1, #0]
  401da6:	6849      	ldr	r1, [r1, #4]
  401da8:	4b03      	ldr	r3, [pc, #12]	; (401db8 <twihs_master_init+0x30>)
  401daa:	4798      	blx	r3
}
  401dac:	2801      	cmp	r0, #1
  401dae:	bf14      	ite	ne
  401db0:	2000      	movne	r0, #0
  401db2:	2001      	moveq	r0, #1
  401db4:	bd08      	pop	{r3, pc}
  401db6:	bf00      	nop
  401db8:	00401cd9 	.word	0x00401cd9

00401dbc <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  401dbc:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  401dbe:	2a00      	cmp	r2, #0
  401dc0:	d04c      	beq.n	401e5c <twihs_master_read+0xa0>
{
  401dc2:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401dc4:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401dc6:	2600      	movs	r6, #0
  401dc8:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401dca:	684b      	ldr	r3, [r1, #4]
  401dcc:	021b      	lsls	r3, r3, #8
  401dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401dd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401dd6:	7c0d      	ldrb	r5, [r1, #16]
  401dd8:	042d      	lsls	r5, r5, #16
  401dda:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  401dde:	432b      	orrs	r3, r5
  401de0:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401de2:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401de4:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401de6:	b15d      	cbz	r5, 401e00 <twihs_master_read+0x44>
	val = addr[0];
  401de8:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  401dea:	2d01      	cmp	r5, #1
  401dec:	dd02      	ble.n	401df4 <twihs_master_read+0x38>
		val |= addr[1];
  401dee:	784e      	ldrb	r6, [r1, #1]
  401df0:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  401df4:	2d02      	cmp	r5, #2
  401df6:	dd04      	ble.n	401e02 <twihs_master_read+0x46>
		val |= addr[2];
  401df8:	7889      	ldrb	r1, [r1, #2]
  401dfa:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  401dfe:	e000      	b.n	401e02 <twihs_master_read+0x46>
		return 0;
  401e00:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401e02:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401e04:	2301      	movs	r3, #1
  401e06:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401e08:	2502      	movs	r5, #2
  401e0a:	e012      	b.n	401e32 <twihs_master_read+0x76>
  401e0c:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  401e0e:	f013 0f02 	tst.w	r3, #2
  401e12:	d01b      	beq.n	401e4c <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  401e14:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401e16:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401e18:	6a03      	ldr	r3, [r0, #32]
  401e1a:	f013 0f01 	tst.w	r3, #1
  401e1e:	d0fb      	beq.n	401e18 <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  401e20:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  401e22:	2000      	movs	r0, #0
}
  401e24:	bc70      	pop	{r4, r5, r6}
  401e26:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  401e28:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401e2a:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  401e2e:	3a01      	subs	r2, #1
  401e30:	d0f2      	beq.n	401e18 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401e32:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401e34:	f413 7f80 	tst.w	r3, #256	; 0x100
  401e38:	d114      	bne.n	401e64 <twihs_master_read+0xa8>
  401e3a:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  401e3e:	2a01      	cmp	r2, #1
  401e40:	d0e4      	beq.n	401e0c <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  401e42:	f013 0f02 	tst.w	r3, #2
  401e46:	d1ef      	bne.n	401e28 <twihs_master_read+0x6c>
	while (cnt > 0) {
  401e48:	2a00      	cmp	r2, #0
  401e4a:	d0e5      	beq.n	401e18 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401e4c:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401e4e:	f413 7f80 	tst.w	r3, #256	; 0x100
  401e52:	d105      	bne.n	401e60 <twihs_master_read+0xa4>
		if (!timeout--) {
  401e54:	3901      	subs	r1, #1
  401e56:	d1f2      	bne.n	401e3e <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  401e58:	2009      	movs	r0, #9
  401e5a:	e7e3      	b.n	401e24 <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  401e5c:	2001      	movs	r0, #1
  401e5e:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401e60:	2005      	movs	r0, #5
  401e62:	e7df      	b.n	401e24 <twihs_master_read+0x68>
  401e64:	2005      	movs	r0, #5
  401e66:	e7dd      	b.n	401e24 <twihs_master_read+0x68>

00401e68 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  401e68:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  401e6a:	2b00      	cmp	r3, #0
  401e6c:	d043      	beq.n	401ef6 <twihs_master_write+0x8e>
{
  401e6e:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401e70:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401e72:	2600      	movs	r6, #0
  401e74:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401e76:	7c0a      	ldrb	r2, [r1, #16]
  401e78:	0412      	lsls	r2, r2, #16
  401e7a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401e7e:	684d      	ldr	r5, [r1, #4]
  401e80:	022d      	lsls	r5, r5, #8
  401e82:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401e86:	432a      	orrs	r2, r5
  401e88:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401e8a:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401e8c:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401e8e:	b15d      	cbz	r5, 401ea8 <twihs_master_write+0x40>
	val = addr[0];
  401e90:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  401e92:	2d01      	cmp	r5, #1
  401e94:	dd02      	ble.n	401e9c <twihs_master_write+0x34>
		val |= addr[1];
  401e96:	784e      	ldrb	r6, [r1, #1]
  401e98:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  401e9c:	2d02      	cmp	r5, #2
  401e9e:	dd04      	ble.n	401eaa <twihs_master_write+0x42>
		val |= addr[2];
  401ea0:	7889      	ldrb	r1, [r1, #2]
  401ea2:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  401ea6:	e000      	b.n	401eaa <twihs_master_write+0x42>
		return 0;
  401ea8:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401eaa:	60c2      	str	r2, [r0, #12]
  401eac:	e004      	b.n	401eb8 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  401eae:	f814 2b01 	ldrb.w	r2, [r4], #1
  401eb2:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  401eb4:	3b01      	subs	r3, #1
  401eb6:	d00f      	beq.n	401ed8 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  401eb8:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401eba:	f412 7f80 	tst.w	r2, #256	; 0x100
  401ebe:	d11e      	bne.n	401efe <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  401ec0:	f012 0f04 	tst.w	r2, #4
  401ec4:	d1f3      	bne.n	401eae <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  401ec6:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401ec8:	f412 7f80 	tst.w	r2, #256	; 0x100
  401ecc:	d115      	bne.n	401efa <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  401ece:	f012 0f04 	tst.w	r2, #4
  401ed2:	d1ec      	bne.n	401eae <twihs_master_write+0x46>
	while (cnt > 0) {
  401ed4:	2b00      	cmp	r3, #0
  401ed6:	d1f6      	bne.n	401ec6 <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  401ed8:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401eda:	f413 7f80 	tst.w	r3, #256	; 0x100
  401ede:	d111      	bne.n	401f04 <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  401ee0:	f013 0f04 	tst.w	r3, #4
  401ee4:	d0f8      	beq.n	401ed8 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401ee6:	2302      	movs	r3, #2
  401ee8:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401eea:	6a03      	ldr	r3, [r0, #32]
  401eec:	f013 0f01 	tst.w	r3, #1
  401ef0:	d0fb      	beq.n	401eea <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  401ef2:	2000      	movs	r0, #0
  401ef4:	e004      	b.n	401f00 <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  401ef6:	2001      	movs	r0, #1
  401ef8:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401efa:	2005      	movs	r0, #5
  401efc:	e000      	b.n	401f00 <twihs_master_write+0x98>
  401efe:	2005      	movs	r0, #5
}
  401f00:	bc70      	pop	{r4, r5, r6}
  401f02:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401f04:	2005      	movs	r0, #5
  401f06:	e7fb      	b.n	401f00 <twihs_master_write+0x98>

00401f08 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401f08:	6943      	ldr	r3, [r0, #20]
  401f0a:	f013 0f02 	tst.w	r3, #2
  401f0e:	d002      	beq.n	401f16 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401f10:	61c1      	str	r1, [r0, #28]
	return 0;
  401f12:	2000      	movs	r0, #0
  401f14:	4770      	bx	lr
		return 1;
  401f16:	2001      	movs	r0, #1
}
  401f18:	4770      	bx	lr

00401f1a <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401f1a:	6943      	ldr	r3, [r0, #20]
  401f1c:	f013 0f01 	tst.w	r3, #1
  401f20:	d003      	beq.n	401f2a <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401f22:	6983      	ldr	r3, [r0, #24]
  401f24:	700b      	strb	r3, [r1, #0]
	return 0;
  401f26:	2000      	movs	r0, #0
  401f28:	4770      	bx	lr
		return 1;
  401f2a:	2001      	movs	r0, #1
}
  401f2c:	4770      	bx	lr

00401f2e <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401f2e:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401f30:	010b      	lsls	r3, r1, #4
  401f32:	4293      	cmp	r3, r2
  401f34:	d914      	bls.n	401f60 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401f36:	00c9      	lsls	r1, r1, #3
  401f38:	084b      	lsrs	r3, r1, #1
  401f3a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401f3e:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401f42:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401f44:	1e5c      	subs	r4, r3, #1
  401f46:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401f4a:	428c      	cmp	r4, r1
  401f4c:	d901      	bls.n	401f52 <usart_set_async_baudrate+0x24>
		return 1;
  401f4e:	2001      	movs	r0, #1
  401f50:	e017      	b.n	401f82 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  401f52:	6841      	ldr	r1, [r0, #4]
  401f54:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401f58:	6041      	str	r1, [r0, #4]
  401f5a:	e00c      	b.n	401f76 <usart_set_async_baudrate+0x48>
		return 1;
  401f5c:	2001      	movs	r0, #1
  401f5e:	e010      	b.n	401f82 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401f60:	0859      	lsrs	r1, r3, #1
  401f62:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  401f66:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  401f6a:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401f6c:	1e5c      	subs	r4, r3, #1
  401f6e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401f72:	428c      	cmp	r4, r1
  401f74:	d8f2      	bhi.n	401f5c <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401f76:	0412      	lsls	r2, r2, #16
  401f78:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401f7c:	431a      	orrs	r2, r3
  401f7e:	6202      	str	r2, [r0, #32]

	return 0;
  401f80:	2000      	movs	r0, #0
}
  401f82:	f85d 4b04 	ldr.w	r4, [sp], #4
  401f86:	4770      	bx	lr

00401f88 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401f88:	4b08      	ldr	r3, [pc, #32]	; (401fac <usart_reset+0x24>)
  401f8a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  401f8e:	2300      	movs	r3, #0
  401f90:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  401f92:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401f94:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401f96:	2388      	movs	r3, #136	; 0x88
  401f98:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401f9a:	2324      	movs	r3, #36	; 0x24
  401f9c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
  401fa2:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401fa4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401fa8:	6003      	str	r3, [r0, #0]
  401faa:	4770      	bx	lr
  401fac:	55534100 	.word	0x55534100

00401fb0 <usart_init_rs232>:
{
  401fb0:	b570      	push	{r4, r5, r6, lr}
  401fb2:	4605      	mov	r5, r0
  401fb4:	460c      	mov	r4, r1
  401fb6:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401fb8:	4b0f      	ldr	r3, [pc, #60]	; (401ff8 <usart_init_rs232+0x48>)
  401fba:	4798      	blx	r3
	ul_reg_val = 0;
  401fbc:	2200      	movs	r2, #0
  401fbe:	4b0f      	ldr	r3, [pc, #60]	; (401ffc <usart_init_rs232+0x4c>)
  401fc0:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401fc2:	b1a4      	cbz	r4, 401fee <usart_init_rs232+0x3e>
  401fc4:	4632      	mov	r2, r6
  401fc6:	6821      	ldr	r1, [r4, #0]
  401fc8:	4628      	mov	r0, r5
  401fca:	4b0d      	ldr	r3, [pc, #52]	; (402000 <usart_init_rs232+0x50>)
  401fcc:	4798      	blx	r3
  401fce:	4602      	mov	r2, r0
  401fd0:	b978      	cbnz	r0, 401ff2 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401fd2:	6863      	ldr	r3, [r4, #4]
  401fd4:	68a1      	ldr	r1, [r4, #8]
  401fd6:	430b      	orrs	r3, r1
  401fd8:	6921      	ldr	r1, [r4, #16]
  401fda:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401fdc:	68e1      	ldr	r1, [r4, #12]
  401fde:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401fe0:	4906      	ldr	r1, [pc, #24]	; (401ffc <usart_init_rs232+0x4c>)
  401fe2:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401fe4:	6869      	ldr	r1, [r5, #4]
  401fe6:	430b      	orrs	r3, r1
  401fe8:	606b      	str	r3, [r5, #4]
}
  401fea:	4610      	mov	r0, r2
  401fec:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401fee:	2201      	movs	r2, #1
  401ff0:	e7fb      	b.n	401fea <usart_init_rs232+0x3a>
  401ff2:	2201      	movs	r2, #1
  401ff4:	e7f9      	b.n	401fea <usart_init_rs232+0x3a>
  401ff6:	bf00      	nop
  401ff8:	00401f89 	.word	0x00401f89
  401ffc:	20400fec 	.word	0x20400fec
  402000:	00401f2f 	.word	0x00401f2f

00402004 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  402004:	2340      	movs	r3, #64	; 0x40
  402006:	6003      	str	r3, [r0, #0]
  402008:	4770      	bx	lr

0040200a <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  40200a:	2310      	movs	r3, #16
  40200c:	6003      	str	r3, [r0, #0]
  40200e:	4770      	bx	lr

00402010 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  402010:	6943      	ldr	r3, [r0, #20]
  402012:	f013 0f02 	tst.w	r3, #2
  402016:	d004      	beq.n	402022 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  402018:	f3c1 0108 	ubfx	r1, r1, #0, #9
  40201c:	61c1      	str	r1, [r0, #28]
	return 0;
  40201e:	2000      	movs	r0, #0
  402020:	4770      	bx	lr
		return 1;
  402022:	2001      	movs	r0, #1
}
  402024:	4770      	bx	lr

00402026 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  402026:	6943      	ldr	r3, [r0, #20]
  402028:	f013 0f01 	tst.w	r3, #1
  40202c:	d005      	beq.n	40203a <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40202e:	6983      	ldr	r3, [r0, #24]
  402030:	f3c3 0308 	ubfx	r3, r3, #0, #9
  402034:	600b      	str	r3, [r1, #0]
	return 0;
  402036:	2000      	movs	r0, #0
  402038:	4770      	bx	lr
		return 1;
  40203a:	2001      	movs	r0, #1
}
  40203c:	4770      	bx	lr

0040203e <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40203e:	e7fe      	b.n	40203e <Dummy_Handler>

00402040 <Reset_Handler>:
{
  402040:	b500      	push	{lr}
  402042:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  402044:	4b25      	ldr	r3, [pc, #148]	; (4020dc <Reset_Handler+0x9c>)
  402046:	4a26      	ldr	r2, [pc, #152]	; (4020e0 <Reset_Handler+0xa0>)
  402048:	429a      	cmp	r2, r3
  40204a:	d010      	beq.n	40206e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  40204c:	4b25      	ldr	r3, [pc, #148]	; (4020e4 <Reset_Handler+0xa4>)
  40204e:	4a23      	ldr	r2, [pc, #140]	; (4020dc <Reset_Handler+0x9c>)
  402050:	429a      	cmp	r2, r3
  402052:	d20c      	bcs.n	40206e <Reset_Handler+0x2e>
  402054:	3b01      	subs	r3, #1
  402056:	1a9b      	subs	r3, r3, r2
  402058:	f023 0303 	bic.w	r3, r3, #3
  40205c:	3304      	adds	r3, #4
  40205e:	4413      	add	r3, r2
  402060:	491f      	ldr	r1, [pc, #124]	; (4020e0 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  402062:	f851 0b04 	ldr.w	r0, [r1], #4
  402066:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40206a:	429a      	cmp	r2, r3
  40206c:	d1f9      	bne.n	402062 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40206e:	4b1e      	ldr	r3, [pc, #120]	; (4020e8 <Reset_Handler+0xa8>)
  402070:	4a1e      	ldr	r2, [pc, #120]	; (4020ec <Reset_Handler+0xac>)
  402072:	429a      	cmp	r2, r3
  402074:	d20a      	bcs.n	40208c <Reset_Handler+0x4c>
  402076:	3b01      	subs	r3, #1
  402078:	1a9b      	subs	r3, r3, r2
  40207a:	f023 0303 	bic.w	r3, r3, #3
  40207e:	3304      	adds	r3, #4
  402080:	4413      	add	r3, r2
                *pDest++ = 0;
  402082:	2100      	movs	r1, #0
  402084:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  402088:	4293      	cmp	r3, r2
  40208a:	d1fb      	bne.n	402084 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40208c:	4a18      	ldr	r2, [pc, #96]	; (4020f0 <Reset_Handler+0xb0>)
  40208e:	4b19      	ldr	r3, [pc, #100]	; (4020f4 <Reset_Handler+0xb4>)
  402090:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402094:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402096:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40209a:	fab3 f383 	clz	r3, r3
  40209e:	095b      	lsrs	r3, r3, #5
  4020a0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4020a2:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4020a4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4020a8:	2200      	movs	r2, #0
  4020aa:	4b13      	ldr	r3, [pc, #76]	; (4020f8 <Reset_Handler+0xb8>)
  4020ac:	701a      	strb	r2, [r3, #0]
	return flags;
  4020ae:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4020b0:	4a12      	ldr	r2, [pc, #72]	; (4020fc <Reset_Handler+0xbc>)
  4020b2:	6813      	ldr	r3, [r2, #0]
  4020b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4020b8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4020ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4020be:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  4020c2:	b129      	cbz	r1, 4020d0 <Reset_Handler+0x90>
		cpu_irq_enable();
  4020c4:	2201      	movs	r2, #1
  4020c6:	4b0c      	ldr	r3, [pc, #48]	; (4020f8 <Reset_Handler+0xb8>)
  4020c8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4020ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4020ce:	b662      	cpsie	i
        __libc_init_array();
  4020d0:	4b0b      	ldr	r3, [pc, #44]	; (402100 <Reset_Handler+0xc0>)
  4020d2:	4798      	blx	r3
        main();
  4020d4:	4b0b      	ldr	r3, [pc, #44]	; (402104 <Reset_Handler+0xc4>)
  4020d6:	4798      	blx	r3
  4020d8:	e7fe      	b.n	4020d8 <Reset_Handler+0x98>
  4020da:	bf00      	nop
  4020dc:	20400000 	.word	0x20400000
  4020e0:	00409d9c 	.word	0x00409d9c
  4020e4:	204009c0 	.word	0x204009c0
  4020e8:	2040ca88 	.word	0x2040ca88
  4020ec:	204009c0 	.word	0x204009c0
  4020f0:	e000ed00 	.word	0xe000ed00
  4020f4:	00400000 	.word	0x00400000
  4020f8:	2040000a 	.word	0x2040000a
  4020fc:	e000ed88 	.word	0xe000ed88
  402100:	00406991 	.word	0x00406991
  402104:	00404695 	.word	0x00404695

00402108 <SystemCoreClockUpdate>:
  402108:	4b3b      	ldr	r3, [pc, #236]	; (4021f8 <SystemCoreClockUpdate+0xf0>)
  40210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40210c:	f003 0303 	and.w	r3, r3, #3
  402110:	2b01      	cmp	r3, #1
  402112:	d01d      	beq.n	402150 <SystemCoreClockUpdate+0x48>
  402114:	b183      	cbz	r3, 402138 <SystemCoreClockUpdate+0x30>
  402116:	2b02      	cmp	r3, #2
  402118:	d036      	beq.n	402188 <SystemCoreClockUpdate+0x80>
  40211a:	4b37      	ldr	r3, [pc, #220]	; (4021f8 <SystemCoreClockUpdate+0xf0>)
  40211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40211e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402122:	2b70      	cmp	r3, #112	; 0x70
  402124:	d05f      	beq.n	4021e6 <SystemCoreClockUpdate+0xde>
  402126:	4b34      	ldr	r3, [pc, #208]	; (4021f8 <SystemCoreClockUpdate+0xf0>)
  402128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40212a:	4934      	ldr	r1, [pc, #208]	; (4021fc <SystemCoreClockUpdate+0xf4>)
  40212c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  402130:	680b      	ldr	r3, [r1, #0]
  402132:	40d3      	lsrs	r3, r2
  402134:	600b      	str	r3, [r1, #0]
  402136:	4770      	bx	lr
  402138:	4b31      	ldr	r3, [pc, #196]	; (402200 <SystemCoreClockUpdate+0xf8>)
  40213a:	695b      	ldr	r3, [r3, #20]
  40213c:	f013 0f80 	tst.w	r3, #128	; 0x80
  402140:	bf14      	ite	ne
  402142:	f44f 4200 	movne.w	r2, #32768	; 0x8000
  402146:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40214a:	4b2c      	ldr	r3, [pc, #176]	; (4021fc <SystemCoreClockUpdate+0xf4>)
  40214c:	601a      	str	r2, [r3, #0]
  40214e:	e7e4      	b.n	40211a <SystemCoreClockUpdate+0x12>
  402150:	4b29      	ldr	r3, [pc, #164]	; (4021f8 <SystemCoreClockUpdate+0xf0>)
  402152:	6a1b      	ldr	r3, [r3, #32]
  402154:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402158:	d003      	beq.n	402162 <SystemCoreClockUpdate+0x5a>
  40215a:	4a2a      	ldr	r2, [pc, #168]	; (402204 <SystemCoreClockUpdate+0xfc>)
  40215c:	4b27      	ldr	r3, [pc, #156]	; (4021fc <SystemCoreClockUpdate+0xf4>)
  40215e:	601a      	str	r2, [r3, #0]
  402160:	e7db      	b.n	40211a <SystemCoreClockUpdate+0x12>
  402162:	4a29      	ldr	r2, [pc, #164]	; (402208 <SystemCoreClockUpdate+0x100>)
  402164:	4b25      	ldr	r3, [pc, #148]	; (4021fc <SystemCoreClockUpdate+0xf4>)
  402166:	601a      	str	r2, [r3, #0]
  402168:	4b23      	ldr	r3, [pc, #140]	; (4021f8 <SystemCoreClockUpdate+0xf0>)
  40216a:	6a1b      	ldr	r3, [r3, #32]
  40216c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402170:	2b10      	cmp	r3, #16
  402172:	d005      	beq.n	402180 <SystemCoreClockUpdate+0x78>
  402174:	2b20      	cmp	r3, #32
  402176:	d1d0      	bne.n	40211a <SystemCoreClockUpdate+0x12>
  402178:	4a22      	ldr	r2, [pc, #136]	; (402204 <SystemCoreClockUpdate+0xfc>)
  40217a:	4b20      	ldr	r3, [pc, #128]	; (4021fc <SystemCoreClockUpdate+0xf4>)
  40217c:	601a      	str	r2, [r3, #0]
  40217e:	e7cc      	b.n	40211a <SystemCoreClockUpdate+0x12>
  402180:	4a22      	ldr	r2, [pc, #136]	; (40220c <SystemCoreClockUpdate+0x104>)
  402182:	4b1e      	ldr	r3, [pc, #120]	; (4021fc <SystemCoreClockUpdate+0xf4>)
  402184:	601a      	str	r2, [r3, #0]
  402186:	e7c8      	b.n	40211a <SystemCoreClockUpdate+0x12>
  402188:	4b1b      	ldr	r3, [pc, #108]	; (4021f8 <SystemCoreClockUpdate+0xf0>)
  40218a:	6a1b      	ldr	r3, [r3, #32]
  40218c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402190:	d016      	beq.n	4021c0 <SystemCoreClockUpdate+0xb8>
  402192:	4a1c      	ldr	r2, [pc, #112]	; (402204 <SystemCoreClockUpdate+0xfc>)
  402194:	4b19      	ldr	r3, [pc, #100]	; (4021fc <SystemCoreClockUpdate+0xf4>)
  402196:	601a      	str	r2, [r3, #0]
  402198:	4b17      	ldr	r3, [pc, #92]	; (4021f8 <SystemCoreClockUpdate+0xf0>)
  40219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40219c:	f003 0303 	and.w	r3, r3, #3
  4021a0:	2b02      	cmp	r3, #2
  4021a2:	d1ba      	bne.n	40211a <SystemCoreClockUpdate+0x12>
  4021a4:	4a14      	ldr	r2, [pc, #80]	; (4021f8 <SystemCoreClockUpdate+0xf0>)
  4021a6:	6a91      	ldr	r1, [r2, #40]	; 0x28
  4021a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4021aa:	4814      	ldr	r0, [pc, #80]	; (4021fc <SystemCoreClockUpdate+0xf4>)
  4021ac:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4021b0:	6803      	ldr	r3, [r0, #0]
  4021b2:	fb01 3303 	mla	r3, r1, r3, r3
  4021b6:	b2d2      	uxtb	r2, r2
  4021b8:	fbb3 f3f2 	udiv	r3, r3, r2
  4021bc:	6003      	str	r3, [r0, #0]
  4021be:	e7ac      	b.n	40211a <SystemCoreClockUpdate+0x12>
  4021c0:	4a11      	ldr	r2, [pc, #68]	; (402208 <SystemCoreClockUpdate+0x100>)
  4021c2:	4b0e      	ldr	r3, [pc, #56]	; (4021fc <SystemCoreClockUpdate+0xf4>)
  4021c4:	601a      	str	r2, [r3, #0]
  4021c6:	4b0c      	ldr	r3, [pc, #48]	; (4021f8 <SystemCoreClockUpdate+0xf0>)
  4021c8:	6a1b      	ldr	r3, [r3, #32]
  4021ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4021ce:	2b10      	cmp	r3, #16
  4021d0:	d005      	beq.n	4021de <SystemCoreClockUpdate+0xd6>
  4021d2:	2b20      	cmp	r3, #32
  4021d4:	d1e0      	bne.n	402198 <SystemCoreClockUpdate+0x90>
  4021d6:	4a0b      	ldr	r2, [pc, #44]	; (402204 <SystemCoreClockUpdate+0xfc>)
  4021d8:	4b08      	ldr	r3, [pc, #32]	; (4021fc <SystemCoreClockUpdate+0xf4>)
  4021da:	601a      	str	r2, [r3, #0]
  4021dc:	e7dc      	b.n	402198 <SystemCoreClockUpdate+0x90>
  4021de:	4a0b      	ldr	r2, [pc, #44]	; (40220c <SystemCoreClockUpdate+0x104>)
  4021e0:	4b06      	ldr	r3, [pc, #24]	; (4021fc <SystemCoreClockUpdate+0xf4>)
  4021e2:	601a      	str	r2, [r3, #0]
  4021e4:	e7d8      	b.n	402198 <SystemCoreClockUpdate+0x90>
  4021e6:	4a05      	ldr	r2, [pc, #20]	; (4021fc <SystemCoreClockUpdate+0xf4>)
  4021e8:	6813      	ldr	r3, [r2, #0]
  4021ea:	4909      	ldr	r1, [pc, #36]	; (402210 <SystemCoreClockUpdate+0x108>)
  4021ec:	fba1 1303 	umull	r1, r3, r1, r3
  4021f0:	085b      	lsrs	r3, r3, #1
  4021f2:	6013      	str	r3, [r2, #0]
  4021f4:	4770      	bx	lr
  4021f6:	bf00      	nop
  4021f8:	400e0600 	.word	0x400e0600
  4021fc:	2040000c 	.word	0x2040000c
  402200:	400e1810 	.word	0x400e1810
  402204:	00b71b00 	.word	0x00b71b00
  402208:	003d0900 	.word	0x003d0900
  40220c:	007a1200 	.word	0x007a1200
  402210:	aaaaaaab 	.word	0xaaaaaaab

00402214 <system_init_flash>:
  402214:	4b16      	ldr	r3, [pc, #88]	; (402270 <system_init_flash+0x5c>)
  402216:	4298      	cmp	r0, r3
  402218:	d913      	bls.n	402242 <system_init_flash+0x2e>
  40221a:	4b16      	ldr	r3, [pc, #88]	; (402274 <system_init_flash+0x60>)
  40221c:	4298      	cmp	r0, r3
  40221e:	d915      	bls.n	40224c <system_init_flash+0x38>
  402220:	4b15      	ldr	r3, [pc, #84]	; (402278 <system_init_flash+0x64>)
  402222:	4298      	cmp	r0, r3
  402224:	d916      	bls.n	402254 <system_init_flash+0x40>
  402226:	4b15      	ldr	r3, [pc, #84]	; (40227c <system_init_flash+0x68>)
  402228:	4298      	cmp	r0, r3
  40222a:	d917      	bls.n	40225c <system_init_flash+0x48>
  40222c:	4b14      	ldr	r3, [pc, #80]	; (402280 <system_init_flash+0x6c>)
  40222e:	4298      	cmp	r0, r3
  402230:	d918      	bls.n	402264 <system_init_flash+0x50>
  402232:	4b14      	ldr	r3, [pc, #80]	; (402284 <system_init_flash+0x70>)
  402234:	4298      	cmp	r0, r3
  402236:	bf94      	ite	ls
  402238:	4a13      	ldrls	r2, [pc, #76]	; (402288 <system_init_flash+0x74>)
  40223a:	4a14      	ldrhi	r2, [pc, #80]	; (40228c <system_init_flash+0x78>)
  40223c:	4b14      	ldr	r3, [pc, #80]	; (402290 <system_init_flash+0x7c>)
  40223e:	601a      	str	r2, [r3, #0]
  402240:	4770      	bx	lr
  402242:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402246:	4b12      	ldr	r3, [pc, #72]	; (402290 <system_init_flash+0x7c>)
  402248:	601a      	str	r2, [r3, #0]
  40224a:	4770      	bx	lr
  40224c:	4a11      	ldr	r2, [pc, #68]	; (402294 <system_init_flash+0x80>)
  40224e:	4b10      	ldr	r3, [pc, #64]	; (402290 <system_init_flash+0x7c>)
  402250:	601a      	str	r2, [r3, #0]
  402252:	4770      	bx	lr
  402254:	4a10      	ldr	r2, [pc, #64]	; (402298 <system_init_flash+0x84>)
  402256:	4b0e      	ldr	r3, [pc, #56]	; (402290 <system_init_flash+0x7c>)
  402258:	601a      	str	r2, [r3, #0]
  40225a:	4770      	bx	lr
  40225c:	4a0f      	ldr	r2, [pc, #60]	; (40229c <system_init_flash+0x88>)
  40225e:	4b0c      	ldr	r3, [pc, #48]	; (402290 <system_init_flash+0x7c>)
  402260:	601a      	str	r2, [r3, #0]
  402262:	4770      	bx	lr
  402264:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402268:	4b09      	ldr	r3, [pc, #36]	; (402290 <system_init_flash+0x7c>)
  40226a:	601a      	str	r2, [r3, #0]
  40226c:	4770      	bx	lr
  40226e:	bf00      	nop
  402270:	015ef3bf 	.word	0x015ef3bf
  402274:	02bde77f 	.word	0x02bde77f
  402278:	041cdb3f 	.word	0x041cdb3f
  40227c:	057bceff 	.word	0x057bceff
  402280:	06dac2bf 	.word	0x06dac2bf
  402284:	0839b67f 	.word	0x0839b67f
  402288:	04000500 	.word	0x04000500
  40228c:	04000600 	.word	0x04000600
  402290:	400e0c00 	.word	0x400e0c00
  402294:	04000100 	.word	0x04000100
  402298:	04000200 	.word	0x04000200
  40229c:	04000300 	.word	0x04000300

004022a0 <_sbrk>:
  4022a0:	4b0a      	ldr	r3, [pc, #40]	; (4022cc <_sbrk+0x2c>)
  4022a2:	681b      	ldr	r3, [r3, #0]
  4022a4:	b153      	cbz	r3, 4022bc <_sbrk+0x1c>
  4022a6:	4b09      	ldr	r3, [pc, #36]	; (4022cc <_sbrk+0x2c>)
  4022a8:	681b      	ldr	r3, [r3, #0]
  4022aa:	181a      	adds	r2, r3, r0
  4022ac:	4908      	ldr	r1, [pc, #32]	; (4022d0 <_sbrk+0x30>)
  4022ae:	4291      	cmp	r1, r2
  4022b0:	db08      	blt.n	4022c4 <_sbrk+0x24>
  4022b2:	4610      	mov	r0, r2
  4022b4:	4a05      	ldr	r2, [pc, #20]	; (4022cc <_sbrk+0x2c>)
  4022b6:	6010      	str	r0, [r2, #0]
  4022b8:	4618      	mov	r0, r3
  4022ba:	4770      	bx	lr
  4022bc:	4a05      	ldr	r2, [pc, #20]	; (4022d4 <_sbrk+0x34>)
  4022be:	4b03      	ldr	r3, [pc, #12]	; (4022cc <_sbrk+0x2c>)
  4022c0:	601a      	str	r2, [r3, #0]
  4022c2:	e7f0      	b.n	4022a6 <_sbrk+0x6>
  4022c4:	f04f 30ff 	mov.w	r0, #4294967295
  4022c8:	4770      	bx	lr
  4022ca:	bf00      	nop
  4022cc:	20400ff0 	.word	0x20400ff0
  4022d0:	2045fffc 	.word	0x2045fffc
  4022d4:	2040ec88 	.word	0x2040ec88

004022d8 <_close>:
  4022d8:	f04f 30ff 	mov.w	r0, #4294967295
  4022dc:	4770      	bx	lr

004022de <_fstat>:
  4022de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4022e2:	604b      	str	r3, [r1, #4]
  4022e4:	2000      	movs	r0, #0
  4022e6:	4770      	bx	lr

004022e8 <_isatty>:
  4022e8:	2001      	movs	r0, #1
  4022ea:	4770      	bx	lr

004022ec <_lseek>:
  4022ec:	2000      	movs	r0, #0
  4022ee:	4770      	bx	lr

004022f0 <vListInitialise>:
  4022f0:	f100 0308 	add.w	r3, r0, #8
  4022f4:	6043      	str	r3, [r0, #4]
  4022f6:	f04f 32ff 	mov.w	r2, #4294967295
  4022fa:	6082      	str	r2, [r0, #8]
  4022fc:	60c3      	str	r3, [r0, #12]
  4022fe:	6103      	str	r3, [r0, #16]
  402300:	2300      	movs	r3, #0
  402302:	6003      	str	r3, [r0, #0]
  402304:	4770      	bx	lr

00402306 <vListInitialiseItem>:
  402306:	2300      	movs	r3, #0
  402308:	6103      	str	r3, [r0, #16]
  40230a:	4770      	bx	lr

0040230c <vListInsertEnd>:
  40230c:	6843      	ldr	r3, [r0, #4]
  40230e:	604b      	str	r3, [r1, #4]
  402310:	689a      	ldr	r2, [r3, #8]
  402312:	608a      	str	r2, [r1, #8]
  402314:	689a      	ldr	r2, [r3, #8]
  402316:	6051      	str	r1, [r2, #4]
  402318:	6099      	str	r1, [r3, #8]
  40231a:	6108      	str	r0, [r1, #16]
  40231c:	6803      	ldr	r3, [r0, #0]
  40231e:	3301      	adds	r3, #1
  402320:	6003      	str	r3, [r0, #0]
  402322:	4770      	bx	lr

00402324 <vListInsert>:
  402324:	b430      	push	{r4, r5}
  402326:	680d      	ldr	r5, [r1, #0]
  402328:	f1b5 3fff 	cmp.w	r5, #4294967295
  40232c:	d002      	beq.n	402334 <vListInsert+0x10>
  40232e:	f100 0208 	add.w	r2, r0, #8
  402332:	e002      	b.n	40233a <vListInsert+0x16>
  402334:	6902      	ldr	r2, [r0, #16]
  402336:	e004      	b.n	402342 <vListInsert+0x1e>
  402338:	461a      	mov	r2, r3
  40233a:	6853      	ldr	r3, [r2, #4]
  40233c:	681c      	ldr	r4, [r3, #0]
  40233e:	42a5      	cmp	r5, r4
  402340:	d2fa      	bcs.n	402338 <vListInsert+0x14>
  402342:	6853      	ldr	r3, [r2, #4]
  402344:	604b      	str	r3, [r1, #4]
  402346:	6099      	str	r1, [r3, #8]
  402348:	608a      	str	r2, [r1, #8]
  40234a:	6051      	str	r1, [r2, #4]
  40234c:	6108      	str	r0, [r1, #16]
  40234e:	6803      	ldr	r3, [r0, #0]
  402350:	3301      	adds	r3, #1
  402352:	6003      	str	r3, [r0, #0]
  402354:	bc30      	pop	{r4, r5}
  402356:	4770      	bx	lr

00402358 <uxListRemove>:
  402358:	6903      	ldr	r3, [r0, #16]
  40235a:	6842      	ldr	r2, [r0, #4]
  40235c:	6881      	ldr	r1, [r0, #8]
  40235e:	6091      	str	r1, [r2, #8]
  402360:	6882      	ldr	r2, [r0, #8]
  402362:	6841      	ldr	r1, [r0, #4]
  402364:	6051      	str	r1, [r2, #4]
  402366:	685a      	ldr	r2, [r3, #4]
  402368:	4290      	cmp	r0, r2
  40236a:	d005      	beq.n	402378 <uxListRemove+0x20>
  40236c:	2200      	movs	r2, #0
  40236e:	6102      	str	r2, [r0, #16]
  402370:	6818      	ldr	r0, [r3, #0]
  402372:	3801      	subs	r0, #1
  402374:	6018      	str	r0, [r3, #0]
  402376:	4770      	bx	lr
  402378:	6882      	ldr	r2, [r0, #8]
  40237a:	605a      	str	r2, [r3, #4]
  40237c:	e7f6      	b.n	40236c <uxListRemove+0x14>
	...

00402380 <prvTaskExitError>:
  402380:	4b0d      	ldr	r3, [pc, #52]	; (4023b8 <prvTaskExitError+0x38>)
  402382:	681b      	ldr	r3, [r3, #0]
  402384:	f1b3 3fff 	cmp.w	r3, #4294967295
  402388:	d00a      	beq.n	4023a0 <prvTaskExitError+0x20>
  40238a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40238e:	b672      	cpsid	i
  402390:	f383 8811 	msr	BASEPRI, r3
  402394:	f3bf 8f6f 	isb	sy
  402398:	f3bf 8f4f 	dsb	sy
  40239c:	b662      	cpsie	i
  40239e:	e7fe      	b.n	40239e <prvTaskExitError+0x1e>
  4023a0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023a4:	b672      	cpsid	i
  4023a6:	f383 8811 	msr	BASEPRI, r3
  4023aa:	f3bf 8f6f 	isb	sy
  4023ae:	f3bf 8f4f 	dsb	sy
  4023b2:	b662      	cpsie	i
  4023b4:	e7fe      	b.n	4023b4 <prvTaskExitError+0x34>
  4023b6:	bf00      	nop
  4023b8:	20400010 	.word	0x20400010

004023bc <prvPortStartFirstTask>:
  4023bc:	4806      	ldr	r0, [pc, #24]	; (4023d8 <prvPortStartFirstTask+0x1c>)
  4023be:	6800      	ldr	r0, [r0, #0]
  4023c0:	6800      	ldr	r0, [r0, #0]
  4023c2:	f380 8808 	msr	MSP, r0
  4023c6:	b662      	cpsie	i
  4023c8:	b661      	cpsie	f
  4023ca:	f3bf 8f4f 	dsb	sy
  4023ce:	f3bf 8f6f 	isb	sy
  4023d2:	df00      	svc	0
  4023d4:	bf00      	nop
  4023d6:	0000      	.short	0x0000
  4023d8:	e000ed08 	.word	0xe000ed08

004023dc <vPortEnableVFP>:
  4023dc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4023ec <vPortEnableVFP+0x10>
  4023e0:	6801      	ldr	r1, [r0, #0]
  4023e2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4023e6:	6001      	str	r1, [r0, #0]
  4023e8:	4770      	bx	lr
  4023ea:	0000      	.short	0x0000
  4023ec:	e000ed88 	.word	0xe000ed88

004023f0 <pxPortInitialiseStack>:
  4023f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4023f4:	f840 3c04 	str.w	r3, [r0, #-4]
  4023f8:	f840 1c08 	str.w	r1, [r0, #-8]
  4023fc:	4b05      	ldr	r3, [pc, #20]	; (402414 <pxPortInitialiseStack+0x24>)
  4023fe:	f840 3c0c 	str.w	r3, [r0, #-12]
  402402:	f840 2c20 	str.w	r2, [r0, #-32]
  402406:	f06f 0302 	mvn.w	r3, #2
  40240a:	f840 3c24 	str.w	r3, [r0, #-36]
  40240e:	3844      	subs	r0, #68	; 0x44
  402410:	4770      	bx	lr
  402412:	bf00      	nop
  402414:	00402381 	.word	0x00402381

00402418 <SVC_Handler>:
  402418:	4b06      	ldr	r3, [pc, #24]	; (402434 <pxCurrentTCBConst2>)
  40241a:	6819      	ldr	r1, [r3, #0]
  40241c:	6808      	ldr	r0, [r1, #0]
  40241e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402422:	f380 8809 	msr	PSP, r0
  402426:	f3bf 8f6f 	isb	sy
  40242a:	f04f 0000 	mov.w	r0, #0
  40242e:	f380 8811 	msr	BASEPRI, r0
  402432:	4770      	bx	lr

00402434 <pxCurrentTCBConst2>:
  402434:	2040c804 	.word	0x2040c804
  402438:	4770      	bx	lr
  40243a:	bf00      	nop

0040243c <vPortEnterCritical>:
  40243c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402440:	b672      	cpsid	i
  402442:	f383 8811 	msr	BASEPRI, r3
  402446:	f3bf 8f6f 	isb	sy
  40244a:	f3bf 8f4f 	dsb	sy
  40244e:	b662      	cpsie	i
  402450:	4a0b      	ldr	r2, [pc, #44]	; (402480 <vPortEnterCritical+0x44>)
  402452:	6813      	ldr	r3, [r2, #0]
  402454:	3301      	adds	r3, #1
  402456:	6013      	str	r3, [r2, #0]
  402458:	2b01      	cmp	r3, #1
  40245a:	d10f      	bne.n	40247c <vPortEnterCritical+0x40>
  40245c:	4b09      	ldr	r3, [pc, #36]	; (402484 <vPortEnterCritical+0x48>)
  40245e:	681b      	ldr	r3, [r3, #0]
  402460:	f013 0fff 	tst.w	r3, #255	; 0xff
  402464:	d00a      	beq.n	40247c <vPortEnterCritical+0x40>
  402466:	f04f 0380 	mov.w	r3, #128	; 0x80
  40246a:	b672      	cpsid	i
  40246c:	f383 8811 	msr	BASEPRI, r3
  402470:	f3bf 8f6f 	isb	sy
  402474:	f3bf 8f4f 	dsb	sy
  402478:	b662      	cpsie	i
  40247a:	e7fe      	b.n	40247a <vPortEnterCritical+0x3e>
  40247c:	4770      	bx	lr
  40247e:	bf00      	nop
  402480:	20400010 	.word	0x20400010
  402484:	e000ed04 	.word	0xe000ed04

00402488 <vPortExitCritical>:
  402488:	4b0a      	ldr	r3, [pc, #40]	; (4024b4 <vPortExitCritical+0x2c>)
  40248a:	681b      	ldr	r3, [r3, #0]
  40248c:	b953      	cbnz	r3, 4024a4 <vPortExitCritical+0x1c>
  40248e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402492:	b672      	cpsid	i
  402494:	f383 8811 	msr	BASEPRI, r3
  402498:	f3bf 8f6f 	isb	sy
  40249c:	f3bf 8f4f 	dsb	sy
  4024a0:	b662      	cpsie	i
  4024a2:	e7fe      	b.n	4024a2 <vPortExitCritical+0x1a>
  4024a4:	3b01      	subs	r3, #1
  4024a6:	4a03      	ldr	r2, [pc, #12]	; (4024b4 <vPortExitCritical+0x2c>)
  4024a8:	6013      	str	r3, [r2, #0]
  4024aa:	b90b      	cbnz	r3, 4024b0 <vPortExitCritical+0x28>
  4024ac:	f383 8811 	msr	BASEPRI, r3
  4024b0:	4770      	bx	lr
  4024b2:	bf00      	nop
  4024b4:	20400010 	.word	0x20400010

004024b8 <PendSV_Handler>:
  4024b8:	f3ef 8009 	mrs	r0, PSP
  4024bc:	f3bf 8f6f 	isb	sy
  4024c0:	4b15      	ldr	r3, [pc, #84]	; (402518 <pxCurrentTCBConst>)
  4024c2:	681a      	ldr	r2, [r3, #0]
  4024c4:	f01e 0f10 	tst.w	lr, #16
  4024c8:	bf08      	it	eq
  4024ca:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4024ce:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4024d2:	6010      	str	r0, [r2, #0]
  4024d4:	f84d 3d04 	str.w	r3, [sp, #-4]!
  4024d8:	f04f 0080 	mov.w	r0, #128	; 0x80
  4024dc:	b672      	cpsid	i
  4024de:	f380 8811 	msr	BASEPRI, r0
  4024e2:	f3bf 8f4f 	dsb	sy
  4024e6:	f3bf 8f6f 	isb	sy
  4024ea:	b662      	cpsie	i
  4024ec:	f001 f8aa 	bl	403644 <vTaskSwitchContext>
  4024f0:	f04f 0000 	mov.w	r0, #0
  4024f4:	f380 8811 	msr	BASEPRI, r0
  4024f8:	bc08      	pop	{r3}
  4024fa:	6819      	ldr	r1, [r3, #0]
  4024fc:	6808      	ldr	r0, [r1, #0]
  4024fe:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402502:	f01e 0f10 	tst.w	lr, #16
  402506:	bf08      	it	eq
  402508:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  40250c:	f380 8809 	msr	PSP, r0
  402510:	f3bf 8f6f 	isb	sy
  402514:	4770      	bx	lr
  402516:	bf00      	nop

00402518 <pxCurrentTCBConst>:
  402518:	2040c804 	.word	0x2040c804
  40251c:	4770      	bx	lr
  40251e:	bf00      	nop

00402520 <SysTick_Handler>:
  402520:	b508      	push	{r3, lr}
  402522:	f3ef 8311 	mrs	r3, BASEPRI
  402526:	f04f 0280 	mov.w	r2, #128	; 0x80
  40252a:	b672      	cpsid	i
  40252c:	f382 8811 	msr	BASEPRI, r2
  402530:	f3bf 8f6f 	isb	sy
  402534:	f3bf 8f4f 	dsb	sy
  402538:	b662      	cpsie	i
  40253a:	4b05      	ldr	r3, [pc, #20]	; (402550 <SysTick_Handler+0x30>)
  40253c:	4798      	blx	r3
  40253e:	b118      	cbz	r0, 402548 <SysTick_Handler+0x28>
  402540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402544:	4b03      	ldr	r3, [pc, #12]	; (402554 <SysTick_Handler+0x34>)
  402546:	601a      	str	r2, [r3, #0]
  402548:	2300      	movs	r3, #0
  40254a:	f383 8811 	msr	BASEPRI, r3
  40254e:	bd08      	pop	{r3, pc}
  402550:	004032b1 	.word	0x004032b1
  402554:	e000ed04 	.word	0xe000ed04

00402558 <vPortSetupTimerInterrupt>:
  402558:	4a03      	ldr	r2, [pc, #12]	; (402568 <vPortSetupTimerInterrupt+0x10>)
  40255a:	4b04      	ldr	r3, [pc, #16]	; (40256c <vPortSetupTimerInterrupt+0x14>)
  40255c:	601a      	str	r2, [r3, #0]
  40255e:	2207      	movs	r2, #7
  402560:	3b04      	subs	r3, #4
  402562:	601a      	str	r2, [r3, #0]
  402564:	4770      	bx	lr
  402566:	bf00      	nop
  402568:	0003a97f 	.word	0x0003a97f
  40256c:	e000e014 	.word	0xe000e014

00402570 <xPortStartScheduler>:
  402570:	b500      	push	{lr}
  402572:	b083      	sub	sp, #12
  402574:	4b25      	ldr	r3, [pc, #148]	; (40260c <xPortStartScheduler+0x9c>)
  402576:	781a      	ldrb	r2, [r3, #0]
  402578:	b2d2      	uxtb	r2, r2
  40257a:	9201      	str	r2, [sp, #4]
  40257c:	22ff      	movs	r2, #255	; 0xff
  40257e:	701a      	strb	r2, [r3, #0]
  402580:	781b      	ldrb	r3, [r3, #0]
  402582:	b2db      	uxtb	r3, r3
  402584:	f88d 3003 	strb.w	r3, [sp, #3]
  402588:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40258c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402590:	4a1f      	ldr	r2, [pc, #124]	; (402610 <xPortStartScheduler+0xa0>)
  402592:	7013      	strb	r3, [r2, #0]
  402594:	2207      	movs	r2, #7
  402596:	4b1f      	ldr	r3, [pc, #124]	; (402614 <xPortStartScheduler+0xa4>)
  402598:	601a      	str	r2, [r3, #0]
  40259a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40259e:	f013 0f80 	tst.w	r3, #128	; 0x80
  4025a2:	d010      	beq.n	4025c6 <xPortStartScheduler+0x56>
  4025a4:	2206      	movs	r2, #6
  4025a6:	e000      	b.n	4025aa <xPortStartScheduler+0x3a>
  4025a8:	460a      	mov	r2, r1
  4025aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4025ae:	005b      	lsls	r3, r3, #1
  4025b0:	b2db      	uxtb	r3, r3
  4025b2:	f88d 3003 	strb.w	r3, [sp, #3]
  4025b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4025ba:	1e51      	subs	r1, r2, #1
  4025bc:	f013 0f80 	tst.w	r3, #128	; 0x80
  4025c0:	d1f2      	bne.n	4025a8 <xPortStartScheduler+0x38>
  4025c2:	4b14      	ldr	r3, [pc, #80]	; (402614 <xPortStartScheduler+0xa4>)
  4025c4:	601a      	str	r2, [r3, #0]
  4025c6:	4a13      	ldr	r2, [pc, #76]	; (402614 <xPortStartScheduler+0xa4>)
  4025c8:	6813      	ldr	r3, [r2, #0]
  4025ca:	021b      	lsls	r3, r3, #8
  4025cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4025d0:	6013      	str	r3, [r2, #0]
  4025d2:	9b01      	ldr	r3, [sp, #4]
  4025d4:	b2db      	uxtb	r3, r3
  4025d6:	4a0d      	ldr	r2, [pc, #52]	; (40260c <xPortStartScheduler+0x9c>)
  4025d8:	7013      	strb	r3, [r2, #0]
  4025da:	4b0f      	ldr	r3, [pc, #60]	; (402618 <xPortStartScheduler+0xa8>)
  4025dc:	681a      	ldr	r2, [r3, #0]
  4025de:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  4025e2:	601a      	str	r2, [r3, #0]
  4025e4:	681a      	ldr	r2, [r3, #0]
  4025e6:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4025ea:	601a      	str	r2, [r3, #0]
  4025ec:	4b0b      	ldr	r3, [pc, #44]	; (40261c <xPortStartScheduler+0xac>)
  4025ee:	4798      	blx	r3
  4025f0:	2200      	movs	r2, #0
  4025f2:	4b0b      	ldr	r3, [pc, #44]	; (402620 <xPortStartScheduler+0xb0>)
  4025f4:	601a      	str	r2, [r3, #0]
  4025f6:	4b0b      	ldr	r3, [pc, #44]	; (402624 <xPortStartScheduler+0xb4>)
  4025f8:	4798      	blx	r3
  4025fa:	4a0b      	ldr	r2, [pc, #44]	; (402628 <xPortStartScheduler+0xb8>)
  4025fc:	6813      	ldr	r3, [r2, #0]
  4025fe:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  402602:	6013      	str	r3, [r2, #0]
  402604:	4b09      	ldr	r3, [pc, #36]	; (40262c <xPortStartScheduler+0xbc>)
  402606:	4798      	blx	r3
  402608:	4b09      	ldr	r3, [pc, #36]	; (402630 <xPortStartScheduler+0xc0>)
  40260a:	4798      	blx	r3
  40260c:	e000e400 	.word	0xe000e400
  402610:	20400ff4 	.word	0x20400ff4
  402614:	20400ff8 	.word	0x20400ff8
  402618:	e000ed20 	.word	0xe000ed20
  40261c:	00402559 	.word	0x00402559
  402620:	20400010 	.word	0x20400010
  402624:	004023dd 	.word	0x004023dd
  402628:	e000ef34 	.word	0xe000ef34
  40262c:	004023bd 	.word	0x004023bd
  402630:	00402381 	.word	0x00402381

00402634 <vPortValidateInterruptPriority>:
  402634:	f3ef 8305 	mrs	r3, IPSR
  402638:	2b0f      	cmp	r3, #15
  40263a:	d911      	bls.n	402660 <vPortValidateInterruptPriority+0x2c>
  40263c:	4a12      	ldr	r2, [pc, #72]	; (402688 <vPortValidateInterruptPriority+0x54>)
  40263e:	5c9b      	ldrb	r3, [r3, r2]
  402640:	b2db      	uxtb	r3, r3
  402642:	4a12      	ldr	r2, [pc, #72]	; (40268c <vPortValidateInterruptPriority+0x58>)
  402644:	7812      	ldrb	r2, [r2, #0]
  402646:	429a      	cmp	r2, r3
  402648:	d90a      	bls.n	402660 <vPortValidateInterruptPriority+0x2c>
  40264a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40264e:	b672      	cpsid	i
  402650:	f383 8811 	msr	BASEPRI, r3
  402654:	f3bf 8f6f 	isb	sy
  402658:	f3bf 8f4f 	dsb	sy
  40265c:	b662      	cpsie	i
  40265e:	e7fe      	b.n	40265e <vPortValidateInterruptPriority+0x2a>
  402660:	4b0b      	ldr	r3, [pc, #44]	; (402690 <vPortValidateInterruptPriority+0x5c>)
  402662:	681b      	ldr	r3, [r3, #0]
  402664:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  402668:	4a0a      	ldr	r2, [pc, #40]	; (402694 <vPortValidateInterruptPriority+0x60>)
  40266a:	6812      	ldr	r2, [r2, #0]
  40266c:	4293      	cmp	r3, r2
  40266e:	d90a      	bls.n	402686 <vPortValidateInterruptPriority+0x52>
  402670:	f04f 0380 	mov.w	r3, #128	; 0x80
  402674:	b672      	cpsid	i
  402676:	f383 8811 	msr	BASEPRI, r3
  40267a:	f3bf 8f6f 	isb	sy
  40267e:	f3bf 8f4f 	dsb	sy
  402682:	b662      	cpsie	i
  402684:	e7fe      	b.n	402684 <vPortValidateInterruptPriority+0x50>
  402686:	4770      	bx	lr
  402688:	e000e3f0 	.word	0xe000e3f0
  40268c:	20400ff4 	.word	0x20400ff4
  402690:	e000ed0c 	.word	0xe000ed0c
  402694:	20400ff8 	.word	0x20400ff8

00402698 <pvPortMalloc>:
  402698:	b538      	push	{r3, r4, r5, lr}
  40269a:	4604      	mov	r4, r0
  40269c:	f010 0f07 	tst.w	r0, #7
  4026a0:	d002      	beq.n	4026a8 <pvPortMalloc+0x10>
  4026a2:	f020 0407 	bic.w	r4, r0, #7
  4026a6:	3408      	adds	r4, #8
  4026a8:	4b11      	ldr	r3, [pc, #68]	; (4026f0 <pvPortMalloc+0x58>)
  4026aa:	4798      	blx	r3
  4026ac:	4b11      	ldr	r3, [pc, #68]	; (4026f4 <pvPortMalloc+0x5c>)
  4026ae:	681b      	ldr	r3, [r3, #0]
  4026b0:	b193      	cbz	r3, 4026d8 <pvPortMalloc+0x40>
  4026b2:	4b11      	ldr	r3, [pc, #68]	; (4026f8 <pvPortMalloc+0x60>)
  4026b4:	681b      	ldr	r3, [r3, #0]
  4026b6:	441c      	add	r4, r3
  4026b8:	42a3      	cmp	r3, r4
  4026ba:	d213      	bcs.n	4026e4 <pvPortMalloc+0x4c>
  4026bc:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  4026c0:	4294      	cmp	r4, r2
  4026c2:	d80f      	bhi.n	4026e4 <pvPortMalloc+0x4c>
  4026c4:	4a0b      	ldr	r2, [pc, #44]	; (4026f4 <pvPortMalloc+0x5c>)
  4026c6:	6815      	ldr	r5, [r2, #0]
  4026c8:	441d      	add	r5, r3
  4026ca:	4b0b      	ldr	r3, [pc, #44]	; (4026f8 <pvPortMalloc+0x60>)
  4026cc:	601c      	str	r4, [r3, #0]
  4026ce:	4b0b      	ldr	r3, [pc, #44]	; (4026fc <pvPortMalloc+0x64>)
  4026d0:	4798      	blx	r3
  4026d2:	b14d      	cbz	r5, 4026e8 <pvPortMalloc+0x50>
  4026d4:	4628      	mov	r0, r5
  4026d6:	bd38      	pop	{r3, r4, r5, pc}
  4026d8:	4b09      	ldr	r3, [pc, #36]	; (402700 <pvPortMalloc+0x68>)
  4026da:	f023 0307 	bic.w	r3, r3, #7
  4026de:	4a05      	ldr	r2, [pc, #20]	; (4026f4 <pvPortMalloc+0x5c>)
  4026e0:	6013      	str	r3, [r2, #0]
  4026e2:	e7e6      	b.n	4026b2 <pvPortMalloc+0x1a>
  4026e4:	4b05      	ldr	r3, [pc, #20]	; (4026fc <pvPortMalloc+0x64>)
  4026e6:	4798      	blx	r3
  4026e8:	4b06      	ldr	r3, [pc, #24]	; (402704 <pvPortMalloc+0x6c>)
  4026ea:	4798      	blx	r3
  4026ec:	2500      	movs	r5, #0
  4026ee:	e7f1      	b.n	4026d4 <pvPortMalloc+0x3c>
  4026f0:	00403295 	.word	0x00403295
  4026f4:	20400ffc 	.word	0x20400ffc
  4026f8:	2040c800 	.word	0x2040c800
  4026fc:	004033fd 	.word	0x004033fd
  402700:	20401008 	.word	0x20401008
  402704:	004041a3 	.word	0x004041a3

00402708 <vPortFree>:
  402708:	b150      	cbz	r0, 402720 <vPortFree+0x18>
  40270a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40270e:	b672      	cpsid	i
  402710:	f383 8811 	msr	BASEPRI, r3
  402714:	f3bf 8f6f 	isb	sy
  402718:	f3bf 8f4f 	dsb	sy
  40271c:	b662      	cpsie	i
  40271e:	e7fe      	b.n	40271e <vPortFree+0x16>
  402720:	4770      	bx	lr
	...

00402724 <prvCopyDataToQueue>:
  402724:	b538      	push	{r3, r4, r5, lr}
  402726:	4604      	mov	r4, r0
  402728:	4615      	mov	r5, r2
  40272a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40272c:	b95a      	cbnz	r2, 402746 <prvCopyDataToQueue+0x22>
  40272e:	6803      	ldr	r3, [r0, #0]
  402730:	2b00      	cmp	r3, #0
  402732:	d12e      	bne.n	402792 <prvCopyDataToQueue+0x6e>
  402734:	6840      	ldr	r0, [r0, #4]
  402736:	4b1b      	ldr	r3, [pc, #108]	; (4027a4 <prvCopyDataToQueue+0x80>)
  402738:	4798      	blx	r3
  40273a:	2300      	movs	r3, #0
  40273c:	6063      	str	r3, [r4, #4]
  40273e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402740:	3301      	adds	r3, #1
  402742:	63a3      	str	r3, [r4, #56]	; 0x38
  402744:	bd38      	pop	{r3, r4, r5, pc}
  402746:	b96d      	cbnz	r5, 402764 <prvCopyDataToQueue+0x40>
  402748:	6880      	ldr	r0, [r0, #8]
  40274a:	4b17      	ldr	r3, [pc, #92]	; (4027a8 <prvCopyDataToQueue+0x84>)
  40274c:	4798      	blx	r3
  40274e:	68a3      	ldr	r3, [r4, #8]
  402750:	6c22      	ldr	r2, [r4, #64]	; 0x40
  402752:	4413      	add	r3, r2
  402754:	60a3      	str	r3, [r4, #8]
  402756:	6862      	ldr	r2, [r4, #4]
  402758:	4293      	cmp	r3, r2
  40275a:	d31c      	bcc.n	402796 <prvCopyDataToQueue+0x72>
  40275c:	6823      	ldr	r3, [r4, #0]
  40275e:	60a3      	str	r3, [r4, #8]
  402760:	2000      	movs	r0, #0
  402762:	e7ec      	b.n	40273e <prvCopyDataToQueue+0x1a>
  402764:	68c0      	ldr	r0, [r0, #12]
  402766:	4b10      	ldr	r3, [pc, #64]	; (4027a8 <prvCopyDataToQueue+0x84>)
  402768:	4798      	blx	r3
  40276a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40276c:	425b      	negs	r3, r3
  40276e:	68e2      	ldr	r2, [r4, #12]
  402770:	441a      	add	r2, r3
  402772:	60e2      	str	r2, [r4, #12]
  402774:	6821      	ldr	r1, [r4, #0]
  402776:	428a      	cmp	r2, r1
  402778:	d202      	bcs.n	402780 <prvCopyDataToQueue+0x5c>
  40277a:	6862      	ldr	r2, [r4, #4]
  40277c:	4413      	add	r3, r2
  40277e:	60e3      	str	r3, [r4, #12]
  402780:	2d02      	cmp	r5, #2
  402782:	d10a      	bne.n	40279a <prvCopyDataToQueue+0x76>
  402784:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402786:	b153      	cbz	r3, 40279e <prvCopyDataToQueue+0x7a>
  402788:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40278a:	3b01      	subs	r3, #1
  40278c:	63a3      	str	r3, [r4, #56]	; 0x38
  40278e:	2000      	movs	r0, #0
  402790:	e7d5      	b.n	40273e <prvCopyDataToQueue+0x1a>
  402792:	2000      	movs	r0, #0
  402794:	e7d3      	b.n	40273e <prvCopyDataToQueue+0x1a>
  402796:	2000      	movs	r0, #0
  402798:	e7d1      	b.n	40273e <prvCopyDataToQueue+0x1a>
  40279a:	2000      	movs	r0, #0
  40279c:	e7cf      	b.n	40273e <prvCopyDataToQueue+0x1a>
  40279e:	2000      	movs	r0, #0
  4027a0:	e7cd      	b.n	40273e <prvCopyDataToQueue+0x1a>
  4027a2:	bf00      	nop
  4027a4:	00403a45 	.word	0x00403a45
  4027a8:	00406f79 	.word	0x00406f79

004027ac <prvNotifyQueueSetContainer>:
  4027ac:	b530      	push	{r4, r5, lr}
  4027ae:	b083      	sub	sp, #12
  4027b0:	9001      	str	r0, [sp, #4]
  4027b2:	6d44      	ldr	r4, [r0, #84]	; 0x54
  4027b4:	b174      	cbz	r4, 4027d4 <prvNotifyQueueSetContainer+0x28>
  4027b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4027b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4027ba:	429a      	cmp	r2, r3
  4027bc:	d315      	bcc.n	4027ea <prvNotifyQueueSetContainer+0x3e>
  4027be:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027c2:	b672      	cpsid	i
  4027c4:	f383 8811 	msr	BASEPRI, r3
  4027c8:	f3bf 8f6f 	isb	sy
  4027cc:	f3bf 8f4f 	dsb	sy
  4027d0:	b662      	cpsie	i
  4027d2:	e7fe      	b.n	4027d2 <prvNotifyQueueSetContainer+0x26>
  4027d4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027d8:	b672      	cpsid	i
  4027da:	f383 8811 	msr	BASEPRI, r3
  4027de:	f3bf 8f6f 	isb	sy
  4027e2:	f3bf 8f4f 	dsb	sy
  4027e6:	b662      	cpsie	i
  4027e8:	e7fe      	b.n	4027e8 <prvNotifyQueueSetContainer+0x3c>
  4027ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4027ec:	4293      	cmp	r3, r2
  4027ee:	d803      	bhi.n	4027f8 <prvNotifyQueueSetContainer+0x4c>
  4027f0:	2500      	movs	r5, #0
  4027f2:	4628      	mov	r0, r5
  4027f4:	b003      	add	sp, #12
  4027f6:	bd30      	pop	{r4, r5, pc}
  4027f8:	460a      	mov	r2, r1
  4027fa:	a901      	add	r1, sp, #4
  4027fc:	4620      	mov	r0, r4
  4027fe:	4b0b      	ldr	r3, [pc, #44]	; (40282c <prvNotifyQueueSetContainer+0x80>)
  402800:	4798      	blx	r3
  402802:	4605      	mov	r5, r0
  402804:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402806:	f1b3 3fff 	cmp.w	r3, #4294967295
  40280a:	d10a      	bne.n	402822 <prvNotifyQueueSetContainer+0x76>
  40280c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40280e:	2b00      	cmp	r3, #0
  402810:	d0ef      	beq.n	4027f2 <prvNotifyQueueSetContainer+0x46>
  402812:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402816:	4b06      	ldr	r3, [pc, #24]	; (402830 <prvNotifyQueueSetContainer+0x84>)
  402818:	4798      	blx	r3
  40281a:	2800      	cmp	r0, #0
  40281c:	bf18      	it	ne
  40281e:	2501      	movne	r5, #1
  402820:	e7e7      	b.n	4027f2 <prvNotifyQueueSetContainer+0x46>
  402822:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402824:	3301      	adds	r3, #1
  402826:	64a3      	str	r3, [r4, #72]	; 0x48
  402828:	e7e3      	b.n	4027f2 <prvNotifyQueueSetContainer+0x46>
  40282a:	bf00      	nop
  40282c:	00402725 	.word	0x00402725
  402830:	00403819 	.word	0x00403819

00402834 <prvCopyDataFromQueue>:
  402834:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402836:	b172      	cbz	r2, 402856 <prvCopyDataFromQueue+0x22>
  402838:	b510      	push	{r4, lr}
  40283a:	4603      	mov	r3, r0
  40283c:	68c4      	ldr	r4, [r0, #12]
  40283e:	4414      	add	r4, r2
  402840:	60c4      	str	r4, [r0, #12]
  402842:	6840      	ldr	r0, [r0, #4]
  402844:	4284      	cmp	r4, r0
  402846:	d301      	bcc.n	40284c <prvCopyDataFromQueue+0x18>
  402848:	6818      	ldr	r0, [r3, #0]
  40284a:	60d8      	str	r0, [r3, #12]
  40284c:	4608      	mov	r0, r1
  40284e:	68d9      	ldr	r1, [r3, #12]
  402850:	4b01      	ldr	r3, [pc, #4]	; (402858 <prvCopyDataFromQueue+0x24>)
  402852:	4798      	blx	r3
  402854:	bd10      	pop	{r4, pc}
  402856:	4770      	bx	lr
  402858:	00406f79 	.word	0x00406f79

0040285c <prvUnlockQueue>:
  40285c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40285e:	4604      	mov	r4, r0
  402860:	4b22      	ldr	r3, [pc, #136]	; (4028ec <prvUnlockQueue+0x90>)
  402862:	4798      	blx	r3
  402864:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402866:	2b00      	cmp	r3, #0
  402868:	dd1b      	ble.n	4028a2 <prvUnlockQueue+0x46>
  40286a:	4d21      	ldr	r5, [pc, #132]	; (4028f0 <prvUnlockQueue+0x94>)
  40286c:	4f21      	ldr	r7, [pc, #132]	; (4028f4 <prvUnlockQueue+0x98>)
  40286e:	4e22      	ldr	r6, [pc, #136]	; (4028f8 <prvUnlockQueue+0x9c>)
  402870:	e00b      	b.n	40288a <prvUnlockQueue+0x2e>
  402872:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402874:	b1ab      	cbz	r3, 4028a2 <prvUnlockQueue+0x46>
  402876:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40287a:	47b0      	blx	r6
  40287c:	b978      	cbnz	r0, 40289e <prvUnlockQueue+0x42>
  40287e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402880:	3b01      	subs	r3, #1
  402882:	64a3      	str	r3, [r4, #72]	; 0x48
  402884:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402886:	2b00      	cmp	r3, #0
  402888:	dd0b      	ble.n	4028a2 <prvUnlockQueue+0x46>
  40288a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40288c:	2b00      	cmp	r3, #0
  40288e:	d0f0      	beq.n	402872 <prvUnlockQueue+0x16>
  402890:	2100      	movs	r1, #0
  402892:	4620      	mov	r0, r4
  402894:	47a8      	blx	r5
  402896:	2801      	cmp	r0, #1
  402898:	d1f1      	bne.n	40287e <prvUnlockQueue+0x22>
  40289a:	47b8      	blx	r7
  40289c:	e7ef      	b.n	40287e <prvUnlockQueue+0x22>
  40289e:	47b8      	blx	r7
  4028a0:	e7ed      	b.n	40287e <prvUnlockQueue+0x22>
  4028a2:	f04f 33ff 	mov.w	r3, #4294967295
  4028a6:	64a3      	str	r3, [r4, #72]	; 0x48
  4028a8:	4b14      	ldr	r3, [pc, #80]	; (4028fc <prvUnlockQueue+0xa0>)
  4028aa:	4798      	blx	r3
  4028ac:	4b0f      	ldr	r3, [pc, #60]	; (4028ec <prvUnlockQueue+0x90>)
  4028ae:	4798      	blx	r3
  4028b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4028b2:	2b00      	cmp	r3, #0
  4028b4:	dd14      	ble.n	4028e0 <prvUnlockQueue+0x84>
  4028b6:	6923      	ldr	r3, [r4, #16]
  4028b8:	b193      	cbz	r3, 4028e0 <prvUnlockQueue+0x84>
  4028ba:	f104 0610 	add.w	r6, r4, #16
  4028be:	4d0e      	ldr	r5, [pc, #56]	; (4028f8 <prvUnlockQueue+0x9c>)
  4028c0:	4f0c      	ldr	r7, [pc, #48]	; (4028f4 <prvUnlockQueue+0x98>)
  4028c2:	e007      	b.n	4028d4 <prvUnlockQueue+0x78>
  4028c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4028c6:	3b01      	subs	r3, #1
  4028c8:	6463      	str	r3, [r4, #68]	; 0x44
  4028ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4028cc:	2b00      	cmp	r3, #0
  4028ce:	dd07      	ble.n	4028e0 <prvUnlockQueue+0x84>
  4028d0:	6923      	ldr	r3, [r4, #16]
  4028d2:	b12b      	cbz	r3, 4028e0 <prvUnlockQueue+0x84>
  4028d4:	4630      	mov	r0, r6
  4028d6:	47a8      	blx	r5
  4028d8:	2800      	cmp	r0, #0
  4028da:	d0f3      	beq.n	4028c4 <prvUnlockQueue+0x68>
  4028dc:	47b8      	blx	r7
  4028de:	e7f1      	b.n	4028c4 <prvUnlockQueue+0x68>
  4028e0:	f04f 33ff 	mov.w	r3, #4294967295
  4028e4:	6463      	str	r3, [r4, #68]	; 0x44
  4028e6:	4b05      	ldr	r3, [pc, #20]	; (4028fc <prvUnlockQueue+0xa0>)
  4028e8:	4798      	blx	r3
  4028ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4028ec:	0040243d 	.word	0x0040243d
  4028f0:	004027ad 	.word	0x004027ad
  4028f4:	00403975 	.word	0x00403975
  4028f8:	00403819 	.word	0x00403819
  4028fc:	00402489 	.word	0x00402489

00402900 <xQueueGenericReset>:
  402900:	b538      	push	{r3, r4, r5, lr}
  402902:	b308      	cbz	r0, 402948 <xQueueGenericReset+0x48>
  402904:	4604      	mov	r4, r0
  402906:	460d      	mov	r5, r1
  402908:	4b1d      	ldr	r3, [pc, #116]	; (402980 <xQueueGenericReset+0x80>)
  40290a:	4798      	blx	r3
  40290c:	6822      	ldr	r2, [r4, #0]
  40290e:	6c21      	ldr	r1, [r4, #64]	; 0x40
  402910:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402912:	fb03 f301 	mul.w	r3, r3, r1
  402916:	18d0      	adds	r0, r2, r3
  402918:	6060      	str	r0, [r4, #4]
  40291a:	2000      	movs	r0, #0
  40291c:	63a0      	str	r0, [r4, #56]	; 0x38
  40291e:	60a2      	str	r2, [r4, #8]
  402920:	1a5b      	subs	r3, r3, r1
  402922:	4413      	add	r3, r2
  402924:	60e3      	str	r3, [r4, #12]
  402926:	f04f 33ff 	mov.w	r3, #4294967295
  40292a:	6463      	str	r3, [r4, #68]	; 0x44
  40292c:	64a3      	str	r3, [r4, #72]	; 0x48
  40292e:	b9fd      	cbnz	r5, 402970 <xQueueGenericReset+0x70>
  402930:	6923      	ldr	r3, [r4, #16]
  402932:	b12b      	cbz	r3, 402940 <xQueueGenericReset+0x40>
  402934:	f104 0010 	add.w	r0, r4, #16
  402938:	4b12      	ldr	r3, [pc, #72]	; (402984 <xQueueGenericReset+0x84>)
  40293a:	4798      	blx	r3
  40293c:	2801      	cmp	r0, #1
  40293e:	d00e      	beq.n	40295e <xQueueGenericReset+0x5e>
  402940:	4b11      	ldr	r3, [pc, #68]	; (402988 <xQueueGenericReset+0x88>)
  402942:	4798      	blx	r3
  402944:	2001      	movs	r0, #1
  402946:	bd38      	pop	{r3, r4, r5, pc}
  402948:	f04f 0380 	mov.w	r3, #128	; 0x80
  40294c:	b672      	cpsid	i
  40294e:	f383 8811 	msr	BASEPRI, r3
  402952:	f3bf 8f6f 	isb	sy
  402956:	f3bf 8f4f 	dsb	sy
  40295a:	b662      	cpsie	i
  40295c:	e7fe      	b.n	40295c <xQueueGenericReset+0x5c>
  40295e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402962:	4b0a      	ldr	r3, [pc, #40]	; (40298c <xQueueGenericReset+0x8c>)
  402964:	601a      	str	r2, [r3, #0]
  402966:	f3bf 8f4f 	dsb	sy
  40296a:	f3bf 8f6f 	isb	sy
  40296e:	e7e7      	b.n	402940 <xQueueGenericReset+0x40>
  402970:	f104 0010 	add.w	r0, r4, #16
  402974:	4d06      	ldr	r5, [pc, #24]	; (402990 <xQueueGenericReset+0x90>)
  402976:	47a8      	blx	r5
  402978:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40297c:	47a8      	blx	r5
  40297e:	e7df      	b.n	402940 <xQueueGenericReset+0x40>
  402980:	0040243d 	.word	0x0040243d
  402984:	00403819 	.word	0x00403819
  402988:	00402489 	.word	0x00402489
  40298c:	e000ed04 	.word	0xe000ed04
  402990:	004022f1 	.word	0x004022f1

00402994 <xQueueGenericCreate>:
  402994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402996:	b950      	cbnz	r0, 4029ae <xQueueGenericCreate+0x1a>
  402998:	f04f 0380 	mov.w	r3, #128	; 0x80
  40299c:	b672      	cpsid	i
  40299e:	f383 8811 	msr	BASEPRI, r3
  4029a2:	f3bf 8f6f 	isb	sy
  4029a6:	f3bf 8f4f 	dsb	sy
  4029aa:	b662      	cpsie	i
  4029ac:	e7fe      	b.n	4029ac <xQueueGenericCreate+0x18>
  4029ae:	4606      	mov	r6, r0
  4029b0:	4617      	mov	r7, r2
  4029b2:	460d      	mov	r5, r1
  4029b4:	b189      	cbz	r1, 4029da <xQueueGenericCreate+0x46>
  4029b6:	fb01 f000 	mul.w	r0, r1, r0
  4029ba:	3059      	adds	r0, #89	; 0x59
  4029bc:	4b12      	ldr	r3, [pc, #72]	; (402a08 <xQueueGenericCreate+0x74>)
  4029be:	4798      	blx	r3
  4029c0:	4604      	mov	r4, r0
  4029c2:	b9e8      	cbnz	r0, 402a00 <xQueueGenericCreate+0x6c>
  4029c4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029c8:	b672      	cpsid	i
  4029ca:	f383 8811 	msr	BASEPRI, r3
  4029ce:	f3bf 8f6f 	isb	sy
  4029d2:	f3bf 8f4f 	dsb	sy
  4029d6:	b662      	cpsie	i
  4029d8:	e7fe      	b.n	4029d8 <xQueueGenericCreate+0x44>
  4029da:	2058      	movs	r0, #88	; 0x58
  4029dc:	4b0a      	ldr	r3, [pc, #40]	; (402a08 <xQueueGenericCreate+0x74>)
  4029de:	4798      	blx	r3
  4029e0:	4604      	mov	r4, r0
  4029e2:	2800      	cmp	r0, #0
  4029e4:	d0ee      	beq.n	4029c4 <xQueueGenericCreate+0x30>
  4029e6:	6020      	str	r0, [r4, #0]
  4029e8:	63e6      	str	r6, [r4, #60]	; 0x3c
  4029ea:	6425      	str	r5, [r4, #64]	; 0x40
  4029ec:	2101      	movs	r1, #1
  4029ee:	4620      	mov	r0, r4
  4029f0:	4b06      	ldr	r3, [pc, #24]	; (402a0c <xQueueGenericCreate+0x78>)
  4029f2:	4798      	blx	r3
  4029f4:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
  4029f8:	2300      	movs	r3, #0
  4029fa:	6563      	str	r3, [r4, #84]	; 0x54
  4029fc:	4620      	mov	r0, r4
  4029fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402a00:	f100 0358 	add.w	r3, r0, #88	; 0x58
  402a04:	6003      	str	r3, [r0, #0]
  402a06:	e7ef      	b.n	4029e8 <xQueueGenericCreate+0x54>
  402a08:	00402699 	.word	0x00402699
  402a0c:	00402901 	.word	0x00402901

00402a10 <xQueueGenericSend>:
  402a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402a14:	b085      	sub	sp, #20
  402a16:	9201      	str	r2, [sp, #4]
  402a18:	b1b8      	cbz	r0, 402a4a <xQueueGenericSend+0x3a>
  402a1a:	4604      	mov	r4, r0
  402a1c:	b301      	cbz	r1, 402a60 <xQueueGenericSend+0x50>
  402a1e:	2b02      	cmp	r3, #2
  402a20:	d02c      	beq.n	402a7c <xQueueGenericSend+0x6c>
  402a22:	461d      	mov	r5, r3
  402a24:	4688      	mov	r8, r1
  402a26:	4b66      	ldr	r3, [pc, #408]	; (402bc0 <xQueueGenericSend+0x1b0>)
  402a28:	4798      	blx	r3
  402a2a:	2800      	cmp	r0, #0
  402a2c:	d134      	bne.n	402a98 <xQueueGenericSend+0x88>
  402a2e:	9b01      	ldr	r3, [sp, #4]
  402a30:	2b00      	cmp	r3, #0
  402a32:	d038      	beq.n	402aa6 <xQueueGenericSend+0x96>
  402a34:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a38:	b672      	cpsid	i
  402a3a:	f383 8811 	msr	BASEPRI, r3
  402a3e:	f3bf 8f6f 	isb	sy
  402a42:	f3bf 8f4f 	dsb	sy
  402a46:	b662      	cpsie	i
  402a48:	e7fe      	b.n	402a48 <xQueueGenericSend+0x38>
  402a4a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a4e:	b672      	cpsid	i
  402a50:	f383 8811 	msr	BASEPRI, r3
  402a54:	f3bf 8f6f 	isb	sy
  402a58:	f3bf 8f4f 	dsb	sy
  402a5c:	b662      	cpsie	i
  402a5e:	e7fe      	b.n	402a5e <xQueueGenericSend+0x4e>
  402a60:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402a62:	2a00      	cmp	r2, #0
  402a64:	d0db      	beq.n	402a1e <xQueueGenericSend+0xe>
  402a66:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a6a:	b672      	cpsid	i
  402a6c:	f383 8811 	msr	BASEPRI, r3
  402a70:	f3bf 8f6f 	isb	sy
  402a74:	f3bf 8f4f 	dsb	sy
  402a78:	b662      	cpsie	i
  402a7a:	e7fe      	b.n	402a7a <xQueueGenericSend+0x6a>
  402a7c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  402a7e:	2a01      	cmp	r2, #1
  402a80:	d0cf      	beq.n	402a22 <xQueueGenericSend+0x12>
  402a82:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a86:	b672      	cpsid	i
  402a88:	f383 8811 	msr	BASEPRI, r3
  402a8c:	f3bf 8f6f 	isb	sy
  402a90:	f3bf 8f4f 	dsb	sy
  402a94:	b662      	cpsie	i
  402a96:	e7fe      	b.n	402a96 <xQueueGenericSend+0x86>
  402a98:	2700      	movs	r7, #0
  402a9a:	4e4a      	ldr	r6, [pc, #296]	; (402bc4 <xQueueGenericSend+0x1b4>)
  402a9c:	f8df a150 	ldr.w	sl, [pc, #336]	; 402bf0 <xQueueGenericSend+0x1e0>
  402aa0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 402bd0 <xQueueGenericSend+0x1c0>
  402aa4:	e042      	b.n	402b2c <xQueueGenericSend+0x11c>
  402aa6:	2700      	movs	r7, #0
  402aa8:	e7f7      	b.n	402a9a <xQueueGenericSend+0x8a>
  402aaa:	462a      	mov	r2, r5
  402aac:	4641      	mov	r1, r8
  402aae:	4620      	mov	r0, r4
  402ab0:	4b45      	ldr	r3, [pc, #276]	; (402bc8 <xQueueGenericSend+0x1b8>)
  402ab2:	4798      	blx	r3
  402ab4:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402ab6:	b19b      	cbz	r3, 402ae0 <xQueueGenericSend+0xd0>
  402ab8:	4629      	mov	r1, r5
  402aba:	4620      	mov	r0, r4
  402abc:	4b43      	ldr	r3, [pc, #268]	; (402bcc <xQueueGenericSend+0x1bc>)
  402abe:	4798      	blx	r3
  402ac0:	2801      	cmp	r0, #1
  402ac2:	d107      	bne.n	402ad4 <xQueueGenericSend+0xc4>
  402ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402ac8:	4b41      	ldr	r3, [pc, #260]	; (402bd0 <xQueueGenericSend+0x1c0>)
  402aca:	601a      	str	r2, [r3, #0]
  402acc:	f3bf 8f4f 	dsb	sy
  402ad0:	f3bf 8f6f 	isb	sy
  402ad4:	4b3f      	ldr	r3, [pc, #252]	; (402bd4 <xQueueGenericSend+0x1c4>)
  402ad6:	4798      	blx	r3
  402ad8:	2001      	movs	r0, #1
  402ada:	b005      	add	sp, #20
  402adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402ae0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402ae2:	b173      	cbz	r3, 402b02 <xQueueGenericSend+0xf2>
  402ae4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402ae8:	4b3b      	ldr	r3, [pc, #236]	; (402bd8 <xQueueGenericSend+0x1c8>)
  402aea:	4798      	blx	r3
  402aec:	2801      	cmp	r0, #1
  402aee:	d1f1      	bne.n	402ad4 <xQueueGenericSend+0xc4>
  402af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402af4:	4b36      	ldr	r3, [pc, #216]	; (402bd0 <xQueueGenericSend+0x1c0>)
  402af6:	601a      	str	r2, [r3, #0]
  402af8:	f3bf 8f4f 	dsb	sy
  402afc:	f3bf 8f6f 	isb	sy
  402b00:	e7e8      	b.n	402ad4 <xQueueGenericSend+0xc4>
  402b02:	2800      	cmp	r0, #0
  402b04:	d0e6      	beq.n	402ad4 <xQueueGenericSend+0xc4>
  402b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402b0a:	4b31      	ldr	r3, [pc, #196]	; (402bd0 <xQueueGenericSend+0x1c0>)
  402b0c:	601a      	str	r2, [r3, #0]
  402b0e:	f3bf 8f4f 	dsb	sy
  402b12:	f3bf 8f6f 	isb	sy
  402b16:	e7dd      	b.n	402ad4 <xQueueGenericSend+0xc4>
  402b18:	4b2e      	ldr	r3, [pc, #184]	; (402bd4 <xQueueGenericSend+0x1c4>)
  402b1a:	4798      	blx	r3
  402b1c:	2000      	movs	r0, #0
  402b1e:	e7dc      	b.n	402ada <xQueueGenericSend+0xca>
  402b20:	4620      	mov	r0, r4
  402b22:	4b2e      	ldr	r3, [pc, #184]	; (402bdc <xQueueGenericSend+0x1cc>)
  402b24:	4798      	blx	r3
  402b26:	4b2e      	ldr	r3, [pc, #184]	; (402be0 <xQueueGenericSend+0x1d0>)
  402b28:	4798      	blx	r3
  402b2a:	2701      	movs	r7, #1
  402b2c:	47b0      	blx	r6
  402b2e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402b30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402b32:	429a      	cmp	r2, r3
  402b34:	d3b9      	bcc.n	402aaa <xQueueGenericSend+0x9a>
  402b36:	2d02      	cmp	r5, #2
  402b38:	d0b7      	beq.n	402aaa <xQueueGenericSend+0x9a>
  402b3a:	9b01      	ldr	r3, [sp, #4]
  402b3c:	2b00      	cmp	r3, #0
  402b3e:	d0eb      	beq.n	402b18 <xQueueGenericSend+0x108>
  402b40:	b90f      	cbnz	r7, 402b46 <xQueueGenericSend+0x136>
  402b42:	a802      	add	r0, sp, #8
  402b44:	47d0      	blx	sl
  402b46:	4b23      	ldr	r3, [pc, #140]	; (402bd4 <xQueueGenericSend+0x1c4>)
  402b48:	4798      	blx	r3
  402b4a:	4b26      	ldr	r3, [pc, #152]	; (402be4 <xQueueGenericSend+0x1d4>)
  402b4c:	4798      	blx	r3
  402b4e:	47b0      	blx	r6
  402b50:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402b52:	f1b3 3fff 	cmp.w	r3, #4294967295
  402b56:	d101      	bne.n	402b5c <xQueueGenericSend+0x14c>
  402b58:	2300      	movs	r3, #0
  402b5a:	6463      	str	r3, [r4, #68]	; 0x44
  402b5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402b62:	d101      	bne.n	402b68 <xQueueGenericSend+0x158>
  402b64:	2300      	movs	r3, #0
  402b66:	64a3      	str	r3, [r4, #72]	; 0x48
  402b68:	4b1a      	ldr	r3, [pc, #104]	; (402bd4 <xQueueGenericSend+0x1c4>)
  402b6a:	4798      	blx	r3
  402b6c:	a901      	add	r1, sp, #4
  402b6e:	a802      	add	r0, sp, #8
  402b70:	4b1d      	ldr	r3, [pc, #116]	; (402be8 <xQueueGenericSend+0x1d8>)
  402b72:	4798      	blx	r3
  402b74:	b9e0      	cbnz	r0, 402bb0 <xQueueGenericSend+0x1a0>
  402b76:	47b0      	blx	r6
  402b78:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  402b7c:	6be7      	ldr	r7, [r4, #60]	; 0x3c
  402b7e:	4b15      	ldr	r3, [pc, #84]	; (402bd4 <xQueueGenericSend+0x1c4>)
  402b80:	4798      	blx	r3
  402b82:	45bb      	cmp	fp, r7
  402b84:	d1cc      	bne.n	402b20 <xQueueGenericSend+0x110>
  402b86:	9901      	ldr	r1, [sp, #4]
  402b88:	f104 0010 	add.w	r0, r4, #16
  402b8c:	4b17      	ldr	r3, [pc, #92]	; (402bec <xQueueGenericSend+0x1dc>)
  402b8e:	4798      	blx	r3
  402b90:	4620      	mov	r0, r4
  402b92:	4b12      	ldr	r3, [pc, #72]	; (402bdc <xQueueGenericSend+0x1cc>)
  402b94:	4798      	blx	r3
  402b96:	4b12      	ldr	r3, [pc, #72]	; (402be0 <xQueueGenericSend+0x1d0>)
  402b98:	4798      	blx	r3
  402b9a:	2800      	cmp	r0, #0
  402b9c:	d1c5      	bne.n	402b2a <xQueueGenericSend+0x11a>
  402b9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402ba2:	f8c9 3000 	str.w	r3, [r9]
  402ba6:	f3bf 8f4f 	dsb	sy
  402baa:	f3bf 8f6f 	isb	sy
  402bae:	e7bc      	b.n	402b2a <xQueueGenericSend+0x11a>
  402bb0:	4620      	mov	r0, r4
  402bb2:	4b0a      	ldr	r3, [pc, #40]	; (402bdc <xQueueGenericSend+0x1cc>)
  402bb4:	4798      	blx	r3
  402bb6:	4b0a      	ldr	r3, [pc, #40]	; (402be0 <xQueueGenericSend+0x1d0>)
  402bb8:	4798      	blx	r3
  402bba:	2000      	movs	r0, #0
  402bbc:	e78d      	b.n	402ada <xQueueGenericSend+0xca>
  402bbe:	bf00      	nop
  402bc0:	00403981 	.word	0x00403981
  402bc4:	0040243d 	.word	0x0040243d
  402bc8:	00402725 	.word	0x00402725
  402bcc:	004027ad 	.word	0x004027ad
  402bd0:	e000ed04 	.word	0xe000ed04
  402bd4:	00402489 	.word	0x00402489
  402bd8:	00403819 	.word	0x00403819
  402bdc:	0040285d 	.word	0x0040285d
  402be0:	004033fd 	.word	0x004033fd
  402be4:	00403295 	.word	0x00403295
  402be8:	004038e1 	.word	0x004038e1
  402bec:	00403715 	.word	0x00403715
  402bf0:	004038b1 	.word	0x004038b1

00402bf4 <xQueueGenericSendFromISR>:
  402bf4:	2800      	cmp	r0, #0
  402bf6:	d036      	beq.n	402c66 <xQueueGenericSendFromISR+0x72>
  402bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402bfc:	4604      	mov	r4, r0
  402bfe:	2900      	cmp	r1, #0
  402c00:	d03c      	beq.n	402c7c <xQueueGenericSendFromISR+0x88>
  402c02:	2b02      	cmp	r3, #2
  402c04:	d048      	beq.n	402c98 <xQueueGenericSendFromISR+0xa4>
  402c06:	461e      	mov	r6, r3
  402c08:	4615      	mov	r5, r2
  402c0a:	4688      	mov	r8, r1
  402c0c:	4b35      	ldr	r3, [pc, #212]	; (402ce4 <xQueueGenericSendFromISR+0xf0>)
  402c0e:	4798      	blx	r3
  402c10:	f3ef 8711 	mrs	r7, BASEPRI
  402c14:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c18:	b672      	cpsid	i
  402c1a:	f383 8811 	msr	BASEPRI, r3
  402c1e:	f3bf 8f6f 	isb	sy
  402c22:	f3bf 8f4f 	dsb	sy
  402c26:	b662      	cpsie	i
  402c28:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402c2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402c2c:	429a      	cmp	r2, r3
  402c2e:	d301      	bcc.n	402c34 <xQueueGenericSendFromISR+0x40>
  402c30:	2e02      	cmp	r6, #2
  402c32:	d14f      	bne.n	402cd4 <xQueueGenericSendFromISR+0xe0>
  402c34:	4632      	mov	r2, r6
  402c36:	4641      	mov	r1, r8
  402c38:	4620      	mov	r0, r4
  402c3a:	4b2b      	ldr	r3, [pc, #172]	; (402ce8 <xQueueGenericSendFromISR+0xf4>)
  402c3c:	4798      	blx	r3
  402c3e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402c40:	f1b3 3fff 	cmp.w	r3, #4294967295
  402c44:	d141      	bne.n	402cca <xQueueGenericSendFromISR+0xd6>
  402c46:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402c48:	2b00      	cmp	r3, #0
  402c4a:	d033      	beq.n	402cb4 <xQueueGenericSendFromISR+0xc0>
  402c4c:	4631      	mov	r1, r6
  402c4e:	4620      	mov	r0, r4
  402c50:	4b26      	ldr	r3, [pc, #152]	; (402cec <xQueueGenericSendFromISR+0xf8>)
  402c52:	4798      	blx	r3
  402c54:	2d00      	cmp	r5, #0
  402c56:	d03f      	beq.n	402cd8 <xQueueGenericSendFromISR+0xe4>
  402c58:	2801      	cmp	r0, #1
  402c5a:	d13d      	bne.n	402cd8 <xQueueGenericSendFromISR+0xe4>
  402c5c:	6028      	str	r0, [r5, #0]
  402c5e:	f387 8811 	msr	BASEPRI, r7
  402c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402c66:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c6a:	b672      	cpsid	i
  402c6c:	f383 8811 	msr	BASEPRI, r3
  402c70:	f3bf 8f6f 	isb	sy
  402c74:	f3bf 8f4f 	dsb	sy
  402c78:	b662      	cpsie	i
  402c7a:	e7fe      	b.n	402c7a <xQueueGenericSendFromISR+0x86>
  402c7c:	6c00      	ldr	r0, [r0, #64]	; 0x40
  402c7e:	2800      	cmp	r0, #0
  402c80:	d0bf      	beq.n	402c02 <xQueueGenericSendFromISR+0xe>
  402c82:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c86:	b672      	cpsid	i
  402c88:	f383 8811 	msr	BASEPRI, r3
  402c8c:	f3bf 8f6f 	isb	sy
  402c90:	f3bf 8f4f 	dsb	sy
  402c94:	b662      	cpsie	i
  402c96:	e7fe      	b.n	402c96 <xQueueGenericSendFromISR+0xa2>
  402c98:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  402c9a:	2801      	cmp	r0, #1
  402c9c:	d0b3      	beq.n	402c06 <xQueueGenericSendFromISR+0x12>
  402c9e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ca2:	b672      	cpsid	i
  402ca4:	f383 8811 	msr	BASEPRI, r3
  402ca8:	f3bf 8f6f 	isb	sy
  402cac:	f3bf 8f4f 	dsb	sy
  402cb0:	b662      	cpsie	i
  402cb2:	e7fe      	b.n	402cb2 <xQueueGenericSendFromISR+0xbe>
  402cb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402cb6:	b18b      	cbz	r3, 402cdc <xQueueGenericSendFromISR+0xe8>
  402cb8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402cbc:	4b0c      	ldr	r3, [pc, #48]	; (402cf0 <xQueueGenericSendFromISR+0xfc>)
  402cbe:	4798      	blx	r3
  402cc0:	b175      	cbz	r5, 402ce0 <xQueueGenericSendFromISR+0xec>
  402cc2:	b168      	cbz	r0, 402ce0 <xQueueGenericSendFromISR+0xec>
  402cc4:	2001      	movs	r0, #1
  402cc6:	6028      	str	r0, [r5, #0]
  402cc8:	e7c9      	b.n	402c5e <xQueueGenericSendFromISR+0x6a>
  402cca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402ccc:	3301      	adds	r3, #1
  402cce:	64a3      	str	r3, [r4, #72]	; 0x48
  402cd0:	2001      	movs	r0, #1
  402cd2:	e7c4      	b.n	402c5e <xQueueGenericSendFromISR+0x6a>
  402cd4:	2000      	movs	r0, #0
  402cd6:	e7c2      	b.n	402c5e <xQueueGenericSendFromISR+0x6a>
  402cd8:	2001      	movs	r0, #1
  402cda:	e7c0      	b.n	402c5e <xQueueGenericSendFromISR+0x6a>
  402cdc:	2001      	movs	r0, #1
  402cde:	e7be      	b.n	402c5e <xQueueGenericSendFromISR+0x6a>
  402ce0:	2001      	movs	r0, #1
  402ce2:	e7bc      	b.n	402c5e <xQueueGenericSendFromISR+0x6a>
  402ce4:	00402635 	.word	0x00402635
  402ce8:	00402725 	.word	0x00402725
  402cec:	004027ad 	.word	0x004027ad
  402cf0:	00403819 	.word	0x00403819

00402cf4 <xQueueGenericReceive>:
  402cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402cf8:	b084      	sub	sp, #16
  402cfa:	9201      	str	r2, [sp, #4]
  402cfc:	b198      	cbz	r0, 402d26 <xQueueGenericReceive+0x32>
  402cfe:	4604      	mov	r4, r0
  402d00:	b1e1      	cbz	r1, 402d3c <xQueueGenericReceive+0x48>
  402d02:	4698      	mov	r8, r3
  402d04:	460f      	mov	r7, r1
  402d06:	4b61      	ldr	r3, [pc, #388]	; (402e8c <xQueueGenericReceive+0x198>)
  402d08:	4798      	blx	r3
  402d0a:	bb28      	cbnz	r0, 402d58 <xQueueGenericReceive+0x64>
  402d0c:	9b01      	ldr	r3, [sp, #4]
  402d0e:	b353      	cbz	r3, 402d66 <xQueueGenericReceive+0x72>
  402d10:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d14:	b672      	cpsid	i
  402d16:	f383 8811 	msr	BASEPRI, r3
  402d1a:	f3bf 8f6f 	isb	sy
  402d1e:	f3bf 8f4f 	dsb	sy
  402d22:	b662      	cpsie	i
  402d24:	e7fe      	b.n	402d24 <xQueueGenericReceive+0x30>
  402d26:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d2a:	b672      	cpsid	i
  402d2c:	f383 8811 	msr	BASEPRI, r3
  402d30:	f3bf 8f6f 	isb	sy
  402d34:	f3bf 8f4f 	dsb	sy
  402d38:	b662      	cpsie	i
  402d3a:	e7fe      	b.n	402d3a <xQueueGenericReceive+0x46>
  402d3c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402d3e:	2a00      	cmp	r2, #0
  402d40:	d0df      	beq.n	402d02 <xQueueGenericReceive+0xe>
  402d42:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d46:	b672      	cpsid	i
  402d48:	f383 8811 	msr	BASEPRI, r3
  402d4c:	f3bf 8f6f 	isb	sy
  402d50:	f3bf 8f4f 	dsb	sy
  402d54:	b662      	cpsie	i
  402d56:	e7fe      	b.n	402d56 <xQueueGenericReceive+0x62>
  402d58:	2600      	movs	r6, #0
  402d5a:	4d4d      	ldr	r5, [pc, #308]	; (402e90 <xQueueGenericReceive+0x19c>)
  402d5c:	f8df a160 	ldr.w	sl, [pc, #352]	; 402ec0 <xQueueGenericReceive+0x1cc>
  402d60:	f8df 913c 	ldr.w	r9, [pc, #316]	; 402ea0 <xQueueGenericReceive+0x1ac>
  402d64:	e04b      	b.n	402dfe <xQueueGenericReceive+0x10a>
  402d66:	2600      	movs	r6, #0
  402d68:	e7f7      	b.n	402d5a <xQueueGenericReceive+0x66>
  402d6a:	68e5      	ldr	r5, [r4, #12]
  402d6c:	4639      	mov	r1, r7
  402d6e:	4620      	mov	r0, r4
  402d70:	4b48      	ldr	r3, [pc, #288]	; (402e94 <xQueueGenericReceive+0x1a0>)
  402d72:	4798      	blx	r3
  402d74:	f1b8 0f00 	cmp.w	r8, #0
  402d78:	d11d      	bne.n	402db6 <xQueueGenericReceive+0xc2>
  402d7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402d7c:	3b01      	subs	r3, #1
  402d7e:	63a3      	str	r3, [r4, #56]	; 0x38
  402d80:	6823      	ldr	r3, [r4, #0]
  402d82:	b913      	cbnz	r3, 402d8a <xQueueGenericReceive+0x96>
  402d84:	4b44      	ldr	r3, [pc, #272]	; (402e98 <xQueueGenericReceive+0x1a4>)
  402d86:	4798      	blx	r3
  402d88:	6060      	str	r0, [r4, #4]
  402d8a:	6923      	ldr	r3, [r4, #16]
  402d8c:	b16b      	cbz	r3, 402daa <xQueueGenericReceive+0xb6>
  402d8e:	f104 0010 	add.w	r0, r4, #16
  402d92:	4b42      	ldr	r3, [pc, #264]	; (402e9c <xQueueGenericReceive+0x1a8>)
  402d94:	4798      	blx	r3
  402d96:	2801      	cmp	r0, #1
  402d98:	d107      	bne.n	402daa <xQueueGenericReceive+0xb6>
  402d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402d9e:	4b40      	ldr	r3, [pc, #256]	; (402ea0 <xQueueGenericReceive+0x1ac>)
  402da0:	601a      	str	r2, [r3, #0]
  402da2:	f3bf 8f4f 	dsb	sy
  402da6:	f3bf 8f6f 	isb	sy
  402daa:	4b3e      	ldr	r3, [pc, #248]	; (402ea4 <xQueueGenericReceive+0x1b0>)
  402dac:	4798      	blx	r3
  402dae:	2001      	movs	r0, #1
  402db0:	b004      	add	sp, #16
  402db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402db6:	60e5      	str	r5, [r4, #12]
  402db8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402dba:	2b00      	cmp	r3, #0
  402dbc:	d0f5      	beq.n	402daa <xQueueGenericReceive+0xb6>
  402dbe:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402dc2:	4b36      	ldr	r3, [pc, #216]	; (402e9c <xQueueGenericReceive+0x1a8>)
  402dc4:	4798      	blx	r3
  402dc6:	2800      	cmp	r0, #0
  402dc8:	d0ef      	beq.n	402daa <xQueueGenericReceive+0xb6>
  402dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402dce:	4b34      	ldr	r3, [pc, #208]	; (402ea0 <xQueueGenericReceive+0x1ac>)
  402dd0:	601a      	str	r2, [r3, #0]
  402dd2:	f3bf 8f4f 	dsb	sy
  402dd6:	f3bf 8f6f 	isb	sy
  402dda:	e7e6      	b.n	402daa <xQueueGenericReceive+0xb6>
  402ddc:	4b31      	ldr	r3, [pc, #196]	; (402ea4 <xQueueGenericReceive+0x1b0>)
  402dde:	4798      	blx	r3
  402de0:	2000      	movs	r0, #0
  402de2:	e7e5      	b.n	402db0 <xQueueGenericReceive+0xbc>
  402de4:	47a8      	blx	r5
  402de6:	6860      	ldr	r0, [r4, #4]
  402de8:	4b2f      	ldr	r3, [pc, #188]	; (402ea8 <xQueueGenericReceive+0x1b4>)
  402dea:	4798      	blx	r3
  402dec:	4b2d      	ldr	r3, [pc, #180]	; (402ea4 <xQueueGenericReceive+0x1b0>)
  402dee:	4798      	blx	r3
  402df0:	e030      	b.n	402e54 <xQueueGenericReceive+0x160>
  402df2:	4620      	mov	r0, r4
  402df4:	4b2d      	ldr	r3, [pc, #180]	; (402eac <xQueueGenericReceive+0x1b8>)
  402df6:	4798      	blx	r3
  402df8:	4b2d      	ldr	r3, [pc, #180]	; (402eb0 <xQueueGenericReceive+0x1bc>)
  402dfa:	4798      	blx	r3
  402dfc:	2601      	movs	r6, #1
  402dfe:	47a8      	blx	r5
  402e00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402e02:	2b00      	cmp	r3, #0
  402e04:	d1b1      	bne.n	402d6a <xQueueGenericReceive+0x76>
  402e06:	9b01      	ldr	r3, [sp, #4]
  402e08:	2b00      	cmp	r3, #0
  402e0a:	d0e7      	beq.n	402ddc <xQueueGenericReceive+0xe8>
  402e0c:	b90e      	cbnz	r6, 402e12 <xQueueGenericReceive+0x11e>
  402e0e:	a802      	add	r0, sp, #8
  402e10:	47d0      	blx	sl
  402e12:	4b24      	ldr	r3, [pc, #144]	; (402ea4 <xQueueGenericReceive+0x1b0>)
  402e14:	4798      	blx	r3
  402e16:	4b27      	ldr	r3, [pc, #156]	; (402eb4 <xQueueGenericReceive+0x1c0>)
  402e18:	4798      	blx	r3
  402e1a:	47a8      	blx	r5
  402e1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402e22:	d101      	bne.n	402e28 <xQueueGenericReceive+0x134>
  402e24:	2300      	movs	r3, #0
  402e26:	6463      	str	r3, [r4, #68]	; 0x44
  402e28:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
  402e2e:	d101      	bne.n	402e34 <xQueueGenericReceive+0x140>
  402e30:	2300      	movs	r3, #0
  402e32:	64a3      	str	r3, [r4, #72]	; 0x48
  402e34:	4b1b      	ldr	r3, [pc, #108]	; (402ea4 <xQueueGenericReceive+0x1b0>)
  402e36:	4798      	blx	r3
  402e38:	a901      	add	r1, sp, #4
  402e3a:	a802      	add	r0, sp, #8
  402e3c:	4b1e      	ldr	r3, [pc, #120]	; (402eb8 <xQueueGenericReceive+0x1c4>)
  402e3e:	4798      	blx	r3
  402e40:	b9e8      	cbnz	r0, 402e7e <xQueueGenericReceive+0x18a>
  402e42:	47a8      	blx	r5
  402e44:	6ba6      	ldr	r6, [r4, #56]	; 0x38
  402e46:	4b17      	ldr	r3, [pc, #92]	; (402ea4 <xQueueGenericReceive+0x1b0>)
  402e48:	4798      	blx	r3
  402e4a:	2e00      	cmp	r6, #0
  402e4c:	d1d1      	bne.n	402df2 <xQueueGenericReceive+0xfe>
  402e4e:	6823      	ldr	r3, [r4, #0]
  402e50:	2b00      	cmp	r3, #0
  402e52:	d0c7      	beq.n	402de4 <xQueueGenericReceive+0xf0>
  402e54:	9901      	ldr	r1, [sp, #4]
  402e56:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402e5a:	4b18      	ldr	r3, [pc, #96]	; (402ebc <xQueueGenericReceive+0x1c8>)
  402e5c:	4798      	blx	r3
  402e5e:	4620      	mov	r0, r4
  402e60:	4b12      	ldr	r3, [pc, #72]	; (402eac <xQueueGenericReceive+0x1b8>)
  402e62:	4798      	blx	r3
  402e64:	4b12      	ldr	r3, [pc, #72]	; (402eb0 <xQueueGenericReceive+0x1bc>)
  402e66:	4798      	blx	r3
  402e68:	2800      	cmp	r0, #0
  402e6a:	d1c7      	bne.n	402dfc <xQueueGenericReceive+0x108>
  402e6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402e70:	f8c9 3000 	str.w	r3, [r9]
  402e74:	f3bf 8f4f 	dsb	sy
  402e78:	f3bf 8f6f 	isb	sy
  402e7c:	e7be      	b.n	402dfc <xQueueGenericReceive+0x108>
  402e7e:	4620      	mov	r0, r4
  402e80:	4b0a      	ldr	r3, [pc, #40]	; (402eac <xQueueGenericReceive+0x1b8>)
  402e82:	4798      	blx	r3
  402e84:	4b0a      	ldr	r3, [pc, #40]	; (402eb0 <xQueueGenericReceive+0x1bc>)
  402e86:	4798      	blx	r3
  402e88:	2000      	movs	r0, #0
  402e8a:	e791      	b.n	402db0 <xQueueGenericReceive+0xbc>
  402e8c:	00403981 	.word	0x00403981
  402e90:	0040243d 	.word	0x0040243d
  402e94:	00402835 	.word	0x00402835
  402e98:	00403b01 	.word	0x00403b01
  402e9c:	00403819 	.word	0x00403819
  402ea0:	e000ed04 	.word	0xe000ed04
  402ea4:	00402489 	.word	0x00402489
  402ea8:	004039a1 	.word	0x004039a1
  402eac:	0040285d 	.word	0x0040285d
  402eb0:	004033fd 	.word	0x004033fd
  402eb4:	00403295 	.word	0x00403295
  402eb8:	004038e1 	.word	0x004038e1
  402ebc:	00403715 	.word	0x00403715
  402ec0:	004038b1 	.word	0x004038b1

00402ec4 <vQueueAddToRegistry>:
  402ec4:	b410      	push	{r4}
  402ec6:	4b0b      	ldr	r3, [pc, #44]	; (402ef4 <vQueueAddToRegistry+0x30>)
  402ec8:	681b      	ldr	r3, [r3, #0]
  402eca:	b153      	cbz	r3, 402ee2 <vQueueAddToRegistry+0x1e>
  402ecc:	2301      	movs	r3, #1
  402ece:	4c09      	ldr	r4, [pc, #36]	; (402ef4 <vQueueAddToRegistry+0x30>)
  402ed0:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  402ed4:	b132      	cbz	r2, 402ee4 <vQueueAddToRegistry+0x20>
  402ed6:	3301      	adds	r3, #1
  402ed8:	2b08      	cmp	r3, #8
  402eda:	d1f9      	bne.n	402ed0 <vQueueAddToRegistry+0xc>
  402edc:	f85d 4b04 	ldr.w	r4, [sp], #4
  402ee0:	4770      	bx	lr
  402ee2:	2300      	movs	r3, #0
  402ee4:	4a03      	ldr	r2, [pc, #12]	; (402ef4 <vQueueAddToRegistry+0x30>)
  402ee6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
  402eea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  402eee:	6058      	str	r0, [r3, #4]
  402ef0:	e7f4      	b.n	402edc <vQueueAddToRegistry+0x18>
  402ef2:	bf00      	nop
  402ef4:	2040ca04 	.word	0x2040ca04

00402ef8 <vQueueWaitForMessageRestricted>:
  402ef8:	b570      	push	{r4, r5, r6, lr}
  402efa:	4604      	mov	r4, r0
  402efc:	460d      	mov	r5, r1
  402efe:	4616      	mov	r6, r2
  402f00:	4b0f      	ldr	r3, [pc, #60]	; (402f40 <vQueueWaitForMessageRestricted+0x48>)
  402f02:	4798      	blx	r3
  402f04:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402f06:	f1b3 3fff 	cmp.w	r3, #4294967295
  402f0a:	d00b      	beq.n	402f24 <vQueueWaitForMessageRestricted+0x2c>
  402f0c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402f12:	d00a      	beq.n	402f2a <vQueueWaitForMessageRestricted+0x32>
  402f14:	4b0b      	ldr	r3, [pc, #44]	; (402f44 <vQueueWaitForMessageRestricted+0x4c>)
  402f16:	4798      	blx	r3
  402f18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402f1a:	b14b      	cbz	r3, 402f30 <vQueueWaitForMessageRestricted+0x38>
  402f1c:	4620      	mov	r0, r4
  402f1e:	4b0a      	ldr	r3, [pc, #40]	; (402f48 <vQueueWaitForMessageRestricted+0x50>)
  402f20:	4798      	blx	r3
  402f22:	bd70      	pop	{r4, r5, r6, pc}
  402f24:	2300      	movs	r3, #0
  402f26:	6463      	str	r3, [r4, #68]	; 0x44
  402f28:	e7f0      	b.n	402f0c <vQueueWaitForMessageRestricted+0x14>
  402f2a:	2300      	movs	r3, #0
  402f2c:	64a3      	str	r3, [r4, #72]	; 0x48
  402f2e:	e7f1      	b.n	402f14 <vQueueWaitForMessageRestricted+0x1c>
  402f30:	4632      	mov	r2, r6
  402f32:	4629      	mov	r1, r5
  402f34:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402f38:	4b04      	ldr	r3, [pc, #16]	; (402f4c <vQueueWaitForMessageRestricted+0x54>)
  402f3a:	4798      	blx	r3
  402f3c:	e7ee      	b.n	402f1c <vQueueWaitForMessageRestricted+0x24>
  402f3e:	bf00      	nop
  402f40:	0040243d 	.word	0x0040243d
  402f44:	00402489 	.word	0x00402489
  402f48:	0040285d 	.word	0x0040285d
  402f4c:	00403799 	.word	0x00403799

00402f50 <prvResetNextTaskUnblockTime>:
  402f50:	4b08      	ldr	r3, [pc, #32]	; (402f74 <prvResetNextTaskUnblockTime+0x24>)
  402f52:	681b      	ldr	r3, [r3, #0]
  402f54:	681b      	ldr	r3, [r3, #0]
  402f56:	b13b      	cbz	r3, 402f68 <prvResetNextTaskUnblockTime+0x18>
  402f58:	4b06      	ldr	r3, [pc, #24]	; (402f74 <prvResetNextTaskUnblockTime+0x24>)
  402f5a:	681b      	ldr	r3, [r3, #0]
  402f5c:	68db      	ldr	r3, [r3, #12]
  402f5e:	68db      	ldr	r3, [r3, #12]
  402f60:	685a      	ldr	r2, [r3, #4]
  402f62:	4b05      	ldr	r3, [pc, #20]	; (402f78 <prvResetNextTaskUnblockTime+0x28>)
  402f64:	601a      	str	r2, [r3, #0]
  402f66:	4770      	bx	lr
  402f68:	f04f 32ff 	mov.w	r2, #4294967295
  402f6c:	4b02      	ldr	r3, [pc, #8]	; (402f78 <prvResetNextTaskUnblockTime+0x28>)
  402f6e:	601a      	str	r2, [r3, #0]
  402f70:	4770      	bx	lr
  402f72:	bf00      	nop
  402f74:	2040c808 	.word	0x2040c808
  402f78:	2040c8b4 	.word	0x2040c8b4

00402f7c <prvAddCurrentTaskToDelayedList>:
  402f7c:	b510      	push	{r4, lr}
  402f7e:	4b0f      	ldr	r3, [pc, #60]	; (402fbc <prvAddCurrentTaskToDelayedList+0x40>)
  402f80:	681b      	ldr	r3, [r3, #0]
  402f82:	6058      	str	r0, [r3, #4]
  402f84:	4b0e      	ldr	r3, [pc, #56]	; (402fc0 <prvAddCurrentTaskToDelayedList+0x44>)
  402f86:	681b      	ldr	r3, [r3, #0]
  402f88:	4298      	cmp	r0, r3
  402f8a:	d30e      	bcc.n	402faa <prvAddCurrentTaskToDelayedList+0x2e>
  402f8c:	4604      	mov	r4, r0
  402f8e:	4b0d      	ldr	r3, [pc, #52]	; (402fc4 <prvAddCurrentTaskToDelayedList+0x48>)
  402f90:	6818      	ldr	r0, [r3, #0]
  402f92:	4b0a      	ldr	r3, [pc, #40]	; (402fbc <prvAddCurrentTaskToDelayedList+0x40>)
  402f94:	6819      	ldr	r1, [r3, #0]
  402f96:	3104      	adds	r1, #4
  402f98:	4b0b      	ldr	r3, [pc, #44]	; (402fc8 <prvAddCurrentTaskToDelayedList+0x4c>)
  402f9a:	4798      	blx	r3
  402f9c:	4b0b      	ldr	r3, [pc, #44]	; (402fcc <prvAddCurrentTaskToDelayedList+0x50>)
  402f9e:	681b      	ldr	r3, [r3, #0]
  402fa0:	429c      	cmp	r4, r3
  402fa2:	d201      	bcs.n	402fa8 <prvAddCurrentTaskToDelayedList+0x2c>
  402fa4:	4b09      	ldr	r3, [pc, #36]	; (402fcc <prvAddCurrentTaskToDelayedList+0x50>)
  402fa6:	601c      	str	r4, [r3, #0]
  402fa8:	bd10      	pop	{r4, pc}
  402faa:	4b09      	ldr	r3, [pc, #36]	; (402fd0 <prvAddCurrentTaskToDelayedList+0x54>)
  402fac:	6818      	ldr	r0, [r3, #0]
  402fae:	4b03      	ldr	r3, [pc, #12]	; (402fbc <prvAddCurrentTaskToDelayedList+0x40>)
  402fb0:	6819      	ldr	r1, [r3, #0]
  402fb2:	3104      	adds	r1, #4
  402fb4:	4b04      	ldr	r3, [pc, #16]	; (402fc8 <prvAddCurrentTaskToDelayedList+0x4c>)
  402fb6:	4798      	blx	r3
  402fb8:	bd10      	pop	{r4, pc}
  402fba:	bf00      	nop
  402fbc:	2040c804 	.word	0x2040c804
  402fc0:	2040c8fc 	.word	0x2040c8fc
  402fc4:	2040c808 	.word	0x2040c808
  402fc8:	00402325 	.word	0x00402325
  402fcc:	2040c8b4 	.word	0x2040c8b4
  402fd0:	2040c80c 	.word	0x2040c80c

00402fd4 <xTaskGenericCreate>:
  402fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402fd8:	b083      	sub	sp, #12
  402fda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  402fdc:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  402fe0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  402fe2:	b160      	cbz	r0, 402ffe <xTaskGenericCreate+0x2a>
  402fe4:	2d04      	cmp	r5, #4
  402fe6:	d915      	bls.n	403014 <xTaskGenericCreate+0x40>
  402fe8:	f04f 0380 	mov.w	r3, #128	; 0x80
  402fec:	b672      	cpsid	i
  402fee:	f383 8811 	msr	BASEPRI, r3
  402ff2:	f3bf 8f6f 	isb	sy
  402ff6:	f3bf 8f4f 	dsb	sy
  402ffa:	b662      	cpsie	i
  402ffc:	e7fe      	b.n	402ffc <xTaskGenericCreate+0x28>
  402ffe:	f04f 0380 	mov.w	r3, #128	; 0x80
  403002:	b672      	cpsid	i
  403004:	f383 8811 	msr	BASEPRI, r3
  403008:	f3bf 8f6f 	isb	sy
  40300c:	f3bf 8f4f 	dsb	sy
  403010:	b662      	cpsie	i
  403012:	e7fe      	b.n	403012 <xTaskGenericCreate+0x3e>
  403014:	9001      	str	r0, [sp, #4]
  403016:	4698      	mov	r8, r3
  403018:	4691      	mov	r9, r2
  40301a:	460f      	mov	r7, r1
  40301c:	b936      	cbnz	r6, 40302c <xTaskGenericCreate+0x58>
  40301e:	0090      	lsls	r0, r2, #2
  403020:	4b62      	ldr	r3, [pc, #392]	; (4031ac <xTaskGenericCreate+0x1d8>)
  403022:	4798      	blx	r3
  403024:	4606      	mov	r6, r0
  403026:	2800      	cmp	r0, #0
  403028:	f000 809e 	beq.w	403168 <xTaskGenericCreate+0x194>
  40302c:	2058      	movs	r0, #88	; 0x58
  40302e:	4b5f      	ldr	r3, [pc, #380]	; (4031ac <xTaskGenericCreate+0x1d8>)
  403030:	4798      	blx	r3
  403032:	4604      	mov	r4, r0
  403034:	2800      	cmp	r0, #0
  403036:	f000 8094 	beq.w	403162 <xTaskGenericCreate+0x18e>
  40303a:	6306      	str	r6, [r0, #48]	; 0x30
  40303c:	ea4f 0289 	mov.w	r2, r9, lsl #2
  403040:	21a5      	movs	r1, #165	; 0xa5
  403042:	4630      	mov	r0, r6
  403044:	4b5a      	ldr	r3, [pc, #360]	; (4031b0 <xTaskGenericCreate+0x1dc>)
  403046:	4798      	blx	r3
  403048:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  40304c:	444e      	add	r6, r9
  40304e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  403050:	eb03 0386 	add.w	r3, r3, r6, lsl #2
  403054:	f023 0607 	bic.w	r6, r3, #7
  403058:	783b      	ldrb	r3, [r7, #0]
  40305a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  40305e:	783b      	ldrb	r3, [r7, #0]
  403060:	2b00      	cmp	r3, #0
  403062:	f040 8084 	bne.w	40316e <xTaskGenericCreate+0x19a>
  403066:	2700      	movs	r7, #0
  403068:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  40306c:	62e5      	str	r5, [r4, #44]	; 0x2c
  40306e:	64a5      	str	r5, [r4, #72]	; 0x48
  403070:	64e7      	str	r7, [r4, #76]	; 0x4c
  403072:	f104 0904 	add.w	r9, r4, #4
  403076:	4648      	mov	r0, r9
  403078:	f8df b184 	ldr.w	fp, [pc, #388]	; 403200 <xTaskGenericCreate+0x22c>
  40307c:	47d8      	blx	fp
  40307e:	f104 0018 	add.w	r0, r4, #24
  403082:	47d8      	blx	fp
  403084:	6124      	str	r4, [r4, #16]
  403086:	f1c5 0305 	rsb	r3, r5, #5
  40308a:	61a3      	str	r3, [r4, #24]
  40308c:	6264      	str	r4, [r4, #36]	; 0x24
  40308e:	6527      	str	r7, [r4, #80]	; 0x50
  403090:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
  403094:	4642      	mov	r2, r8
  403096:	9901      	ldr	r1, [sp, #4]
  403098:	4630      	mov	r0, r6
  40309a:	4b46      	ldr	r3, [pc, #280]	; (4031b4 <xTaskGenericCreate+0x1e0>)
  40309c:	4798      	blx	r3
  40309e:	6020      	str	r0, [r4, #0]
  4030a0:	f1ba 0f00 	cmp.w	sl, #0
  4030a4:	d001      	beq.n	4030aa <xTaskGenericCreate+0xd6>
  4030a6:	f8ca 4000 	str.w	r4, [sl]
  4030aa:	4b43      	ldr	r3, [pc, #268]	; (4031b8 <xTaskGenericCreate+0x1e4>)
  4030ac:	4798      	blx	r3
  4030ae:	4a43      	ldr	r2, [pc, #268]	; (4031bc <xTaskGenericCreate+0x1e8>)
  4030b0:	6813      	ldr	r3, [r2, #0]
  4030b2:	3301      	adds	r3, #1
  4030b4:	6013      	str	r3, [r2, #0]
  4030b6:	4b42      	ldr	r3, [pc, #264]	; (4031c0 <xTaskGenericCreate+0x1ec>)
  4030b8:	681b      	ldr	r3, [r3, #0]
  4030ba:	2b00      	cmp	r3, #0
  4030bc:	d166      	bne.n	40318c <xTaskGenericCreate+0x1b8>
  4030be:	4b40      	ldr	r3, [pc, #256]	; (4031c0 <xTaskGenericCreate+0x1ec>)
  4030c0:	601c      	str	r4, [r3, #0]
  4030c2:	6813      	ldr	r3, [r2, #0]
  4030c4:	2b01      	cmp	r3, #1
  4030c6:	d121      	bne.n	40310c <xTaskGenericCreate+0x138>
  4030c8:	4f3e      	ldr	r7, [pc, #248]	; (4031c4 <xTaskGenericCreate+0x1f0>)
  4030ca:	4638      	mov	r0, r7
  4030cc:	4e3e      	ldr	r6, [pc, #248]	; (4031c8 <xTaskGenericCreate+0x1f4>)
  4030ce:	47b0      	blx	r6
  4030d0:	f107 0014 	add.w	r0, r7, #20
  4030d4:	47b0      	blx	r6
  4030d6:	f107 0028 	add.w	r0, r7, #40	; 0x28
  4030da:	47b0      	blx	r6
  4030dc:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  4030e0:	47b0      	blx	r6
  4030e2:	f107 0050 	add.w	r0, r7, #80	; 0x50
  4030e6:	47b0      	blx	r6
  4030e8:	f8df 8118 	ldr.w	r8, [pc, #280]	; 403204 <xTaskGenericCreate+0x230>
  4030ec:	4640      	mov	r0, r8
  4030ee:	47b0      	blx	r6
  4030f0:	4f36      	ldr	r7, [pc, #216]	; (4031cc <xTaskGenericCreate+0x1f8>)
  4030f2:	4638      	mov	r0, r7
  4030f4:	47b0      	blx	r6
  4030f6:	4836      	ldr	r0, [pc, #216]	; (4031d0 <xTaskGenericCreate+0x1fc>)
  4030f8:	47b0      	blx	r6
  4030fa:	4836      	ldr	r0, [pc, #216]	; (4031d4 <xTaskGenericCreate+0x200>)
  4030fc:	47b0      	blx	r6
  4030fe:	4836      	ldr	r0, [pc, #216]	; (4031d8 <xTaskGenericCreate+0x204>)
  403100:	47b0      	blx	r6
  403102:	4b36      	ldr	r3, [pc, #216]	; (4031dc <xTaskGenericCreate+0x208>)
  403104:	f8c3 8000 	str.w	r8, [r3]
  403108:	4b35      	ldr	r3, [pc, #212]	; (4031e0 <xTaskGenericCreate+0x20c>)
  40310a:	601f      	str	r7, [r3, #0]
  40310c:	4a35      	ldr	r2, [pc, #212]	; (4031e4 <xTaskGenericCreate+0x210>)
  40310e:	6813      	ldr	r3, [r2, #0]
  403110:	3301      	adds	r3, #1
  403112:	6013      	str	r3, [r2, #0]
  403114:	6423      	str	r3, [r4, #64]	; 0x40
  403116:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  403118:	4a33      	ldr	r2, [pc, #204]	; (4031e8 <xTaskGenericCreate+0x214>)
  40311a:	6811      	ldr	r1, [r2, #0]
  40311c:	2301      	movs	r3, #1
  40311e:	4083      	lsls	r3, r0
  403120:	430b      	orrs	r3, r1
  403122:	6013      	str	r3, [r2, #0]
  403124:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403128:	4649      	mov	r1, r9
  40312a:	4b26      	ldr	r3, [pc, #152]	; (4031c4 <xTaskGenericCreate+0x1f0>)
  40312c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403130:	4b2e      	ldr	r3, [pc, #184]	; (4031ec <xTaskGenericCreate+0x218>)
  403132:	4798      	blx	r3
  403134:	4b2e      	ldr	r3, [pc, #184]	; (4031f0 <xTaskGenericCreate+0x21c>)
  403136:	4798      	blx	r3
  403138:	4b2e      	ldr	r3, [pc, #184]	; (4031f4 <xTaskGenericCreate+0x220>)
  40313a:	681b      	ldr	r3, [r3, #0]
  40313c:	2b00      	cmp	r3, #0
  40313e:	d031      	beq.n	4031a4 <xTaskGenericCreate+0x1d0>
  403140:	4b1f      	ldr	r3, [pc, #124]	; (4031c0 <xTaskGenericCreate+0x1ec>)
  403142:	681b      	ldr	r3, [r3, #0]
  403144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403146:	429d      	cmp	r5, r3
  403148:	d92e      	bls.n	4031a8 <xTaskGenericCreate+0x1d4>
  40314a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40314e:	4b2a      	ldr	r3, [pc, #168]	; (4031f8 <xTaskGenericCreate+0x224>)
  403150:	601a      	str	r2, [r3, #0]
  403152:	f3bf 8f4f 	dsb	sy
  403156:	f3bf 8f6f 	isb	sy
  40315a:	2001      	movs	r0, #1
  40315c:	b003      	add	sp, #12
  40315e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403162:	4630      	mov	r0, r6
  403164:	4b25      	ldr	r3, [pc, #148]	; (4031fc <xTaskGenericCreate+0x228>)
  403166:	4798      	blx	r3
  403168:	f04f 30ff 	mov.w	r0, #4294967295
  40316c:	e7f6      	b.n	40315c <xTaskGenericCreate+0x188>
  40316e:	463b      	mov	r3, r7
  403170:	f104 0234 	add.w	r2, r4, #52	; 0x34
  403174:	3709      	adds	r7, #9
  403176:	7859      	ldrb	r1, [r3, #1]
  403178:	f802 1f01 	strb.w	r1, [r2, #1]!
  40317c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  403180:	2900      	cmp	r1, #0
  403182:	f43f af70 	beq.w	403066 <xTaskGenericCreate+0x92>
  403186:	42bb      	cmp	r3, r7
  403188:	d1f5      	bne.n	403176 <xTaskGenericCreate+0x1a2>
  40318a:	e76c      	b.n	403066 <xTaskGenericCreate+0x92>
  40318c:	4b19      	ldr	r3, [pc, #100]	; (4031f4 <xTaskGenericCreate+0x220>)
  40318e:	681b      	ldr	r3, [r3, #0]
  403190:	2b00      	cmp	r3, #0
  403192:	d1bb      	bne.n	40310c <xTaskGenericCreate+0x138>
  403194:	4b0a      	ldr	r3, [pc, #40]	; (4031c0 <xTaskGenericCreate+0x1ec>)
  403196:	681b      	ldr	r3, [r3, #0]
  403198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40319a:	429d      	cmp	r5, r3
  40319c:	d3b6      	bcc.n	40310c <xTaskGenericCreate+0x138>
  40319e:	4b08      	ldr	r3, [pc, #32]	; (4031c0 <xTaskGenericCreate+0x1ec>)
  4031a0:	601c      	str	r4, [r3, #0]
  4031a2:	e7b3      	b.n	40310c <xTaskGenericCreate+0x138>
  4031a4:	2001      	movs	r0, #1
  4031a6:	e7d9      	b.n	40315c <xTaskGenericCreate+0x188>
  4031a8:	2001      	movs	r0, #1
  4031aa:	e7d7      	b.n	40315c <xTaskGenericCreate+0x188>
  4031ac:	00402699 	.word	0x00402699
  4031b0:	004070ad 	.word	0x004070ad
  4031b4:	004023f1 	.word	0x004023f1
  4031b8:	0040243d 	.word	0x0040243d
  4031bc:	2040c874 	.word	0x2040c874
  4031c0:	2040c804 	.word	0x2040c804
  4031c4:	2040c810 	.word	0x2040c810
  4031c8:	004022f1 	.word	0x004022f1
  4031cc:	2040c8a0 	.word	0x2040c8a0
  4031d0:	2040c8bc 	.word	0x2040c8bc
  4031d4:	2040c8e8 	.word	0x2040c8e8
  4031d8:	2040c8d4 	.word	0x2040c8d4
  4031dc:	2040c808 	.word	0x2040c808
  4031e0:	2040c80c 	.word	0x2040c80c
  4031e4:	2040c880 	.word	0x2040c880
  4031e8:	2040c888 	.word	0x2040c888
  4031ec:	0040230d 	.word	0x0040230d
  4031f0:	00402489 	.word	0x00402489
  4031f4:	2040c8d0 	.word	0x2040c8d0
  4031f8:	e000ed04 	.word	0xe000ed04
  4031fc:	00402709 	.word	0x00402709
  403200:	00402307 	.word	0x00402307
  403204:	2040c88c 	.word	0x2040c88c

00403208 <vTaskStartScheduler>:
  403208:	b510      	push	{r4, lr}
  40320a:	b084      	sub	sp, #16
  40320c:	2300      	movs	r3, #0
  40320e:	9303      	str	r3, [sp, #12]
  403210:	9302      	str	r3, [sp, #8]
  403212:	9301      	str	r3, [sp, #4]
  403214:	9300      	str	r3, [sp, #0]
  403216:	2282      	movs	r2, #130	; 0x82
  403218:	4916      	ldr	r1, [pc, #88]	; (403274 <vTaskStartScheduler+0x6c>)
  40321a:	4817      	ldr	r0, [pc, #92]	; (403278 <vTaskStartScheduler+0x70>)
  40321c:	4c17      	ldr	r4, [pc, #92]	; (40327c <vTaskStartScheduler+0x74>)
  40321e:	47a0      	blx	r4
  403220:	2801      	cmp	r0, #1
  403222:	d00b      	beq.n	40323c <vTaskStartScheduler+0x34>
  403224:	bb20      	cbnz	r0, 403270 <vTaskStartScheduler+0x68>
  403226:	f04f 0380 	mov.w	r3, #128	; 0x80
  40322a:	b672      	cpsid	i
  40322c:	f383 8811 	msr	BASEPRI, r3
  403230:	f3bf 8f6f 	isb	sy
  403234:	f3bf 8f4f 	dsb	sy
  403238:	b662      	cpsie	i
  40323a:	e7fe      	b.n	40323a <vTaskStartScheduler+0x32>
  40323c:	4b10      	ldr	r3, [pc, #64]	; (403280 <vTaskStartScheduler+0x78>)
  40323e:	4798      	blx	r3
  403240:	2801      	cmp	r0, #1
  403242:	d1ef      	bne.n	403224 <vTaskStartScheduler+0x1c>
  403244:	f04f 0380 	mov.w	r3, #128	; 0x80
  403248:	b672      	cpsid	i
  40324a:	f383 8811 	msr	BASEPRI, r3
  40324e:	f3bf 8f6f 	isb	sy
  403252:	f3bf 8f4f 	dsb	sy
  403256:	b662      	cpsie	i
  403258:	f04f 32ff 	mov.w	r2, #4294967295
  40325c:	4b09      	ldr	r3, [pc, #36]	; (403284 <vTaskStartScheduler+0x7c>)
  40325e:	601a      	str	r2, [r3, #0]
  403260:	2201      	movs	r2, #1
  403262:	4b09      	ldr	r3, [pc, #36]	; (403288 <vTaskStartScheduler+0x80>)
  403264:	601a      	str	r2, [r3, #0]
  403266:	2200      	movs	r2, #0
  403268:	4b08      	ldr	r3, [pc, #32]	; (40328c <vTaskStartScheduler+0x84>)
  40326a:	601a      	str	r2, [r3, #0]
  40326c:	4b08      	ldr	r3, [pc, #32]	; (403290 <vTaskStartScheduler+0x88>)
  40326e:	4798      	blx	r3
  403270:	b004      	add	sp, #16
  403272:	bd10      	pop	{r4, pc}
  403274:	00409978 	.word	0x00409978
  403278:	004035ad 	.word	0x004035ad
  40327c:	00402fd5 	.word	0x00402fd5
  403280:	00403bed 	.word	0x00403bed
  403284:	2040c8b4 	.word	0x2040c8b4
  403288:	2040c8d0 	.word	0x2040c8d0
  40328c:	2040c8fc 	.word	0x2040c8fc
  403290:	00402571 	.word	0x00402571

00403294 <vTaskSuspendAll>:
  403294:	4a02      	ldr	r2, [pc, #8]	; (4032a0 <vTaskSuspendAll+0xc>)
  403296:	6813      	ldr	r3, [r2, #0]
  403298:	3301      	adds	r3, #1
  40329a:	6013      	str	r3, [r2, #0]
  40329c:	4770      	bx	lr
  40329e:	bf00      	nop
  4032a0:	2040c87c 	.word	0x2040c87c

004032a4 <xTaskGetTickCount>:
  4032a4:	4b01      	ldr	r3, [pc, #4]	; (4032ac <xTaskGetTickCount+0x8>)
  4032a6:	6818      	ldr	r0, [r3, #0]
  4032a8:	4770      	bx	lr
  4032aa:	bf00      	nop
  4032ac:	2040c8fc 	.word	0x2040c8fc

004032b0 <xTaskIncrementTick>:
  4032b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4032b4:	4b42      	ldr	r3, [pc, #264]	; (4033c0 <xTaskIncrementTick+0x110>)
  4032b6:	681b      	ldr	r3, [r3, #0]
  4032b8:	2b00      	cmp	r3, #0
  4032ba:	d178      	bne.n	4033ae <xTaskIncrementTick+0xfe>
  4032bc:	4b41      	ldr	r3, [pc, #260]	; (4033c4 <xTaskIncrementTick+0x114>)
  4032be:	681a      	ldr	r2, [r3, #0]
  4032c0:	3201      	adds	r2, #1
  4032c2:	601a      	str	r2, [r3, #0]
  4032c4:	681e      	ldr	r6, [r3, #0]
  4032c6:	b9d6      	cbnz	r6, 4032fe <xTaskIncrementTick+0x4e>
  4032c8:	4b3f      	ldr	r3, [pc, #252]	; (4033c8 <xTaskIncrementTick+0x118>)
  4032ca:	681b      	ldr	r3, [r3, #0]
  4032cc:	681b      	ldr	r3, [r3, #0]
  4032ce:	b153      	cbz	r3, 4032e6 <xTaskIncrementTick+0x36>
  4032d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4032d4:	b672      	cpsid	i
  4032d6:	f383 8811 	msr	BASEPRI, r3
  4032da:	f3bf 8f6f 	isb	sy
  4032de:	f3bf 8f4f 	dsb	sy
  4032e2:	b662      	cpsie	i
  4032e4:	e7fe      	b.n	4032e4 <xTaskIncrementTick+0x34>
  4032e6:	4a38      	ldr	r2, [pc, #224]	; (4033c8 <xTaskIncrementTick+0x118>)
  4032e8:	6811      	ldr	r1, [r2, #0]
  4032ea:	4b38      	ldr	r3, [pc, #224]	; (4033cc <xTaskIncrementTick+0x11c>)
  4032ec:	6818      	ldr	r0, [r3, #0]
  4032ee:	6010      	str	r0, [r2, #0]
  4032f0:	6019      	str	r1, [r3, #0]
  4032f2:	4a37      	ldr	r2, [pc, #220]	; (4033d0 <xTaskIncrementTick+0x120>)
  4032f4:	6813      	ldr	r3, [r2, #0]
  4032f6:	3301      	adds	r3, #1
  4032f8:	6013      	str	r3, [r2, #0]
  4032fa:	4b36      	ldr	r3, [pc, #216]	; (4033d4 <xTaskIncrementTick+0x124>)
  4032fc:	4798      	blx	r3
  4032fe:	4b36      	ldr	r3, [pc, #216]	; (4033d8 <xTaskIncrementTick+0x128>)
  403300:	681b      	ldr	r3, [r3, #0]
  403302:	429e      	cmp	r6, r3
  403304:	d218      	bcs.n	403338 <xTaskIncrementTick+0x88>
  403306:	2400      	movs	r4, #0
  403308:	4b34      	ldr	r3, [pc, #208]	; (4033dc <xTaskIncrementTick+0x12c>)
  40330a:	681b      	ldr	r3, [r3, #0]
  40330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40330e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  403312:	4a33      	ldr	r2, [pc, #204]	; (4033e0 <xTaskIncrementTick+0x130>)
  403314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403318:	2b02      	cmp	r3, #2
  40331a:	bf28      	it	cs
  40331c:	2401      	movcs	r4, #1
  40331e:	4b31      	ldr	r3, [pc, #196]	; (4033e4 <xTaskIncrementTick+0x134>)
  403320:	681b      	ldr	r3, [r3, #0]
  403322:	b90b      	cbnz	r3, 403328 <xTaskIncrementTick+0x78>
  403324:	4b30      	ldr	r3, [pc, #192]	; (4033e8 <xTaskIncrementTick+0x138>)
  403326:	4798      	blx	r3
  403328:	4b30      	ldr	r3, [pc, #192]	; (4033ec <xTaskIncrementTick+0x13c>)
  40332a:	681b      	ldr	r3, [r3, #0]
  40332c:	2b00      	cmp	r3, #0
  40332e:	bf0c      	ite	eq
  403330:	4620      	moveq	r0, r4
  403332:	2001      	movne	r0, #1
  403334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403338:	2400      	movs	r4, #0
  40333a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4033c8 <xTaskIncrementTick+0x118>
  40333e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4033f8 <xTaskIncrementTick+0x148>
  403342:	4f2b      	ldr	r7, [pc, #172]	; (4033f0 <xTaskIncrementTick+0x140>)
  403344:	e01f      	b.n	403386 <xTaskIncrementTick+0xd6>
  403346:	f04f 32ff 	mov.w	r2, #4294967295
  40334a:	4b23      	ldr	r3, [pc, #140]	; (4033d8 <xTaskIncrementTick+0x128>)
  40334c:	601a      	str	r2, [r3, #0]
  40334e:	e7db      	b.n	403308 <xTaskIncrementTick+0x58>
  403350:	4a21      	ldr	r2, [pc, #132]	; (4033d8 <xTaskIncrementTick+0x128>)
  403352:	6013      	str	r3, [r2, #0]
  403354:	e7d8      	b.n	403308 <xTaskIncrementTick+0x58>
  403356:	f105 0018 	add.w	r0, r5, #24
  40335a:	47c0      	blx	r8
  40335c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  40335e:	683a      	ldr	r2, [r7, #0]
  403360:	2301      	movs	r3, #1
  403362:	4083      	lsls	r3, r0
  403364:	4313      	orrs	r3, r2
  403366:	603b      	str	r3, [r7, #0]
  403368:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40336c:	4651      	mov	r1, sl
  40336e:	4b1c      	ldr	r3, [pc, #112]	; (4033e0 <xTaskIncrementTick+0x130>)
  403370:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403374:	4b1f      	ldr	r3, [pc, #124]	; (4033f4 <xTaskIncrementTick+0x144>)
  403376:	4798      	blx	r3
  403378:	4b18      	ldr	r3, [pc, #96]	; (4033dc <xTaskIncrementTick+0x12c>)
  40337a:	681b      	ldr	r3, [r3, #0]
  40337c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  40337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403380:	429a      	cmp	r2, r3
  403382:	bf28      	it	cs
  403384:	2401      	movcs	r4, #1
  403386:	f8d9 3000 	ldr.w	r3, [r9]
  40338a:	681b      	ldr	r3, [r3, #0]
  40338c:	2b00      	cmp	r3, #0
  40338e:	d0da      	beq.n	403346 <xTaskIncrementTick+0x96>
  403390:	f8d9 3000 	ldr.w	r3, [r9]
  403394:	68db      	ldr	r3, [r3, #12]
  403396:	68dd      	ldr	r5, [r3, #12]
  403398:	686b      	ldr	r3, [r5, #4]
  40339a:	429e      	cmp	r6, r3
  40339c:	d3d8      	bcc.n	403350 <xTaskIncrementTick+0xa0>
  40339e:	f105 0a04 	add.w	sl, r5, #4
  4033a2:	4650      	mov	r0, sl
  4033a4:	47c0      	blx	r8
  4033a6:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4033a8:	2b00      	cmp	r3, #0
  4033aa:	d1d4      	bne.n	403356 <xTaskIncrementTick+0xa6>
  4033ac:	e7d6      	b.n	40335c <xTaskIncrementTick+0xac>
  4033ae:	4a0d      	ldr	r2, [pc, #52]	; (4033e4 <xTaskIncrementTick+0x134>)
  4033b0:	6813      	ldr	r3, [r2, #0]
  4033b2:	3301      	adds	r3, #1
  4033b4:	6013      	str	r3, [r2, #0]
  4033b6:	4b0c      	ldr	r3, [pc, #48]	; (4033e8 <xTaskIncrementTick+0x138>)
  4033b8:	4798      	blx	r3
  4033ba:	2400      	movs	r4, #0
  4033bc:	e7b4      	b.n	403328 <xTaskIncrementTick+0x78>
  4033be:	bf00      	nop
  4033c0:	2040c87c 	.word	0x2040c87c
  4033c4:	2040c8fc 	.word	0x2040c8fc
  4033c8:	2040c808 	.word	0x2040c808
  4033cc:	2040c80c 	.word	0x2040c80c
  4033d0:	2040c8b8 	.word	0x2040c8b8
  4033d4:	00402f51 	.word	0x00402f51
  4033d8:	2040c8b4 	.word	0x2040c8b4
  4033dc:	2040c804 	.word	0x2040c804
  4033e0:	2040c810 	.word	0x2040c810
  4033e4:	2040c878 	.word	0x2040c878
  4033e8:	004041a1 	.word	0x004041a1
  4033ec:	2040c900 	.word	0x2040c900
  4033f0:	2040c888 	.word	0x2040c888
  4033f4:	0040230d 	.word	0x0040230d
  4033f8:	00402359 	.word	0x00402359

004033fc <xTaskResumeAll>:
  4033fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403400:	4b38      	ldr	r3, [pc, #224]	; (4034e4 <xTaskResumeAll+0xe8>)
  403402:	681b      	ldr	r3, [r3, #0]
  403404:	b953      	cbnz	r3, 40341c <xTaskResumeAll+0x20>
  403406:	f04f 0380 	mov.w	r3, #128	; 0x80
  40340a:	b672      	cpsid	i
  40340c:	f383 8811 	msr	BASEPRI, r3
  403410:	f3bf 8f6f 	isb	sy
  403414:	f3bf 8f4f 	dsb	sy
  403418:	b662      	cpsie	i
  40341a:	e7fe      	b.n	40341a <xTaskResumeAll+0x1e>
  40341c:	4b32      	ldr	r3, [pc, #200]	; (4034e8 <xTaskResumeAll+0xec>)
  40341e:	4798      	blx	r3
  403420:	4b30      	ldr	r3, [pc, #192]	; (4034e4 <xTaskResumeAll+0xe8>)
  403422:	681a      	ldr	r2, [r3, #0]
  403424:	3a01      	subs	r2, #1
  403426:	601a      	str	r2, [r3, #0]
  403428:	681b      	ldr	r3, [r3, #0]
  40342a:	2b00      	cmp	r3, #0
  40342c:	d155      	bne.n	4034da <xTaskResumeAll+0xde>
  40342e:	4b2f      	ldr	r3, [pc, #188]	; (4034ec <xTaskResumeAll+0xf0>)
  403430:	681b      	ldr	r3, [r3, #0]
  403432:	2b00      	cmp	r3, #0
  403434:	d132      	bne.n	40349c <xTaskResumeAll+0xa0>
  403436:	2400      	movs	r4, #0
  403438:	4b2d      	ldr	r3, [pc, #180]	; (4034f0 <xTaskResumeAll+0xf4>)
  40343a:	4798      	blx	r3
  40343c:	4620      	mov	r0, r4
  40343e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403442:	68fb      	ldr	r3, [r7, #12]
  403444:	68dc      	ldr	r4, [r3, #12]
  403446:	f104 0018 	add.w	r0, r4, #24
  40344a:	47b0      	blx	r6
  40344c:	f104 0804 	add.w	r8, r4, #4
  403450:	4640      	mov	r0, r8
  403452:	47b0      	blx	r6
  403454:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  403456:	682a      	ldr	r2, [r5, #0]
  403458:	2301      	movs	r3, #1
  40345a:	4083      	lsls	r3, r0
  40345c:	4313      	orrs	r3, r2
  40345e:	602b      	str	r3, [r5, #0]
  403460:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403464:	4641      	mov	r1, r8
  403466:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  40346a:	4b22      	ldr	r3, [pc, #136]	; (4034f4 <xTaskResumeAll+0xf8>)
  40346c:	4798      	blx	r3
  40346e:	4b22      	ldr	r3, [pc, #136]	; (4034f8 <xTaskResumeAll+0xfc>)
  403470:	681b      	ldr	r3, [r3, #0]
  403472:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  403474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  403476:	429a      	cmp	r2, r3
  403478:	d20c      	bcs.n	403494 <xTaskResumeAll+0x98>
  40347a:	683b      	ldr	r3, [r7, #0]
  40347c:	2b00      	cmp	r3, #0
  40347e:	d1e0      	bne.n	403442 <xTaskResumeAll+0x46>
  403480:	4b1e      	ldr	r3, [pc, #120]	; (4034fc <xTaskResumeAll+0x100>)
  403482:	681b      	ldr	r3, [r3, #0]
  403484:	b1db      	cbz	r3, 4034be <xTaskResumeAll+0xc2>
  403486:	4b1d      	ldr	r3, [pc, #116]	; (4034fc <xTaskResumeAll+0x100>)
  403488:	681b      	ldr	r3, [r3, #0]
  40348a:	b1c3      	cbz	r3, 4034be <xTaskResumeAll+0xc2>
  40348c:	4e1c      	ldr	r6, [pc, #112]	; (403500 <xTaskResumeAll+0x104>)
  40348e:	4d1d      	ldr	r5, [pc, #116]	; (403504 <xTaskResumeAll+0x108>)
  403490:	4c1a      	ldr	r4, [pc, #104]	; (4034fc <xTaskResumeAll+0x100>)
  403492:	e00e      	b.n	4034b2 <xTaskResumeAll+0xb6>
  403494:	2201      	movs	r2, #1
  403496:	4b1b      	ldr	r3, [pc, #108]	; (403504 <xTaskResumeAll+0x108>)
  403498:	601a      	str	r2, [r3, #0]
  40349a:	e7ee      	b.n	40347a <xTaskResumeAll+0x7e>
  40349c:	4f1a      	ldr	r7, [pc, #104]	; (403508 <xTaskResumeAll+0x10c>)
  40349e:	4e1b      	ldr	r6, [pc, #108]	; (40350c <xTaskResumeAll+0x110>)
  4034a0:	4d1b      	ldr	r5, [pc, #108]	; (403510 <xTaskResumeAll+0x114>)
  4034a2:	f8df 9074 	ldr.w	r9, [pc, #116]	; 403518 <xTaskResumeAll+0x11c>
  4034a6:	e7e8      	b.n	40347a <xTaskResumeAll+0x7e>
  4034a8:	6823      	ldr	r3, [r4, #0]
  4034aa:	3b01      	subs	r3, #1
  4034ac:	6023      	str	r3, [r4, #0]
  4034ae:	6823      	ldr	r3, [r4, #0]
  4034b0:	b12b      	cbz	r3, 4034be <xTaskResumeAll+0xc2>
  4034b2:	47b0      	blx	r6
  4034b4:	2800      	cmp	r0, #0
  4034b6:	d0f7      	beq.n	4034a8 <xTaskResumeAll+0xac>
  4034b8:	2301      	movs	r3, #1
  4034ba:	602b      	str	r3, [r5, #0]
  4034bc:	e7f4      	b.n	4034a8 <xTaskResumeAll+0xac>
  4034be:	4b11      	ldr	r3, [pc, #68]	; (403504 <xTaskResumeAll+0x108>)
  4034c0:	681b      	ldr	r3, [r3, #0]
  4034c2:	2b01      	cmp	r3, #1
  4034c4:	d10b      	bne.n	4034de <xTaskResumeAll+0xe2>
  4034c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4034ca:	4b12      	ldr	r3, [pc, #72]	; (403514 <xTaskResumeAll+0x118>)
  4034cc:	601a      	str	r2, [r3, #0]
  4034ce:	f3bf 8f4f 	dsb	sy
  4034d2:	f3bf 8f6f 	isb	sy
  4034d6:	2401      	movs	r4, #1
  4034d8:	e7ae      	b.n	403438 <xTaskResumeAll+0x3c>
  4034da:	2400      	movs	r4, #0
  4034dc:	e7ac      	b.n	403438 <xTaskResumeAll+0x3c>
  4034de:	2400      	movs	r4, #0
  4034e0:	e7aa      	b.n	403438 <xTaskResumeAll+0x3c>
  4034e2:	bf00      	nop
  4034e4:	2040c87c 	.word	0x2040c87c
  4034e8:	0040243d 	.word	0x0040243d
  4034ec:	2040c874 	.word	0x2040c874
  4034f0:	00402489 	.word	0x00402489
  4034f4:	0040230d 	.word	0x0040230d
  4034f8:	2040c804 	.word	0x2040c804
  4034fc:	2040c878 	.word	0x2040c878
  403500:	004032b1 	.word	0x004032b1
  403504:	2040c900 	.word	0x2040c900
  403508:	2040c8bc 	.word	0x2040c8bc
  40350c:	00402359 	.word	0x00402359
  403510:	2040c888 	.word	0x2040c888
  403514:	e000ed04 	.word	0xe000ed04
  403518:	2040c810 	.word	0x2040c810

0040351c <vTaskDelay>:
  40351c:	b510      	push	{r4, lr}
  40351e:	2800      	cmp	r0, #0
  403520:	d029      	beq.n	403576 <vTaskDelay+0x5a>
  403522:	4604      	mov	r4, r0
  403524:	4b18      	ldr	r3, [pc, #96]	; (403588 <vTaskDelay+0x6c>)
  403526:	681b      	ldr	r3, [r3, #0]
  403528:	b153      	cbz	r3, 403540 <vTaskDelay+0x24>
  40352a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40352e:	b672      	cpsid	i
  403530:	f383 8811 	msr	BASEPRI, r3
  403534:	f3bf 8f6f 	isb	sy
  403538:	f3bf 8f4f 	dsb	sy
  40353c:	b662      	cpsie	i
  40353e:	e7fe      	b.n	40353e <vTaskDelay+0x22>
  403540:	4b12      	ldr	r3, [pc, #72]	; (40358c <vTaskDelay+0x70>)
  403542:	4798      	blx	r3
  403544:	4b12      	ldr	r3, [pc, #72]	; (403590 <vTaskDelay+0x74>)
  403546:	681b      	ldr	r3, [r3, #0]
  403548:	441c      	add	r4, r3
  40354a:	4b12      	ldr	r3, [pc, #72]	; (403594 <vTaskDelay+0x78>)
  40354c:	6818      	ldr	r0, [r3, #0]
  40354e:	3004      	adds	r0, #4
  403550:	4b11      	ldr	r3, [pc, #68]	; (403598 <vTaskDelay+0x7c>)
  403552:	4798      	blx	r3
  403554:	b948      	cbnz	r0, 40356a <vTaskDelay+0x4e>
  403556:	4b0f      	ldr	r3, [pc, #60]	; (403594 <vTaskDelay+0x78>)
  403558:	681a      	ldr	r2, [r3, #0]
  40355a:	4910      	ldr	r1, [pc, #64]	; (40359c <vTaskDelay+0x80>)
  40355c:	680b      	ldr	r3, [r1, #0]
  40355e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  403560:	2201      	movs	r2, #1
  403562:	4082      	lsls	r2, r0
  403564:	ea23 0302 	bic.w	r3, r3, r2
  403568:	600b      	str	r3, [r1, #0]
  40356a:	4620      	mov	r0, r4
  40356c:	4b0c      	ldr	r3, [pc, #48]	; (4035a0 <vTaskDelay+0x84>)
  40356e:	4798      	blx	r3
  403570:	4b0c      	ldr	r3, [pc, #48]	; (4035a4 <vTaskDelay+0x88>)
  403572:	4798      	blx	r3
  403574:	b938      	cbnz	r0, 403586 <vTaskDelay+0x6a>
  403576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40357a:	4b0b      	ldr	r3, [pc, #44]	; (4035a8 <vTaskDelay+0x8c>)
  40357c:	601a      	str	r2, [r3, #0]
  40357e:	f3bf 8f4f 	dsb	sy
  403582:	f3bf 8f6f 	isb	sy
  403586:	bd10      	pop	{r4, pc}
  403588:	2040c87c 	.word	0x2040c87c
  40358c:	00403295 	.word	0x00403295
  403590:	2040c8fc 	.word	0x2040c8fc
  403594:	2040c804 	.word	0x2040c804
  403598:	00402359 	.word	0x00402359
  40359c:	2040c888 	.word	0x2040c888
  4035a0:	00402f7d 	.word	0x00402f7d
  4035a4:	004033fd 	.word	0x004033fd
  4035a8:	e000ed04 	.word	0xe000ed04

004035ac <prvIdleTask>:
  4035ac:	b580      	push	{r7, lr}
  4035ae:	f8df 8088 	ldr.w	r8, [pc, #136]	; 403638 <prvIdleTask+0x8c>
  4035b2:	4e19      	ldr	r6, [pc, #100]	; (403618 <prvIdleTask+0x6c>)
  4035b4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 40363c <prvIdleTask+0x90>
  4035b8:	e02a      	b.n	403610 <prvIdleTask+0x64>
  4035ba:	4b18      	ldr	r3, [pc, #96]	; (40361c <prvIdleTask+0x70>)
  4035bc:	681b      	ldr	r3, [r3, #0]
  4035be:	2b01      	cmp	r3, #1
  4035c0:	d81e      	bhi.n	403600 <prvIdleTask+0x54>
  4035c2:	682b      	ldr	r3, [r5, #0]
  4035c4:	2b00      	cmp	r3, #0
  4035c6:	d0f8      	beq.n	4035ba <prvIdleTask+0xe>
  4035c8:	47c0      	blx	r8
  4035ca:	6834      	ldr	r4, [r6, #0]
  4035cc:	47b8      	blx	r7
  4035ce:	2c00      	cmp	r4, #0
  4035d0:	d0f7      	beq.n	4035c2 <prvIdleTask+0x16>
  4035d2:	4b13      	ldr	r3, [pc, #76]	; (403620 <prvIdleTask+0x74>)
  4035d4:	4798      	blx	r3
  4035d6:	68f3      	ldr	r3, [r6, #12]
  4035d8:	68dc      	ldr	r4, [r3, #12]
  4035da:	1d20      	adds	r0, r4, #4
  4035dc:	4b11      	ldr	r3, [pc, #68]	; (403624 <prvIdleTask+0x78>)
  4035de:	4798      	blx	r3
  4035e0:	4a11      	ldr	r2, [pc, #68]	; (403628 <prvIdleTask+0x7c>)
  4035e2:	6813      	ldr	r3, [r2, #0]
  4035e4:	3b01      	subs	r3, #1
  4035e6:	6013      	str	r3, [r2, #0]
  4035e8:	682b      	ldr	r3, [r5, #0]
  4035ea:	3b01      	subs	r3, #1
  4035ec:	602b      	str	r3, [r5, #0]
  4035ee:	4b0f      	ldr	r3, [pc, #60]	; (40362c <prvIdleTask+0x80>)
  4035f0:	4798      	blx	r3
  4035f2:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4035f4:	f8df a048 	ldr.w	sl, [pc, #72]	; 403640 <prvIdleTask+0x94>
  4035f8:	47d0      	blx	sl
  4035fa:	4620      	mov	r0, r4
  4035fc:	47d0      	blx	sl
  4035fe:	e7e0      	b.n	4035c2 <prvIdleTask+0x16>
  403600:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403604:	f8c9 3000 	str.w	r3, [r9]
  403608:	f3bf 8f4f 	dsb	sy
  40360c:	f3bf 8f6f 	isb	sy
  403610:	4d07      	ldr	r5, [pc, #28]	; (403630 <prvIdleTask+0x84>)
  403612:	4f08      	ldr	r7, [pc, #32]	; (403634 <prvIdleTask+0x88>)
  403614:	e7d5      	b.n	4035c2 <prvIdleTask+0x16>
  403616:	bf00      	nop
  403618:	2040c8e8 	.word	0x2040c8e8
  40361c:	2040c810 	.word	0x2040c810
  403620:	0040243d 	.word	0x0040243d
  403624:	00402359 	.word	0x00402359
  403628:	2040c874 	.word	0x2040c874
  40362c:	00402489 	.word	0x00402489
  403630:	2040c884 	.word	0x2040c884
  403634:	004033fd 	.word	0x004033fd
  403638:	00403295 	.word	0x00403295
  40363c:	e000ed04 	.word	0xe000ed04
  403640:	00402709 	.word	0x00402709

00403644 <vTaskSwitchContext>:
  403644:	4b2d      	ldr	r3, [pc, #180]	; (4036fc <vTaskSwitchContext+0xb8>)
  403646:	681b      	ldr	r3, [r3, #0]
  403648:	2b00      	cmp	r3, #0
  40364a:	d12c      	bne.n	4036a6 <vTaskSwitchContext+0x62>
  40364c:	b510      	push	{r4, lr}
  40364e:	2200      	movs	r2, #0
  403650:	4b2b      	ldr	r3, [pc, #172]	; (403700 <vTaskSwitchContext+0xbc>)
  403652:	601a      	str	r2, [r3, #0]
  403654:	4b2b      	ldr	r3, [pc, #172]	; (403704 <vTaskSwitchContext+0xc0>)
  403656:	681b      	ldr	r3, [r3, #0]
  403658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40365a:	681a      	ldr	r2, [r3, #0]
  40365c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  403660:	d103      	bne.n	40366a <vTaskSwitchContext+0x26>
  403662:	685a      	ldr	r2, [r3, #4]
  403664:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  403668:	d021      	beq.n	4036ae <vTaskSwitchContext+0x6a>
  40366a:	4b26      	ldr	r3, [pc, #152]	; (403704 <vTaskSwitchContext+0xc0>)
  40366c:	6818      	ldr	r0, [r3, #0]
  40366e:	6819      	ldr	r1, [r3, #0]
  403670:	3134      	adds	r1, #52	; 0x34
  403672:	4b25      	ldr	r3, [pc, #148]	; (403708 <vTaskSwitchContext+0xc4>)
  403674:	4798      	blx	r3
  403676:	4b25      	ldr	r3, [pc, #148]	; (40370c <vTaskSwitchContext+0xc8>)
  403678:	681b      	ldr	r3, [r3, #0]
  40367a:	fab3 f383 	clz	r3, r3
  40367e:	b2db      	uxtb	r3, r3
  403680:	f1c3 031f 	rsb	r3, r3, #31
  403684:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  403688:	4a21      	ldr	r2, [pc, #132]	; (403710 <vTaskSwitchContext+0xcc>)
  40368a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40368e:	b9ba      	cbnz	r2, 4036c0 <vTaskSwitchContext+0x7c>
  403690:	f04f 0380 	mov.w	r3, #128	; 0x80
  403694:	b672      	cpsid	i
  403696:	f383 8811 	msr	BASEPRI, r3
  40369a:	f3bf 8f6f 	isb	sy
  40369e:	f3bf 8f4f 	dsb	sy
  4036a2:	b662      	cpsie	i
  4036a4:	e7fe      	b.n	4036a4 <vTaskSwitchContext+0x60>
  4036a6:	2201      	movs	r2, #1
  4036a8:	4b15      	ldr	r3, [pc, #84]	; (403700 <vTaskSwitchContext+0xbc>)
  4036aa:	601a      	str	r2, [r3, #0]
  4036ac:	4770      	bx	lr
  4036ae:	689a      	ldr	r2, [r3, #8]
  4036b0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4036b4:	d1d9      	bne.n	40366a <vTaskSwitchContext+0x26>
  4036b6:	68db      	ldr	r3, [r3, #12]
  4036b8:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  4036bc:	d1d5      	bne.n	40366a <vTaskSwitchContext+0x26>
  4036be:	e7da      	b.n	403676 <vTaskSwitchContext+0x32>
  4036c0:	4a13      	ldr	r2, [pc, #76]	; (403710 <vTaskSwitchContext+0xcc>)
  4036c2:	0099      	lsls	r1, r3, #2
  4036c4:	18c8      	adds	r0, r1, r3
  4036c6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4036ca:	6844      	ldr	r4, [r0, #4]
  4036cc:	6864      	ldr	r4, [r4, #4]
  4036ce:	6044      	str	r4, [r0, #4]
  4036d0:	4419      	add	r1, r3
  4036d2:	4602      	mov	r2, r0
  4036d4:	3208      	adds	r2, #8
  4036d6:	4294      	cmp	r4, r2
  4036d8:	d009      	beq.n	4036ee <vTaskSwitchContext+0xaa>
  4036da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4036de:	4a0c      	ldr	r2, [pc, #48]	; (403710 <vTaskSwitchContext+0xcc>)
  4036e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4036e4:	685b      	ldr	r3, [r3, #4]
  4036e6:	68da      	ldr	r2, [r3, #12]
  4036e8:	4b06      	ldr	r3, [pc, #24]	; (403704 <vTaskSwitchContext+0xc0>)
  4036ea:	601a      	str	r2, [r3, #0]
  4036ec:	bd10      	pop	{r4, pc}
  4036ee:	6860      	ldr	r0, [r4, #4]
  4036f0:	4a07      	ldr	r2, [pc, #28]	; (403710 <vTaskSwitchContext+0xcc>)
  4036f2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4036f6:	6050      	str	r0, [r2, #4]
  4036f8:	e7ef      	b.n	4036da <vTaskSwitchContext+0x96>
  4036fa:	bf00      	nop
  4036fc:	2040c87c 	.word	0x2040c87c
  403700:	2040c900 	.word	0x2040c900
  403704:	2040c804 	.word	0x2040c804
  403708:	00404189 	.word	0x00404189
  40370c:	2040c888 	.word	0x2040c888
  403710:	2040c810 	.word	0x2040c810

00403714 <vTaskPlaceOnEventList>:
  403714:	b538      	push	{r3, r4, r5, lr}
  403716:	b1e0      	cbz	r0, 403752 <vTaskPlaceOnEventList+0x3e>
  403718:	460c      	mov	r4, r1
  40371a:	4d17      	ldr	r5, [pc, #92]	; (403778 <vTaskPlaceOnEventList+0x64>)
  40371c:	6829      	ldr	r1, [r5, #0]
  40371e:	3118      	adds	r1, #24
  403720:	4b16      	ldr	r3, [pc, #88]	; (40377c <vTaskPlaceOnEventList+0x68>)
  403722:	4798      	blx	r3
  403724:	6828      	ldr	r0, [r5, #0]
  403726:	3004      	adds	r0, #4
  403728:	4b15      	ldr	r3, [pc, #84]	; (403780 <vTaskPlaceOnEventList+0x6c>)
  40372a:	4798      	blx	r3
  40372c:	b940      	cbnz	r0, 403740 <vTaskPlaceOnEventList+0x2c>
  40372e:	682a      	ldr	r2, [r5, #0]
  403730:	4914      	ldr	r1, [pc, #80]	; (403784 <vTaskPlaceOnEventList+0x70>)
  403732:	680b      	ldr	r3, [r1, #0]
  403734:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  403736:	2201      	movs	r2, #1
  403738:	4082      	lsls	r2, r0
  40373a:	ea23 0302 	bic.w	r3, r3, r2
  40373e:	600b      	str	r3, [r1, #0]
  403740:	f1b4 3fff 	cmp.w	r4, #4294967295
  403744:	d010      	beq.n	403768 <vTaskPlaceOnEventList+0x54>
  403746:	4b10      	ldr	r3, [pc, #64]	; (403788 <vTaskPlaceOnEventList+0x74>)
  403748:	6818      	ldr	r0, [r3, #0]
  40374a:	4420      	add	r0, r4
  40374c:	4b0f      	ldr	r3, [pc, #60]	; (40378c <vTaskPlaceOnEventList+0x78>)
  40374e:	4798      	blx	r3
  403750:	bd38      	pop	{r3, r4, r5, pc}
  403752:	f04f 0380 	mov.w	r3, #128	; 0x80
  403756:	b672      	cpsid	i
  403758:	f383 8811 	msr	BASEPRI, r3
  40375c:	f3bf 8f6f 	isb	sy
  403760:	f3bf 8f4f 	dsb	sy
  403764:	b662      	cpsie	i
  403766:	e7fe      	b.n	403766 <vTaskPlaceOnEventList+0x52>
  403768:	4b03      	ldr	r3, [pc, #12]	; (403778 <vTaskPlaceOnEventList+0x64>)
  40376a:	6819      	ldr	r1, [r3, #0]
  40376c:	3104      	adds	r1, #4
  40376e:	4808      	ldr	r0, [pc, #32]	; (403790 <vTaskPlaceOnEventList+0x7c>)
  403770:	4b08      	ldr	r3, [pc, #32]	; (403794 <vTaskPlaceOnEventList+0x80>)
  403772:	4798      	blx	r3
  403774:	bd38      	pop	{r3, r4, r5, pc}
  403776:	bf00      	nop
  403778:	2040c804 	.word	0x2040c804
  40377c:	00402325 	.word	0x00402325
  403780:	00402359 	.word	0x00402359
  403784:	2040c888 	.word	0x2040c888
  403788:	2040c8fc 	.word	0x2040c8fc
  40378c:	00402f7d 	.word	0x00402f7d
  403790:	2040c8d4 	.word	0x2040c8d4
  403794:	0040230d 	.word	0x0040230d

00403798 <vTaskPlaceOnEventListRestricted>:
  403798:	b1e8      	cbz	r0, 4037d6 <vTaskPlaceOnEventListRestricted+0x3e>
  40379a:	b570      	push	{r4, r5, r6, lr}
  40379c:	4615      	mov	r5, r2
  40379e:	460c      	mov	r4, r1
  4037a0:	4e16      	ldr	r6, [pc, #88]	; (4037fc <vTaskPlaceOnEventListRestricted+0x64>)
  4037a2:	6831      	ldr	r1, [r6, #0]
  4037a4:	3118      	adds	r1, #24
  4037a6:	4b16      	ldr	r3, [pc, #88]	; (403800 <vTaskPlaceOnEventListRestricted+0x68>)
  4037a8:	4798      	blx	r3
  4037aa:	6830      	ldr	r0, [r6, #0]
  4037ac:	3004      	adds	r0, #4
  4037ae:	4b15      	ldr	r3, [pc, #84]	; (403804 <vTaskPlaceOnEventListRestricted+0x6c>)
  4037b0:	4798      	blx	r3
  4037b2:	b940      	cbnz	r0, 4037c6 <vTaskPlaceOnEventListRestricted+0x2e>
  4037b4:	6832      	ldr	r2, [r6, #0]
  4037b6:	4914      	ldr	r1, [pc, #80]	; (403808 <vTaskPlaceOnEventListRestricted+0x70>)
  4037b8:	680b      	ldr	r3, [r1, #0]
  4037ba:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4037bc:	2201      	movs	r2, #1
  4037be:	4082      	lsls	r2, r0
  4037c0:	ea23 0302 	bic.w	r3, r3, r2
  4037c4:	600b      	str	r3, [r1, #0]
  4037c6:	2d01      	cmp	r5, #1
  4037c8:	d010      	beq.n	4037ec <vTaskPlaceOnEventListRestricted+0x54>
  4037ca:	4b10      	ldr	r3, [pc, #64]	; (40380c <vTaskPlaceOnEventListRestricted+0x74>)
  4037cc:	6818      	ldr	r0, [r3, #0]
  4037ce:	4420      	add	r0, r4
  4037d0:	4b0f      	ldr	r3, [pc, #60]	; (403810 <vTaskPlaceOnEventListRestricted+0x78>)
  4037d2:	4798      	blx	r3
  4037d4:	bd70      	pop	{r4, r5, r6, pc}
  4037d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4037da:	b672      	cpsid	i
  4037dc:	f383 8811 	msr	BASEPRI, r3
  4037e0:	f3bf 8f6f 	isb	sy
  4037e4:	f3bf 8f4f 	dsb	sy
  4037e8:	b662      	cpsie	i
  4037ea:	e7fe      	b.n	4037ea <vTaskPlaceOnEventListRestricted+0x52>
  4037ec:	4b03      	ldr	r3, [pc, #12]	; (4037fc <vTaskPlaceOnEventListRestricted+0x64>)
  4037ee:	6819      	ldr	r1, [r3, #0]
  4037f0:	3104      	adds	r1, #4
  4037f2:	4808      	ldr	r0, [pc, #32]	; (403814 <vTaskPlaceOnEventListRestricted+0x7c>)
  4037f4:	4b02      	ldr	r3, [pc, #8]	; (403800 <vTaskPlaceOnEventListRestricted+0x68>)
  4037f6:	4798      	blx	r3
  4037f8:	bd70      	pop	{r4, r5, r6, pc}
  4037fa:	bf00      	nop
  4037fc:	2040c804 	.word	0x2040c804
  403800:	0040230d 	.word	0x0040230d
  403804:	00402359 	.word	0x00402359
  403808:	2040c888 	.word	0x2040c888
  40380c:	2040c8fc 	.word	0x2040c8fc
  403810:	00402f7d 	.word	0x00402f7d
  403814:	2040c8d4 	.word	0x2040c8d4

00403818 <xTaskRemoveFromEventList>:
  403818:	b538      	push	{r3, r4, r5, lr}
  40381a:	68c3      	ldr	r3, [r0, #12]
  40381c:	68dc      	ldr	r4, [r3, #12]
  40381e:	b324      	cbz	r4, 40386a <xTaskRemoveFromEventList+0x52>
  403820:	f104 0518 	add.w	r5, r4, #24
  403824:	4628      	mov	r0, r5
  403826:	4b1a      	ldr	r3, [pc, #104]	; (403890 <xTaskRemoveFromEventList+0x78>)
  403828:	4798      	blx	r3
  40382a:	4b1a      	ldr	r3, [pc, #104]	; (403894 <xTaskRemoveFromEventList+0x7c>)
  40382c:	681b      	ldr	r3, [r3, #0]
  40382e:	bb3b      	cbnz	r3, 403880 <xTaskRemoveFromEventList+0x68>
  403830:	1d25      	adds	r5, r4, #4
  403832:	4628      	mov	r0, r5
  403834:	4b16      	ldr	r3, [pc, #88]	; (403890 <xTaskRemoveFromEventList+0x78>)
  403836:	4798      	blx	r3
  403838:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40383a:	4a17      	ldr	r2, [pc, #92]	; (403898 <xTaskRemoveFromEventList+0x80>)
  40383c:	6811      	ldr	r1, [r2, #0]
  40383e:	2301      	movs	r3, #1
  403840:	4083      	lsls	r3, r0
  403842:	430b      	orrs	r3, r1
  403844:	6013      	str	r3, [r2, #0]
  403846:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40384a:	4629      	mov	r1, r5
  40384c:	4b13      	ldr	r3, [pc, #76]	; (40389c <xTaskRemoveFromEventList+0x84>)
  40384e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403852:	4b13      	ldr	r3, [pc, #76]	; (4038a0 <xTaskRemoveFromEventList+0x88>)
  403854:	4798      	blx	r3
  403856:	4b13      	ldr	r3, [pc, #76]	; (4038a4 <xTaskRemoveFromEventList+0x8c>)
  403858:	681b      	ldr	r3, [r3, #0]
  40385a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40385e:	429a      	cmp	r2, r3
  403860:	d913      	bls.n	40388a <xTaskRemoveFromEventList+0x72>
  403862:	2001      	movs	r0, #1
  403864:	4b10      	ldr	r3, [pc, #64]	; (4038a8 <xTaskRemoveFromEventList+0x90>)
  403866:	6018      	str	r0, [r3, #0]
  403868:	bd38      	pop	{r3, r4, r5, pc}
  40386a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40386e:	b672      	cpsid	i
  403870:	f383 8811 	msr	BASEPRI, r3
  403874:	f3bf 8f6f 	isb	sy
  403878:	f3bf 8f4f 	dsb	sy
  40387c:	b662      	cpsie	i
  40387e:	e7fe      	b.n	40387e <xTaskRemoveFromEventList+0x66>
  403880:	4629      	mov	r1, r5
  403882:	480a      	ldr	r0, [pc, #40]	; (4038ac <xTaskRemoveFromEventList+0x94>)
  403884:	4b06      	ldr	r3, [pc, #24]	; (4038a0 <xTaskRemoveFromEventList+0x88>)
  403886:	4798      	blx	r3
  403888:	e7e5      	b.n	403856 <xTaskRemoveFromEventList+0x3e>
  40388a:	2000      	movs	r0, #0
  40388c:	bd38      	pop	{r3, r4, r5, pc}
  40388e:	bf00      	nop
  403890:	00402359 	.word	0x00402359
  403894:	2040c87c 	.word	0x2040c87c
  403898:	2040c888 	.word	0x2040c888
  40389c:	2040c810 	.word	0x2040c810
  4038a0:	0040230d 	.word	0x0040230d
  4038a4:	2040c804 	.word	0x2040c804
  4038a8:	2040c900 	.word	0x2040c900
  4038ac:	2040c8bc 	.word	0x2040c8bc

004038b0 <vTaskSetTimeOutState>:
  4038b0:	b130      	cbz	r0, 4038c0 <vTaskSetTimeOutState+0x10>
  4038b2:	4a09      	ldr	r2, [pc, #36]	; (4038d8 <vTaskSetTimeOutState+0x28>)
  4038b4:	6812      	ldr	r2, [r2, #0]
  4038b6:	6002      	str	r2, [r0, #0]
  4038b8:	4a08      	ldr	r2, [pc, #32]	; (4038dc <vTaskSetTimeOutState+0x2c>)
  4038ba:	6812      	ldr	r2, [r2, #0]
  4038bc:	6042      	str	r2, [r0, #4]
  4038be:	4770      	bx	lr
  4038c0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4038c4:	b672      	cpsid	i
  4038c6:	f383 8811 	msr	BASEPRI, r3
  4038ca:	f3bf 8f6f 	isb	sy
  4038ce:	f3bf 8f4f 	dsb	sy
  4038d2:	b662      	cpsie	i
  4038d4:	e7fe      	b.n	4038d4 <vTaskSetTimeOutState+0x24>
  4038d6:	bf00      	nop
  4038d8:	2040c8b8 	.word	0x2040c8b8
  4038dc:	2040c8fc 	.word	0x2040c8fc

004038e0 <xTaskCheckForTimeOut>:
  4038e0:	b538      	push	{r3, r4, r5, lr}
  4038e2:	b1c0      	cbz	r0, 403916 <xTaskCheckForTimeOut+0x36>
  4038e4:	4604      	mov	r4, r0
  4038e6:	b309      	cbz	r1, 40392c <xTaskCheckForTimeOut+0x4c>
  4038e8:	460d      	mov	r5, r1
  4038ea:	4b1d      	ldr	r3, [pc, #116]	; (403960 <xTaskCheckForTimeOut+0x80>)
  4038ec:	4798      	blx	r3
  4038ee:	4b1d      	ldr	r3, [pc, #116]	; (403964 <xTaskCheckForTimeOut+0x84>)
  4038f0:	681a      	ldr	r2, [r3, #0]
  4038f2:	682b      	ldr	r3, [r5, #0]
  4038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4038f8:	d02e      	beq.n	403958 <xTaskCheckForTimeOut+0x78>
  4038fa:	491b      	ldr	r1, [pc, #108]	; (403968 <xTaskCheckForTimeOut+0x88>)
  4038fc:	6809      	ldr	r1, [r1, #0]
  4038fe:	6820      	ldr	r0, [r4, #0]
  403900:	4288      	cmp	r0, r1
  403902:	d002      	beq.n	40390a <xTaskCheckForTimeOut+0x2a>
  403904:	6861      	ldr	r1, [r4, #4]
  403906:	428a      	cmp	r2, r1
  403908:	d228      	bcs.n	40395c <xTaskCheckForTimeOut+0x7c>
  40390a:	6861      	ldr	r1, [r4, #4]
  40390c:	1a50      	subs	r0, r2, r1
  40390e:	4283      	cmp	r3, r0
  403910:	d817      	bhi.n	403942 <xTaskCheckForTimeOut+0x62>
  403912:	2401      	movs	r4, #1
  403914:	e01c      	b.n	403950 <xTaskCheckForTimeOut+0x70>
  403916:	f04f 0380 	mov.w	r3, #128	; 0x80
  40391a:	b672      	cpsid	i
  40391c:	f383 8811 	msr	BASEPRI, r3
  403920:	f3bf 8f6f 	isb	sy
  403924:	f3bf 8f4f 	dsb	sy
  403928:	b662      	cpsie	i
  40392a:	e7fe      	b.n	40392a <xTaskCheckForTimeOut+0x4a>
  40392c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403930:	b672      	cpsid	i
  403932:	f383 8811 	msr	BASEPRI, r3
  403936:	f3bf 8f6f 	isb	sy
  40393a:	f3bf 8f4f 	dsb	sy
  40393e:	b662      	cpsie	i
  403940:	e7fe      	b.n	403940 <xTaskCheckForTimeOut+0x60>
  403942:	1a9b      	subs	r3, r3, r2
  403944:	440b      	add	r3, r1
  403946:	602b      	str	r3, [r5, #0]
  403948:	4620      	mov	r0, r4
  40394a:	4b08      	ldr	r3, [pc, #32]	; (40396c <xTaskCheckForTimeOut+0x8c>)
  40394c:	4798      	blx	r3
  40394e:	2400      	movs	r4, #0
  403950:	4b07      	ldr	r3, [pc, #28]	; (403970 <xTaskCheckForTimeOut+0x90>)
  403952:	4798      	blx	r3
  403954:	4620      	mov	r0, r4
  403956:	bd38      	pop	{r3, r4, r5, pc}
  403958:	2400      	movs	r4, #0
  40395a:	e7f9      	b.n	403950 <xTaskCheckForTimeOut+0x70>
  40395c:	2401      	movs	r4, #1
  40395e:	e7f7      	b.n	403950 <xTaskCheckForTimeOut+0x70>
  403960:	0040243d 	.word	0x0040243d
  403964:	2040c8fc 	.word	0x2040c8fc
  403968:	2040c8b8 	.word	0x2040c8b8
  40396c:	004038b1 	.word	0x004038b1
  403970:	00402489 	.word	0x00402489

00403974 <vTaskMissedYield>:
  403974:	2201      	movs	r2, #1
  403976:	4b01      	ldr	r3, [pc, #4]	; (40397c <vTaskMissedYield+0x8>)
  403978:	601a      	str	r2, [r3, #0]
  40397a:	4770      	bx	lr
  40397c:	2040c900 	.word	0x2040c900

00403980 <xTaskGetSchedulerState>:
  403980:	4b05      	ldr	r3, [pc, #20]	; (403998 <xTaskGetSchedulerState+0x18>)
  403982:	681b      	ldr	r3, [r3, #0]
  403984:	b133      	cbz	r3, 403994 <xTaskGetSchedulerState+0x14>
  403986:	4b05      	ldr	r3, [pc, #20]	; (40399c <xTaskGetSchedulerState+0x1c>)
  403988:	681b      	ldr	r3, [r3, #0]
  40398a:	2b00      	cmp	r3, #0
  40398c:	bf0c      	ite	eq
  40398e:	2002      	moveq	r0, #2
  403990:	2000      	movne	r0, #0
  403992:	4770      	bx	lr
  403994:	2001      	movs	r0, #1
  403996:	4770      	bx	lr
  403998:	2040c8d0 	.word	0x2040c8d0
  40399c:	2040c87c 	.word	0x2040c87c

004039a0 <vTaskPriorityInherit>:
  4039a0:	2800      	cmp	r0, #0
  4039a2:	d044      	beq.n	403a2e <vTaskPriorityInherit+0x8e>
  4039a4:	b538      	push	{r3, r4, r5, lr}
  4039a6:	4604      	mov	r4, r0
  4039a8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4039aa:	4921      	ldr	r1, [pc, #132]	; (403a30 <vTaskPriorityInherit+0x90>)
  4039ac:	6809      	ldr	r1, [r1, #0]
  4039ae:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4039b0:	428a      	cmp	r2, r1
  4039b2:	d214      	bcs.n	4039de <vTaskPriorityInherit+0x3e>
  4039b4:	6981      	ldr	r1, [r0, #24]
  4039b6:	2900      	cmp	r1, #0
  4039b8:	db05      	blt.n	4039c6 <vTaskPriorityInherit+0x26>
  4039ba:	491d      	ldr	r1, [pc, #116]	; (403a30 <vTaskPriorityInherit+0x90>)
  4039bc:	6809      	ldr	r1, [r1, #0]
  4039be:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4039c0:	f1c1 0105 	rsb	r1, r1, #5
  4039c4:	6181      	str	r1, [r0, #24]
  4039c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4039ca:	491a      	ldr	r1, [pc, #104]	; (403a34 <vTaskPriorityInherit+0x94>)
  4039cc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4039d0:	6961      	ldr	r1, [r4, #20]
  4039d2:	4291      	cmp	r1, r2
  4039d4:	d004      	beq.n	4039e0 <vTaskPriorityInherit+0x40>
  4039d6:	4a16      	ldr	r2, [pc, #88]	; (403a30 <vTaskPriorityInherit+0x90>)
  4039d8:	6812      	ldr	r2, [r2, #0]
  4039da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4039dc:	62e2      	str	r2, [r4, #44]	; 0x2c
  4039de:	bd38      	pop	{r3, r4, r5, pc}
  4039e0:	1d25      	adds	r5, r4, #4
  4039e2:	4628      	mov	r0, r5
  4039e4:	4b14      	ldr	r3, [pc, #80]	; (403a38 <vTaskPriorityInherit+0x98>)
  4039e6:	4798      	blx	r3
  4039e8:	b970      	cbnz	r0, 403a08 <vTaskPriorityInherit+0x68>
  4039ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4039ec:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4039f0:	4a10      	ldr	r2, [pc, #64]	; (403a34 <vTaskPriorityInherit+0x94>)
  4039f2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4039f6:	b93a      	cbnz	r2, 403a08 <vTaskPriorityInherit+0x68>
  4039f8:	4810      	ldr	r0, [pc, #64]	; (403a3c <vTaskPriorityInherit+0x9c>)
  4039fa:	6802      	ldr	r2, [r0, #0]
  4039fc:	2101      	movs	r1, #1
  4039fe:	fa01 f303 	lsl.w	r3, r1, r3
  403a02:	ea22 0303 	bic.w	r3, r2, r3
  403a06:	6003      	str	r3, [r0, #0]
  403a08:	4b09      	ldr	r3, [pc, #36]	; (403a30 <vTaskPriorityInherit+0x90>)
  403a0a:	681b      	ldr	r3, [r3, #0]
  403a0c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  403a0e:	62e0      	str	r0, [r4, #44]	; 0x2c
  403a10:	4a0a      	ldr	r2, [pc, #40]	; (403a3c <vTaskPriorityInherit+0x9c>)
  403a12:	6811      	ldr	r1, [r2, #0]
  403a14:	2301      	movs	r3, #1
  403a16:	4083      	lsls	r3, r0
  403a18:	430b      	orrs	r3, r1
  403a1a:	6013      	str	r3, [r2, #0]
  403a1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403a20:	4629      	mov	r1, r5
  403a22:	4b04      	ldr	r3, [pc, #16]	; (403a34 <vTaskPriorityInherit+0x94>)
  403a24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403a28:	4b05      	ldr	r3, [pc, #20]	; (403a40 <vTaskPriorityInherit+0xa0>)
  403a2a:	4798      	blx	r3
  403a2c:	bd38      	pop	{r3, r4, r5, pc}
  403a2e:	4770      	bx	lr
  403a30:	2040c804 	.word	0x2040c804
  403a34:	2040c810 	.word	0x2040c810
  403a38:	00402359 	.word	0x00402359
  403a3c:	2040c888 	.word	0x2040c888
  403a40:	0040230d 	.word	0x0040230d

00403a44 <xTaskPriorityDisinherit>:
  403a44:	2800      	cmp	r0, #0
  403a46:	d04d      	beq.n	403ae4 <xTaskPriorityDisinherit+0xa0>
  403a48:	b538      	push	{r3, r4, r5, lr}
  403a4a:	4604      	mov	r4, r0
  403a4c:	4a27      	ldr	r2, [pc, #156]	; (403aec <xTaskPriorityDisinherit+0xa8>)
  403a4e:	6812      	ldr	r2, [r2, #0]
  403a50:	4290      	cmp	r0, r2
  403a52:	d00a      	beq.n	403a6a <xTaskPriorityDisinherit+0x26>
  403a54:	f04f 0380 	mov.w	r3, #128	; 0x80
  403a58:	b672      	cpsid	i
  403a5a:	f383 8811 	msr	BASEPRI, r3
  403a5e:	f3bf 8f6f 	isb	sy
  403a62:	f3bf 8f4f 	dsb	sy
  403a66:	b662      	cpsie	i
  403a68:	e7fe      	b.n	403a68 <xTaskPriorityDisinherit+0x24>
  403a6a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  403a6c:	b952      	cbnz	r2, 403a84 <xTaskPriorityDisinherit+0x40>
  403a6e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403a72:	b672      	cpsid	i
  403a74:	f383 8811 	msr	BASEPRI, r3
  403a78:	f3bf 8f6f 	isb	sy
  403a7c:	f3bf 8f4f 	dsb	sy
  403a80:	b662      	cpsie	i
  403a82:	e7fe      	b.n	403a82 <xTaskPriorityDisinherit+0x3e>
  403a84:	3a01      	subs	r2, #1
  403a86:	64c2      	str	r2, [r0, #76]	; 0x4c
  403a88:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  403a8a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  403a8c:	4288      	cmp	r0, r1
  403a8e:	d02b      	beq.n	403ae8 <xTaskPriorityDisinherit+0xa4>
  403a90:	bb52      	cbnz	r2, 403ae8 <xTaskPriorityDisinherit+0xa4>
  403a92:	1d25      	adds	r5, r4, #4
  403a94:	4628      	mov	r0, r5
  403a96:	4b16      	ldr	r3, [pc, #88]	; (403af0 <xTaskPriorityDisinherit+0xac>)
  403a98:	4798      	blx	r3
  403a9a:	b968      	cbnz	r0, 403ab8 <xTaskPriorityDisinherit+0x74>
  403a9c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  403a9e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  403aa2:	4b14      	ldr	r3, [pc, #80]	; (403af4 <xTaskPriorityDisinherit+0xb0>)
  403aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403aa8:	b933      	cbnz	r3, 403ab8 <xTaskPriorityDisinherit+0x74>
  403aaa:	4813      	ldr	r0, [pc, #76]	; (403af8 <xTaskPriorityDisinherit+0xb4>)
  403aac:	6803      	ldr	r3, [r0, #0]
  403aae:	2201      	movs	r2, #1
  403ab0:	408a      	lsls	r2, r1
  403ab2:	ea23 0302 	bic.w	r3, r3, r2
  403ab6:	6003      	str	r3, [r0, #0]
  403ab8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  403aba:	62e0      	str	r0, [r4, #44]	; 0x2c
  403abc:	f1c0 0305 	rsb	r3, r0, #5
  403ac0:	61a3      	str	r3, [r4, #24]
  403ac2:	4a0d      	ldr	r2, [pc, #52]	; (403af8 <xTaskPriorityDisinherit+0xb4>)
  403ac4:	6811      	ldr	r1, [r2, #0]
  403ac6:	2401      	movs	r4, #1
  403ac8:	fa04 f300 	lsl.w	r3, r4, r0
  403acc:	430b      	orrs	r3, r1
  403ace:	6013      	str	r3, [r2, #0]
  403ad0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403ad4:	4629      	mov	r1, r5
  403ad6:	4b07      	ldr	r3, [pc, #28]	; (403af4 <xTaskPriorityDisinherit+0xb0>)
  403ad8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403adc:	4b07      	ldr	r3, [pc, #28]	; (403afc <xTaskPriorityDisinherit+0xb8>)
  403ade:	4798      	blx	r3
  403ae0:	4620      	mov	r0, r4
  403ae2:	bd38      	pop	{r3, r4, r5, pc}
  403ae4:	2000      	movs	r0, #0
  403ae6:	4770      	bx	lr
  403ae8:	2000      	movs	r0, #0
  403aea:	bd38      	pop	{r3, r4, r5, pc}
  403aec:	2040c804 	.word	0x2040c804
  403af0:	00402359 	.word	0x00402359
  403af4:	2040c810 	.word	0x2040c810
  403af8:	2040c888 	.word	0x2040c888
  403afc:	0040230d 	.word	0x0040230d

00403b00 <pvTaskIncrementMutexHeldCount>:
  403b00:	4b05      	ldr	r3, [pc, #20]	; (403b18 <pvTaskIncrementMutexHeldCount+0x18>)
  403b02:	681b      	ldr	r3, [r3, #0]
  403b04:	b123      	cbz	r3, 403b10 <pvTaskIncrementMutexHeldCount+0x10>
  403b06:	4b04      	ldr	r3, [pc, #16]	; (403b18 <pvTaskIncrementMutexHeldCount+0x18>)
  403b08:	681a      	ldr	r2, [r3, #0]
  403b0a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  403b0c:	3301      	adds	r3, #1
  403b0e:	64d3      	str	r3, [r2, #76]	; 0x4c
  403b10:	4b01      	ldr	r3, [pc, #4]	; (403b18 <pvTaskIncrementMutexHeldCount+0x18>)
  403b12:	6818      	ldr	r0, [r3, #0]
  403b14:	4770      	bx	lr
  403b16:	bf00      	nop
  403b18:	2040c804 	.word	0x2040c804

00403b1c <prvInsertTimerInActiveList>:
  403b1c:	b508      	push	{r3, lr}
  403b1e:	6041      	str	r1, [r0, #4]
  403b20:	6100      	str	r0, [r0, #16]
  403b22:	4291      	cmp	r1, r2
  403b24:	d80c      	bhi.n	403b40 <prvInsertTimerInActiveList+0x24>
  403b26:	1ad2      	subs	r2, r2, r3
  403b28:	6983      	ldr	r3, [r0, #24]
  403b2a:	429a      	cmp	r2, r3
  403b2c:	d301      	bcc.n	403b32 <prvInsertTimerInActiveList+0x16>
  403b2e:	2001      	movs	r0, #1
  403b30:	bd08      	pop	{r3, pc}
  403b32:	1d01      	adds	r1, r0, #4
  403b34:	4b09      	ldr	r3, [pc, #36]	; (403b5c <prvInsertTimerInActiveList+0x40>)
  403b36:	6818      	ldr	r0, [r3, #0]
  403b38:	4b09      	ldr	r3, [pc, #36]	; (403b60 <prvInsertTimerInActiveList+0x44>)
  403b3a:	4798      	blx	r3
  403b3c:	2000      	movs	r0, #0
  403b3e:	bd08      	pop	{r3, pc}
  403b40:	429a      	cmp	r2, r3
  403b42:	d203      	bcs.n	403b4c <prvInsertTimerInActiveList+0x30>
  403b44:	4299      	cmp	r1, r3
  403b46:	d301      	bcc.n	403b4c <prvInsertTimerInActiveList+0x30>
  403b48:	2001      	movs	r0, #1
  403b4a:	bd08      	pop	{r3, pc}
  403b4c:	1d01      	adds	r1, r0, #4
  403b4e:	4b05      	ldr	r3, [pc, #20]	; (403b64 <prvInsertTimerInActiveList+0x48>)
  403b50:	6818      	ldr	r0, [r3, #0]
  403b52:	4b03      	ldr	r3, [pc, #12]	; (403b60 <prvInsertTimerInActiveList+0x44>)
  403b54:	4798      	blx	r3
  403b56:	2000      	movs	r0, #0
  403b58:	bd08      	pop	{r3, pc}
  403b5a:	bf00      	nop
  403b5c:	2040c908 	.word	0x2040c908
  403b60:	00402325 	.word	0x00402325
  403b64:	2040c904 	.word	0x2040c904

00403b68 <prvCheckForValidListAndQueue>:
  403b68:	b570      	push	{r4, r5, r6, lr}
  403b6a:	4b15      	ldr	r3, [pc, #84]	; (403bc0 <prvCheckForValidListAndQueue+0x58>)
  403b6c:	4798      	blx	r3
  403b6e:	4b15      	ldr	r3, [pc, #84]	; (403bc4 <prvCheckForValidListAndQueue+0x5c>)
  403b70:	681b      	ldr	r3, [r3, #0]
  403b72:	b113      	cbz	r3, 403b7a <prvCheckForValidListAndQueue+0x12>
  403b74:	4b14      	ldr	r3, [pc, #80]	; (403bc8 <prvCheckForValidListAndQueue+0x60>)
  403b76:	4798      	blx	r3
  403b78:	bd70      	pop	{r4, r5, r6, pc}
  403b7a:	4d14      	ldr	r5, [pc, #80]	; (403bcc <prvCheckForValidListAndQueue+0x64>)
  403b7c:	4628      	mov	r0, r5
  403b7e:	4e14      	ldr	r6, [pc, #80]	; (403bd0 <prvCheckForValidListAndQueue+0x68>)
  403b80:	47b0      	blx	r6
  403b82:	4c14      	ldr	r4, [pc, #80]	; (403bd4 <prvCheckForValidListAndQueue+0x6c>)
  403b84:	4620      	mov	r0, r4
  403b86:	47b0      	blx	r6
  403b88:	4b13      	ldr	r3, [pc, #76]	; (403bd8 <prvCheckForValidListAndQueue+0x70>)
  403b8a:	601d      	str	r5, [r3, #0]
  403b8c:	4b13      	ldr	r3, [pc, #76]	; (403bdc <prvCheckForValidListAndQueue+0x74>)
  403b8e:	601c      	str	r4, [r3, #0]
  403b90:	2200      	movs	r2, #0
  403b92:	2110      	movs	r1, #16
  403b94:	2005      	movs	r0, #5
  403b96:	4b12      	ldr	r3, [pc, #72]	; (403be0 <prvCheckForValidListAndQueue+0x78>)
  403b98:	4798      	blx	r3
  403b9a:	4b0a      	ldr	r3, [pc, #40]	; (403bc4 <prvCheckForValidListAndQueue+0x5c>)
  403b9c:	6018      	str	r0, [r3, #0]
  403b9e:	b118      	cbz	r0, 403ba8 <prvCheckForValidListAndQueue+0x40>
  403ba0:	4910      	ldr	r1, [pc, #64]	; (403be4 <prvCheckForValidListAndQueue+0x7c>)
  403ba2:	4b11      	ldr	r3, [pc, #68]	; (403be8 <prvCheckForValidListAndQueue+0x80>)
  403ba4:	4798      	blx	r3
  403ba6:	e7e5      	b.n	403b74 <prvCheckForValidListAndQueue+0xc>
  403ba8:	f04f 0380 	mov.w	r3, #128	; 0x80
  403bac:	b672      	cpsid	i
  403bae:	f383 8811 	msr	BASEPRI, r3
  403bb2:	f3bf 8f6f 	isb	sy
  403bb6:	f3bf 8f4f 	dsb	sy
  403bba:	b662      	cpsie	i
  403bbc:	e7fe      	b.n	403bbc <prvCheckForValidListAndQueue+0x54>
  403bbe:	bf00      	nop
  403bc0:	0040243d 	.word	0x0040243d
  403bc4:	2040c938 	.word	0x2040c938
  403bc8:	00402489 	.word	0x00402489
  403bcc:	2040c90c 	.word	0x2040c90c
  403bd0:	004022f1 	.word	0x004022f1
  403bd4:	2040c920 	.word	0x2040c920
  403bd8:	2040c904 	.word	0x2040c904
  403bdc:	2040c908 	.word	0x2040c908
  403be0:	00402995 	.word	0x00402995
  403be4:	00409980 	.word	0x00409980
  403be8:	00402ec5 	.word	0x00402ec5

00403bec <xTimerCreateTimerTask>:
  403bec:	b510      	push	{r4, lr}
  403bee:	b084      	sub	sp, #16
  403bf0:	4b0f      	ldr	r3, [pc, #60]	; (403c30 <xTimerCreateTimerTask+0x44>)
  403bf2:	4798      	blx	r3
  403bf4:	4b0f      	ldr	r3, [pc, #60]	; (403c34 <xTimerCreateTimerTask+0x48>)
  403bf6:	681b      	ldr	r3, [r3, #0]
  403bf8:	b173      	cbz	r3, 403c18 <xTimerCreateTimerTask+0x2c>
  403bfa:	2300      	movs	r3, #0
  403bfc:	9303      	str	r3, [sp, #12]
  403bfe:	9302      	str	r3, [sp, #8]
  403c00:	9301      	str	r3, [sp, #4]
  403c02:	2204      	movs	r2, #4
  403c04:	9200      	str	r2, [sp, #0]
  403c06:	f44f 7282 	mov.w	r2, #260	; 0x104
  403c0a:	490b      	ldr	r1, [pc, #44]	; (403c38 <xTimerCreateTimerTask+0x4c>)
  403c0c:	480b      	ldr	r0, [pc, #44]	; (403c3c <xTimerCreateTimerTask+0x50>)
  403c0e:	4c0c      	ldr	r4, [pc, #48]	; (403c40 <xTimerCreateTimerTask+0x54>)
  403c10:	47a0      	blx	r4
  403c12:	b108      	cbz	r0, 403c18 <xTimerCreateTimerTask+0x2c>
  403c14:	b004      	add	sp, #16
  403c16:	bd10      	pop	{r4, pc}
  403c18:	f04f 0380 	mov.w	r3, #128	; 0x80
  403c1c:	b672      	cpsid	i
  403c1e:	f383 8811 	msr	BASEPRI, r3
  403c22:	f3bf 8f6f 	isb	sy
  403c26:	f3bf 8f4f 	dsb	sy
  403c2a:	b662      	cpsie	i
  403c2c:	e7fe      	b.n	403c2c <xTimerCreateTimerTask+0x40>
  403c2e:	bf00      	nop
  403c30:	00403b69 	.word	0x00403b69
  403c34:	2040c938 	.word	0x2040c938
  403c38:	00409988 	.word	0x00409988
  403c3c:	00403d6d 	.word	0x00403d6d
  403c40:	00402fd5 	.word	0x00402fd5

00403c44 <xTimerGenericCommand>:
  403c44:	b1d8      	cbz	r0, 403c7e <xTimerGenericCommand+0x3a>
  403c46:	b530      	push	{r4, r5, lr}
  403c48:	b085      	sub	sp, #20
  403c4a:	4615      	mov	r5, r2
  403c4c:	4604      	mov	r4, r0
  403c4e:	4a15      	ldr	r2, [pc, #84]	; (403ca4 <xTimerGenericCommand+0x60>)
  403c50:	6810      	ldr	r0, [r2, #0]
  403c52:	b320      	cbz	r0, 403c9e <xTimerGenericCommand+0x5a>
  403c54:	461a      	mov	r2, r3
  403c56:	9100      	str	r1, [sp, #0]
  403c58:	9501      	str	r5, [sp, #4]
  403c5a:	9402      	str	r4, [sp, #8]
  403c5c:	2905      	cmp	r1, #5
  403c5e:	dc19      	bgt.n	403c94 <xTimerGenericCommand+0x50>
  403c60:	4b11      	ldr	r3, [pc, #68]	; (403ca8 <xTimerGenericCommand+0x64>)
  403c62:	4798      	blx	r3
  403c64:	2802      	cmp	r0, #2
  403c66:	f04f 0300 	mov.w	r3, #0
  403c6a:	bf0c      	ite	eq
  403c6c:	9a08      	ldreq	r2, [sp, #32]
  403c6e:	461a      	movne	r2, r3
  403c70:	4669      	mov	r1, sp
  403c72:	480c      	ldr	r0, [pc, #48]	; (403ca4 <xTimerGenericCommand+0x60>)
  403c74:	6800      	ldr	r0, [r0, #0]
  403c76:	4c0d      	ldr	r4, [pc, #52]	; (403cac <xTimerGenericCommand+0x68>)
  403c78:	47a0      	blx	r4
  403c7a:	b005      	add	sp, #20
  403c7c:	bd30      	pop	{r4, r5, pc}
  403c7e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403c82:	b672      	cpsid	i
  403c84:	f383 8811 	msr	BASEPRI, r3
  403c88:	f3bf 8f6f 	isb	sy
  403c8c:	f3bf 8f4f 	dsb	sy
  403c90:	b662      	cpsie	i
  403c92:	e7fe      	b.n	403c92 <xTimerGenericCommand+0x4e>
  403c94:	2300      	movs	r3, #0
  403c96:	4669      	mov	r1, sp
  403c98:	4c05      	ldr	r4, [pc, #20]	; (403cb0 <xTimerGenericCommand+0x6c>)
  403c9a:	47a0      	blx	r4
  403c9c:	e7ed      	b.n	403c7a <xTimerGenericCommand+0x36>
  403c9e:	2000      	movs	r0, #0
  403ca0:	e7eb      	b.n	403c7a <xTimerGenericCommand+0x36>
  403ca2:	bf00      	nop
  403ca4:	2040c938 	.word	0x2040c938
  403ca8:	00403981 	.word	0x00403981
  403cac:	00402a11 	.word	0x00402a11
  403cb0:	00402bf5 	.word	0x00402bf5

00403cb4 <prvSampleTimeNow>:
  403cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403cb8:	b082      	sub	sp, #8
  403cba:	4680      	mov	r8, r0
  403cbc:	4b24      	ldr	r3, [pc, #144]	; (403d50 <prvSampleTimeNow+0x9c>)
  403cbe:	4798      	blx	r3
  403cc0:	4607      	mov	r7, r0
  403cc2:	4b24      	ldr	r3, [pc, #144]	; (403d54 <prvSampleTimeNow+0xa0>)
  403cc4:	681b      	ldr	r3, [r3, #0]
  403cc6:	4298      	cmp	r0, r3
  403cc8:	d31b      	bcc.n	403d02 <prvSampleTimeNow+0x4e>
  403cca:	2300      	movs	r3, #0
  403ccc:	f8c8 3000 	str.w	r3, [r8]
  403cd0:	4b20      	ldr	r3, [pc, #128]	; (403d54 <prvSampleTimeNow+0xa0>)
  403cd2:	601f      	str	r7, [r3, #0]
  403cd4:	4638      	mov	r0, r7
  403cd6:	b002      	add	sp, #8
  403cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403cdc:	2100      	movs	r1, #0
  403cde:	9100      	str	r1, [sp, #0]
  403ce0:	460b      	mov	r3, r1
  403ce2:	4652      	mov	r2, sl
  403ce4:	4620      	mov	r0, r4
  403ce6:	4c1c      	ldr	r4, [pc, #112]	; (403d58 <prvSampleTimeNow+0xa4>)
  403ce8:	47a0      	blx	r4
  403cea:	b960      	cbnz	r0, 403d06 <prvSampleTimeNow+0x52>
  403cec:	f04f 0380 	mov.w	r3, #128	; 0x80
  403cf0:	b672      	cpsid	i
  403cf2:	f383 8811 	msr	BASEPRI, r3
  403cf6:	f3bf 8f6f 	isb	sy
  403cfa:	f3bf 8f4f 	dsb	sy
  403cfe:	b662      	cpsie	i
  403d00:	e7fe      	b.n	403d00 <prvSampleTimeNow+0x4c>
  403d02:	4d16      	ldr	r5, [pc, #88]	; (403d5c <prvSampleTimeNow+0xa8>)
  403d04:	4e16      	ldr	r6, [pc, #88]	; (403d60 <prvSampleTimeNow+0xac>)
  403d06:	682b      	ldr	r3, [r5, #0]
  403d08:	681a      	ldr	r2, [r3, #0]
  403d0a:	b1c2      	cbz	r2, 403d3e <prvSampleTimeNow+0x8a>
  403d0c:	68db      	ldr	r3, [r3, #12]
  403d0e:	f8d3 a000 	ldr.w	sl, [r3]
  403d12:	68dc      	ldr	r4, [r3, #12]
  403d14:	f104 0904 	add.w	r9, r4, #4
  403d18:	4648      	mov	r0, r9
  403d1a:	47b0      	blx	r6
  403d1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403d1e:	4620      	mov	r0, r4
  403d20:	4798      	blx	r3
  403d22:	69e3      	ldr	r3, [r4, #28]
  403d24:	2b01      	cmp	r3, #1
  403d26:	d1ee      	bne.n	403d06 <prvSampleTimeNow+0x52>
  403d28:	69a3      	ldr	r3, [r4, #24]
  403d2a:	4453      	add	r3, sl
  403d2c:	459a      	cmp	sl, r3
  403d2e:	d2d5      	bcs.n	403cdc <prvSampleTimeNow+0x28>
  403d30:	6063      	str	r3, [r4, #4]
  403d32:	6124      	str	r4, [r4, #16]
  403d34:	4649      	mov	r1, r9
  403d36:	6828      	ldr	r0, [r5, #0]
  403d38:	4b0a      	ldr	r3, [pc, #40]	; (403d64 <prvSampleTimeNow+0xb0>)
  403d3a:	4798      	blx	r3
  403d3c:	e7e3      	b.n	403d06 <prvSampleTimeNow+0x52>
  403d3e:	4a0a      	ldr	r2, [pc, #40]	; (403d68 <prvSampleTimeNow+0xb4>)
  403d40:	6810      	ldr	r0, [r2, #0]
  403d42:	4906      	ldr	r1, [pc, #24]	; (403d5c <prvSampleTimeNow+0xa8>)
  403d44:	6008      	str	r0, [r1, #0]
  403d46:	6013      	str	r3, [r2, #0]
  403d48:	2301      	movs	r3, #1
  403d4a:	f8c8 3000 	str.w	r3, [r8]
  403d4e:	e7bf      	b.n	403cd0 <prvSampleTimeNow+0x1c>
  403d50:	004032a5 	.word	0x004032a5
  403d54:	2040c934 	.word	0x2040c934
  403d58:	00403c45 	.word	0x00403c45
  403d5c:	2040c904 	.word	0x2040c904
  403d60:	00402359 	.word	0x00402359
  403d64:	00402325 	.word	0x00402325
  403d68:	2040c908 	.word	0x2040c908

00403d6c <prvTimerTask>:
  403d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403d70:	b088      	sub	sp, #32
  403d72:	4e75      	ldr	r6, [pc, #468]	; (403f48 <prvTimerTask+0x1dc>)
  403d74:	4f75      	ldr	r7, [pc, #468]	; (403f4c <prvTimerTask+0x1e0>)
  403d76:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 403f74 <prvTimerTask+0x208>
  403d7a:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 403f78 <prvTimerTask+0x20c>
  403d7e:	6833      	ldr	r3, [r6, #0]
  403d80:	681a      	ldr	r2, [r3, #0]
  403d82:	2a00      	cmp	r2, #0
  403d84:	f000 80ce 	beq.w	403f24 <prvTimerTask+0x1b8>
  403d88:	68db      	ldr	r3, [r3, #12]
  403d8a:	681c      	ldr	r4, [r3, #0]
  403d8c:	47b8      	blx	r7
  403d8e:	a804      	add	r0, sp, #16
  403d90:	4b6f      	ldr	r3, [pc, #444]	; (403f50 <prvTimerTask+0x1e4>)
  403d92:	4798      	blx	r3
  403d94:	4605      	mov	r5, r0
  403d96:	9b04      	ldr	r3, [sp, #16]
  403d98:	2b00      	cmp	r3, #0
  403d9a:	d144      	bne.n	403e26 <prvTimerTask+0xba>
  403d9c:	42a0      	cmp	r0, r4
  403d9e:	d212      	bcs.n	403dc6 <prvTimerTask+0x5a>
  403da0:	2200      	movs	r2, #0
  403da2:	1b61      	subs	r1, r4, r5
  403da4:	4b6b      	ldr	r3, [pc, #428]	; (403f54 <prvTimerTask+0x1e8>)
  403da6:	6818      	ldr	r0, [r3, #0]
  403da8:	4b6b      	ldr	r3, [pc, #428]	; (403f58 <prvTimerTask+0x1ec>)
  403daa:	4798      	blx	r3
  403dac:	4b6b      	ldr	r3, [pc, #428]	; (403f5c <prvTimerTask+0x1f0>)
  403dae:	4798      	blx	r3
  403db0:	2800      	cmp	r0, #0
  403db2:	d13a      	bne.n	403e2a <prvTimerTask+0xbe>
  403db4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403db8:	f8c9 3000 	str.w	r3, [r9]
  403dbc:	f3bf 8f4f 	dsb	sy
  403dc0:	f3bf 8f6f 	isb	sy
  403dc4:	e031      	b.n	403e2a <prvTimerTask+0xbe>
  403dc6:	4b65      	ldr	r3, [pc, #404]	; (403f5c <prvTimerTask+0x1f0>)
  403dc8:	4798      	blx	r3
  403dca:	6833      	ldr	r3, [r6, #0]
  403dcc:	68db      	ldr	r3, [r3, #12]
  403dce:	f8d3 a00c 	ldr.w	sl, [r3, #12]
  403dd2:	f10a 0004 	add.w	r0, sl, #4
  403dd6:	47c0      	blx	r8
  403dd8:	f8da 301c 	ldr.w	r3, [sl, #28]
  403ddc:	2b01      	cmp	r3, #1
  403dde:	d004      	beq.n	403dea <prvTimerTask+0x7e>
  403de0:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403de4:	4650      	mov	r0, sl
  403de6:	4798      	blx	r3
  403de8:	e01f      	b.n	403e2a <prvTimerTask+0xbe>
  403dea:	f8da 1018 	ldr.w	r1, [sl, #24]
  403dee:	4623      	mov	r3, r4
  403df0:	462a      	mov	r2, r5
  403df2:	4421      	add	r1, r4
  403df4:	4650      	mov	r0, sl
  403df6:	4d5a      	ldr	r5, [pc, #360]	; (403f60 <prvTimerTask+0x1f4>)
  403df8:	47a8      	blx	r5
  403dfa:	2801      	cmp	r0, #1
  403dfc:	d1f0      	bne.n	403de0 <prvTimerTask+0x74>
  403dfe:	2100      	movs	r1, #0
  403e00:	9100      	str	r1, [sp, #0]
  403e02:	460b      	mov	r3, r1
  403e04:	4622      	mov	r2, r4
  403e06:	4650      	mov	r0, sl
  403e08:	4c56      	ldr	r4, [pc, #344]	; (403f64 <prvTimerTask+0x1f8>)
  403e0a:	47a0      	blx	r4
  403e0c:	2800      	cmp	r0, #0
  403e0e:	d1e7      	bne.n	403de0 <prvTimerTask+0x74>
  403e10:	f04f 0380 	mov.w	r3, #128	; 0x80
  403e14:	b672      	cpsid	i
  403e16:	f383 8811 	msr	BASEPRI, r3
  403e1a:	f3bf 8f6f 	isb	sy
  403e1e:	f3bf 8f4f 	dsb	sy
  403e22:	b662      	cpsie	i
  403e24:	e7fe      	b.n	403e24 <prvTimerTask+0xb8>
  403e26:	4b4d      	ldr	r3, [pc, #308]	; (403f5c <prvTimerTask+0x1f0>)
  403e28:	4798      	blx	r3
  403e2a:	4d4a      	ldr	r5, [pc, #296]	; (403f54 <prvTimerTask+0x1e8>)
  403e2c:	4c4e      	ldr	r4, [pc, #312]	; (403f68 <prvTimerTask+0x1fc>)
  403e2e:	e006      	b.n	403e3e <prvTimerTask+0xd2>
  403e30:	9907      	ldr	r1, [sp, #28]
  403e32:	9806      	ldr	r0, [sp, #24]
  403e34:	9b05      	ldr	r3, [sp, #20]
  403e36:	4798      	blx	r3
  403e38:	9b04      	ldr	r3, [sp, #16]
  403e3a:	2b00      	cmp	r3, #0
  403e3c:	da09      	bge.n	403e52 <prvTimerTask+0xe6>
  403e3e:	2300      	movs	r3, #0
  403e40:	461a      	mov	r2, r3
  403e42:	a904      	add	r1, sp, #16
  403e44:	6828      	ldr	r0, [r5, #0]
  403e46:	47a0      	blx	r4
  403e48:	2800      	cmp	r0, #0
  403e4a:	d098      	beq.n	403d7e <prvTimerTask+0x12>
  403e4c:	9b04      	ldr	r3, [sp, #16]
  403e4e:	2b00      	cmp	r3, #0
  403e50:	dbee      	blt.n	403e30 <prvTimerTask+0xc4>
  403e52:	f8dd a018 	ldr.w	sl, [sp, #24]
  403e56:	f8da 3014 	ldr.w	r3, [sl, #20]
  403e5a:	b113      	cbz	r3, 403e62 <prvTimerTask+0xf6>
  403e5c:	f10a 0004 	add.w	r0, sl, #4
  403e60:	47c0      	blx	r8
  403e62:	a803      	add	r0, sp, #12
  403e64:	4b3a      	ldr	r3, [pc, #232]	; (403f50 <prvTimerTask+0x1e4>)
  403e66:	4798      	blx	r3
  403e68:	9b04      	ldr	r3, [sp, #16]
  403e6a:	2b09      	cmp	r3, #9
  403e6c:	d8e7      	bhi.n	403e3e <prvTimerTask+0xd2>
  403e6e:	a201      	add	r2, pc, #4	; (adr r2, 403e74 <prvTimerTask+0x108>)
  403e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403e74:	00403e9d 	.word	0x00403e9d
  403e78:	00403e9d 	.word	0x00403e9d
  403e7c:	00403e9d 	.word	0x00403e9d
  403e80:	00403e3f 	.word	0x00403e3f
  403e84:	00403ef1 	.word	0x00403ef1
  403e88:	00403f1d 	.word	0x00403f1d
  403e8c:	00403e9d 	.word	0x00403e9d
  403e90:	00403e9d 	.word	0x00403e9d
  403e94:	00403e3f 	.word	0x00403e3f
  403e98:	00403ef1 	.word	0x00403ef1
  403e9c:	9c05      	ldr	r4, [sp, #20]
  403e9e:	f8da 1018 	ldr.w	r1, [sl, #24]
  403ea2:	4623      	mov	r3, r4
  403ea4:	4602      	mov	r2, r0
  403ea6:	4421      	add	r1, r4
  403ea8:	4650      	mov	r0, sl
  403eaa:	4c2d      	ldr	r4, [pc, #180]	; (403f60 <prvTimerTask+0x1f4>)
  403eac:	47a0      	blx	r4
  403eae:	2801      	cmp	r0, #1
  403eb0:	d1bc      	bne.n	403e2c <prvTimerTask+0xc0>
  403eb2:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403eb6:	4650      	mov	r0, sl
  403eb8:	4798      	blx	r3
  403eba:	f8da 301c 	ldr.w	r3, [sl, #28]
  403ebe:	2b01      	cmp	r3, #1
  403ec0:	d1b4      	bne.n	403e2c <prvTimerTask+0xc0>
  403ec2:	f8da 2018 	ldr.w	r2, [sl, #24]
  403ec6:	2100      	movs	r1, #0
  403ec8:	9100      	str	r1, [sp, #0]
  403eca:	460b      	mov	r3, r1
  403ecc:	9805      	ldr	r0, [sp, #20]
  403ece:	4402      	add	r2, r0
  403ed0:	4650      	mov	r0, sl
  403ed2:	4c24      	ldr	r4, [pc, #144]	; (403f64 <prvTimerTask+0x1f8>)
  403ed4:	47a0      	blx	r4
  403ed6:	2800      	cmp	r0, #0
  403ed8:	d1a8      	bne.n	403e2c <prvTimerTask+0xc0>
  403eda:	f04f 0380 	mov.w	r3, #128	; 0x80
  403ede:	b672      	cpsid	i
  403ee0:	f383 8811 	msr	BASEPRI, r3
  403ee4:	f3bf 8f6f 	isb	sy
  403ee8:	f3bf 8f4f 	dsb	sy
  403eec:	b662      	cpsie	i
  403eee:	e7fe      	b.n	403eee <prvTimerTask+0x182>
  403ef0:	9905      	ldr	r1, [sp, #20]
  403ef2:	f8ca 1018 	str.w	r1, [sl, #24]
  403ef6:	b131      	cbz	r1, 403f06 <prvTimerTask+0x19a>
  403ef8:	4603      	mov	r3, r0
  403efa:	4602      	mov	r2, r0
  403efc:	4401      	add	r1, r0
  403efe:	4650      	mov	r0, sl
  403f00:	4c17      	ldr	r4, [pc, #92]	; (403f60 <prvTimerTask+0x1f4>)
  403f02:	47a0      	blx	r4
  403f04:	e792      	b.n	403e2c <prvTimerTask+0xc0>
  403f06:	f04f 0380 	mov.w	r3, #128	; 0x80
  403f0a:	b672      	cpsid	i
  403f0c:	f383 8811 	msr	BASEPRI, r3
  403f10:	f3bf 8f6f 	isb	sy
  403f14:	f3bf 8f4f 	dsb	sy
  403f18:	b662      	cpsie	i
  403f1a:	e7fe      	b.n	403f1a <prvTimerTask+0x1ae>
  403f1c:	4650      	mov	r0, sl
  403f1e:	4b13      	ldr	r3, [pc, #76]	; (403f6c <prvTimerTask+0x200>)
  403f20:	4798      	blx	r3
  403f22:	e783      	b.n	403e2c <prvTimerTask+0xc0>
  403f24:	47b8      	blx	r7
  403f26:	a804      	add	r0, sp, #16
  403f28:	4b09      	ldr	r3, [pc, #36]	; (403f50 <prvTimerTask+0x1e4>)
  403f2a:	4798      	blx	r3
  403f2c:	4605      	mov	r5, r0
  403f2e:	9b04      	ldr	r3, [sp, #16]
  403f30:	2b00      	cmp	r3, #0
  403f32:	f47f af78 	bne.w	403e26 <prvTimerTask+0xba>
  403f36:	4b0e      	ldr	r3, [pc, #56]	; (403f70 <prvTimerTask+0x204>)
  403f38:	681b      	ldr	r3, [r3, #0]
  403f3a:	681a      	ldr	r2, [r3, #0]
  403f3c:	fab2 f282 	clz	r2, r2
  403f40:	0952      	lsrs	r2, r2, #5
  403f42:	2400      	movs	r4, #0
  403f44:	e72d      	b.n	403da2 <prvTimerTask+0x36>
  403f46:	bf00      	nop
  403f48:	2040c904 	.word	0x2040c904
  403f4c:	00403295 	.word	0x00403295
  403f50:	00403cb5 	.word	0x00403cb5
  403f54:	2040c938 	.word	0x2040c938
  403f58:	00402ef9 	.word	0x00402ef9
  403f5c:	004033fd 	.word	0x004033fd
  403f60:	00403b1d 	.word	0x00403b1d
  403f64:	00403c45 	.word	0x00403c45
  403f68:	00402cf5 	.word	0x00402cf5
  403f6c:	00402709 	.word	0x00402709
  403f70:	2040c908 	.word	0x2040c908
  403f74:	e000ed04 	.word	0xe000ed04
  403f78:	00402359 	.word	0x00402359

00403f7c <AFEC_pot_Callback>:
  afec_channel_enable(AFEC_POT, AFEC_POT_CHANNEL);
  afec_start_software_conversion(AFEC_POT);
}

static void AFEC_pot_Callback(void)
{
  403f7c:	b510      	push	{r4, lr}
  403f7e:	b082      	sub	sp, #8
	afec->AFEC_CSELR = afec_ch;
  403f80:	4b07      	ldr	r3, [pc, #28]	; (403fa0 <AFEC_pot_Callback+0x24>)
  403f82:	2206      	movs	r2, #6
  403f84:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  403f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  adcData adc;
  adc.value = afec_channel_get_value(AFEC_POT, AFEC_POT_CHANNEL);
  403f88:	9301      	str	r3, [sp, #4]
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  403f8a:	2300      	movs	r3, #0
  403f8c:	aa02      	add	r2, sp, #8
  403f8e:	f842 3d08 	str.w	r3, [r2, #-8]!
  xQueueSendFromISR(xQueueADC, &adc, &xHigherPriorityTaskWoken);
  403f92:	a901      	add	r1, sp, #4
  403f94:	4803      	ldr	r0, [pc, #12]	; (403fa4 <AFEC_pot_Callback+0x28>)
  403f96:	6800      	ldr	r0, [r0, #0]
  403f98:	4c03      	ldr	r4, [pc, #12]	; (403fa8 <AFEC_pot_Callback+0x2c>)
  403f9a:	47a0      	blx	r4
}
  403f9c:	b002      	add	sp, #8
  403f9e:	bd10      	pop	{r4, pc}
  403fa0:	40064000 	.word	0x40064000
  403fa4:	2040ca48 	.word	0x2040ca48
  403fa8:	00402bf5 	.word	0x00402bf5

00403fac <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403fac:	b5f0      	push	{r4, r5, r6, r7, lr}
  403fae:	b083      	sub	sp, #12
  403fb0:	4605      	mov	r5, r0
  403fb2:	460c      	mov	r4, r1
	uint32_t val = 0;
  403fb4:	2300      	movs	r3, #0
  403fb6:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403fb8:	4b2a      	ldr	r3, [pc, #168]	; (404064 <usart_serial_getchar+0xb8>)
  403fba:	4298      	cmp	r0, r3
  403fbc:	d013      	beq.n	403fe6 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403fbe:	4b2a      	ldr	r3, [pc, #168]	; (404068 <usart_serial_getchar+0xbc>)
  403fc0:	4298      	cmp	r0, r3
  403fc2:	d018      	beq.n	403ff6 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403fc4:	4b29      	ldr	r3, [pc, #164]	; (40406c <usart_serial_getchar+0xc0>)
  403fc6:	4298      	cmp	r0, r3
  403fc8:	d01d      	beq.n	404006 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403fca:	4b29      	ldr	r3, [pc, #164]	; (404070 <usart_serial_getchar+0xc4>)
  403fcc:	429d      	cmp	r5, r3
  403fce:	d022      	beq.n	404016 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403fd0:	4b28      	ldr	r3, [pc, #160]	; (404074 <usart_serial_getchar+0xc8>)
  403fd2:	429d      	cmp	r5, r3
  403fd4:	d027      	beq.n	404026 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403fd6:	4b28      	ldr	r3, [pc, #160]	; (404078 <usart_serial_getchar+0xcc>)
  403fd8:	429d      	cmp	r5, r3
  403fda:	d02e      	beq.n	40403a <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403fdc:	4b27      	ldr	r3, [pc, #156]	; (40407c <usart_serial_getchar+0xd0>)
  403fde:	429d      	cmp	r5, r3
  403fe0:	d035      	beq.n	40404e <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403fe2:	b003      	add	sp, #12
  403fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  403fe6:	461f      	mov	r7, r3
  403fe8:	4e25      	ldr	r6, [pc, #148]	; (404080 <usart_serial_getchar+0xd4>)
  403fea:	4621      	mov	r1, r4
  403fec:	4638      	mov	r0, r7
  403fee:	47b0      	blx	r6
  403ff0:	2800      	cmp	r0, #0
  403ff2:	d1fa      	bne.n	403fea <usart_serial_getchar+0x3e>
  403ff4:	e7e9      	b.n	403fca <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  403ff6:	461f      	mov	r7, r3
  403ff8:	4e21      	ldr	r6, [pc, #132]	; (404080 <usart_serial_getchar+0xd4>)
  403ffa:	4621      	mov	r1, r4
  403ffc:	4638      	mov	r0, r7
  403ffe:	47b0      	blx	r6
  404000:	2800      	cmp	r0, #0
  404002:	d1fa      	bne.n	403ffa <usart_serial_getchar+0x4e>
  404004:	e7e4      	b.n	403fd0 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  404006:	461f      	mov	r7, r3
  404008:	4e1d      	ldr	r6, [pc, #116]	; (404080 <usart_serial_getchar+0xd4>)
  40400a:	4621      	mov	r1, r4
  40400c:	4638      	mov	r0, r7
  40400e:	47b0      	blx	r6
  404010:	2800      	cmp	r0, #0
  404012:	d1fa      	bne.n	40400a <usart_serial_getchar+0x5e>
  404014:	e7df      	b.n	403fd6 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  404016:	461f      	mov	r7, r3
  404018:	4e19      	ldr	r6, [pc, #100]	; (404080 <usart_serial_getchar+0xd4>)
  40401a:	4621      	mov	r1, r4
  40401c:	4638      	mov	r0, r7
  40401e:	47b0      	blx	r6
  404020:	2800      	cmp	r0, #0
  404022:	d1fa      	bne.n	40401a <usart_serial_getchar+0x6e>
  404024:	e7da      	b.n	403fdc <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  404026:	461e      	mov	r6, r3
  404028:	4d16      	ldr	r5, [pc, #88]	; (404084 <usart_serial_getchar+0xd8>)
  40402a:	a901      	add	r1, sp, #4
  40402c:	4630      	mov	r0, r6
  40402e:	47a8      	blx	r5
  404030:	2800      	cmp	r0, #0
  404032:	d1fa      	bne.n	40402a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  404034:	9b01      	ldr	r3, [sp, #4]
  404036:	7023      	strb	r3, [r4, #0]
  404038:	e7d3      	b.n	403fe2 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40403a:	461e      	mov	r6, r3
  40403c:	4d11      	ldr	r5, [pc, #68]	; (404084 <usart_serial_getchar+0xd8>)
  40403e:	a901      	add	r1, sp, #4
  404040:	4630      	mov	r0, r6
  404042:	47a8      	blx	r5
  404044:	2800      	cmp	r0, #0
  404046:	d1fa      	bne.n	40403e <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  404048:	9b01      	ldr	r3, [sp, #4]
  40404a:	7023      	strb	r3, [r4, #0]
  40404c:	e7c9      	b.n	403fe2 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  40404e:	461e      	mov	r6, r3
  404050:	4d0c      	ldr	r5, [pc, #48]	; (404084 <usart_serial_getchar+0xd8>)
  404052:	a901      	add	r1, sp, #4
  404054:	4630      	mov	r0, r6
  404056:	47a8      	blx	r5
  404058:	2800      	cmp	r0, #0
  40405a:	d1fa      	bne.n	404052 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  40405c:	9b01      	ldr	r3, [sp, #4]
  40405e:	7023      	strb	r3, [r4, #0]
}
  404060:	e7bf      	b.n	403fe2 <usart_serial_getchar+0x36>
  404062:	bf00      	nop
  404064:	400e0800 	.word	0x400e0800
  404068:	400e0a00 	.word	0x400e0a00
  40406c:	400e1a00 	.word	0x400e1a00
  404070:	400e1c00 	.word	0x400e1c00
  404074:	40024000 	.word	0x40024000
  404078:	40028000 	.word	0x40028000
  40407c:	4002c000 	.word	0x4002c000
  404080:	00401f1b 	.word	0x00401f1b
  404084:	00402027 	.word	0x00402027

00404088 <usart_serial_putchar>:
{
  404088:	b570      	push	{r4, r5, r6, lr}
  40408a:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  40408c:	4b2a      	ldr	r3, [pc, #168]	; (404138 <usart_serial_putchar+0xb0>)
  40408e:	4298      	cmp	r0, r3
  404090:	d013      	beq.n	4040ba <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  404092:	4b2a      	ldr	r3, [pc, #168]	; (40413c <usart_serial_putchar+0xb4>)
  404094:	4298      	cmp	r0, r3
  404096:	d019      	beq.n	4040cc <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  404098:	4b29      	ldr	r3, [pc, #164]	; (404140 <usart_serial_putchar+0xb8>)
  40409a:	4298      	cmp	r0, r3
  40409c:	d01f      	beq.n	4040de <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40409e:	4b29      	ldr	r3, [pc, #164]	; (404144 <usart_serial_putchar+0xbc>)
  4040a0:	4298      	cmp	r0, r3
  4040a2:	d025      	beq.n	4040f0 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  4040a4:	4b28      	ldr	r3, [pc, #160]	; (404148 <usart_serial_putchar+0xc0>)
  4040a6:	4298      	cmp	r0, r3
  4040a8:	d02b      	beq.n	404102 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  4040aa:	4b28      	ldr	r3, [pc, #160]	; (40414c <usart_serial_putchar+0xc4>)
  4040ac:	4298      	cmp	r0, r3
  4040ae:	d031      	beq.n	404114 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  4040b0:	4b27      	ldr	r3, [pc, #156]	; (404150 <usart_serial_putchar+0xc8>)
  4040b2:	4298      	cmp	r0, r3
  4040b4:	d037      	beq.n	404126 <usart_serial_putchar+0x9e>
	return 0;
  4040b6:	2000      	movs	r0, #0
}
  4040b8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4040ba:	461e      	mov	r6, r3
  4040bc:	4d25      	ldr	r5, [pc, #148]	; (404154 <usart_serial_putchar+0xcc>)
  4040be:	4621      	mov	r1, r4
  4040c0:	4630      	mov	r0, r6
  4040c2:	47a8      	blx	r5
  4040c4:	2800      	cmp	r0, #0
  4040c6:	d1fa      	bne.n	4040be <usart_serial_putchar+0x36>
		return 1;
  4040c8:	2001      	movs	r0, #1
  4040ca:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4040cc:	461e      	mov	r6, r3
  4040ce:	4d21      	ldr	r5, [pc, #132]	; (404154 <usart_serial_putchar+0xcc>)
  4040d0:	4621      	mov	r1, r4
  4040d2:	4630      	mov	r0, r6
  4040d4:	47a8      	blx	r5
  4040d6:	2800      	cmp	r0, #0
  4040d8:	d1fa      	bne.n	4040d0 <usart_serial_putchar+0x48>
		return 1;
  4040da:	2001      	movs	r0, #1
  4040dc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4040de:	461e      	mov	r6, r3
  4040e0:	4d1c      	ldr	r5, [pc, #112]	; (404154 <usart_serial_putchar+0xcc>)
  4040e2:	4621      	mov	r1, r4
  4040e4:	4630      	mov	r0, r6
  4040e6:	47a8      	blx	r5
  4040e8:	2800      	cmp	r0, #0
  4040ea:	d1fa      	bne.n	4040e2 <usart_serial_putchar+0x5a>
		return 1;
  4040ec:	2001      	movs	r0, #1
  4040ee:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4040f0:	461e      	mov	r6, r3
  4040f2:	4d18      	ldr	r5, [pc, #96]	; (404154 <usart_serial_putchar+0xcc>)
  4040f4:	4621      	mov	r1, r4
  4040f6:	4630      	mov	r0, r6
  4040f8:	47a8      	blx	r5
  4040fa:	2800      	cmp	r0, #0
  4040fc:	d1fa      	bne.n	4040f4 <usart_serial_putchar+0x6c>
		return 1;
  4040fe:	2001      	movs	r0, #1
  404100:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  404102:	461e      	mov	r6, r3
  404104:	4d14      	ldr	r5, [pc, #80]	; (404158 <usart_serial_putchar+0xd0>)
  404106:	4621      	mov	r1, r4
  404108:	4630      	mov	r0, r6
  40410a:	47a8      	blx	r5
  40410c:	2800      	cmp	r0, #0
  40410e:	d1fa      	bne.n	404106 <usart_serial_putchar+0x7e>
		return 1;
  404110:	2001      	movs	r0, #1
  404112:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  404114:	461e      	mov	r6, r3
  404116:	4d10      	ldr	r5, [pc, #64]	; (404158 <usart_serial_putchar+0xd0>)
  404118:	4621      	mov	r1, r4
  40411a:	4630      	mov	r0, r6
  40411c:	47a8      	blx	r5
  40411e:	2800      	cmp	r0, #0
  404120:	d1fa      	bne.n	404118 <usart_serial_putchar+0x90>
		return 1;
  404122:	2001      	movs	r0, #1
  404124:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  404126:	461e      	mov	r6, r3
  404128:	4d0b      	ldr	r5, [pc, #44]	; (404158 <usart_serial_putchar+0xd0>)
  40412a:	4621      	mov	r1, r4
  40412c:	4630      	mov	r0, r6
  40412e:	47a8      	blx	r5
  404130:	2800      	cmp	r0, #0
  404132:	d1fa      	bne.n	40412a <usart_serial_putchar+0xa2>
		return 1;
  404134:	2001      	movs	r0, #1
  404136:	bd70      	pop	{r4, r5, r6, pc}
  404138:	400e0800 	.word	0x400e0800
  40413c:	400e0a00 	.word	0x400e0a00
  404140:	400e1a00 	.word	0x400e1a00
  404144:	400e1c00 	.word	0x400e1c00
  404148:	40024000 	.word	0x40024000
  40414c:	40028000 	.word	0x40028000
  404150:	4002c000 	.word	0x4002c000
  404154:	00401f09 	.word	0x00401f09
  404158:	00402011 	.word	0x00402011

0040415c <TC1_Handler>:
{
  40415c:	b500      	push	{lr}
  40415e:	b083      	sub	sp, #12
  ul_dummy = tc_get_status(TC0, 1);
  404160:	2101      	movs	r1, #1
  404162:	4806      	ldr	r0, [pc, #24]	; (40417c <TC1_Handler+0x20>)
  404164:	4b06      	ldr	r3, [pc, #24]	; (404180 <TC1_Handler+0x24>)
  404166:	4798      	blx	r3
  404168:	9001      	str	r0, [sp, #4]
  UNUSED(ul_dummy);
  40416a:	9b01      	ldr	r3, [sp, #4]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  40416c:	4b05      	ldr	r3, [pc, #20]	; (404184 <TC1_Handler+0x28>)
  40416e:	2240      	movs	r2, #64	; 0x40
  404170:	615a      	str	r2, [r3, #20]
	afec->AFEC_CR = AFEC_CR_START;
  404172:	2202      	movs	r2, #2
  404174:	601a      	str	r2, [r3, #0]
}
  404176:	b003      	add	sp, #12
  404178:	f85d fb04 	ldr.w	pc, [sp], #4
  40417c:	4000c000 	.word	0x4000c000
  404180:	00400507 	.word	0x00400507
  404184:	40064000 	.word	0x40064000

00404188 <vApplicationStackOverflowHook>:
/**
* \brief Called if stack overflow during execution
*/
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask,
                                          signed char *pcTaskName)
{
  404188:	b508      	push	{r3, lr}
  printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  40418a:	460a      	mov	r2, r1
  40418c:	4601      	mov	r1, r0
  40418e:	4802      	ldr	r0, [pc, #8]	; (404198 <vApplicationStackOverflowHook+0x10>)
  404190:	4b02      	ldr	r3, [pc, #8]	; (40419c <vApplicationStackOverflowHook+0x14>)
  404192:	4798      	blx	r3
  404194:	e7fe      	b.n	404194 <vApplicationStackOverflowHook+0xc>
  404196:	bf00      	nop
  404198:	00409a14 	.word	0x00409a14
  40419c:	004069e1 	.word	0x004069e1

004041a0 <vApplicationTickHook>:

/**
* \brief This function is called by FreeRTOS each tick
*/
extern void vApplicationTickHook(void)
{
  4041a0:	4770      	bx	lr

004041a2 <vApplicationMallocFailedHook>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4041a2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4041a6:	b672      	cpsid	i
  4041a8:	f383 8811 	msr	BASEPRI, r3
  4041ac:	f3bf 8f6f 	isb	sy
  4041b0:	f3bf 8f4f 	dsb	sy
  4041b4:	b662      	cpsie	i
  4041b6:	e7fe      	b.n	4041b6 <vApplicationMallocFailedHook+0x14>

004041b8 <draw_screen>:
/************************************************************************/
/* funcoes                                                              */
/************************************************************************/

void draw_screen(void)
{
  4041b8:	b510      	push	{r4, lr}
  ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  4041ba:	4806      	ldr	r0, [pc, #24]	; (4041d4 <draw_screen+0x1c>)
  4041bc:	4b06      	ldr	r3, [pc, #24]	; (4041d8 <draw_screen+0x20>)
  4041be:	4798      	blx	r3
  ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH - 1, ILI9488_LCD_HEIGHT - 1);
  4041c0:	f240 133f 	movw	r3, #319	; 0x13f
  4041c4:	f240 12df 	movw	r2, #479	; 0x1df
  4041c8:	2100      	movs	r1, #0
  4041ca:	4608      	mov	r0, r1
  4041cc:	4c03      	ldr	r4, [pc, #12]	; (4041dc <draw_screen+0x24>)
  4041ce:	47a0      	blx	r4
  4041d0:	bd10      	pop	{r4, pc}
  4041d2:	bf00      	nop
  4041d4:	00fcfcfc 	.word	0x00fcfcfc
  4041d8:	004012c5 	.word	0x004012c5
  4041dc:	00401515 	.word	0x00401515

004041e0 <mxt_handler>:
    p++;
  }
}

void mxt_handler(struct mxt_device *device, uint *x, uint *y)
{
  4041e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4041e4:	b084      	sub	sp, #16
  4041e6:	4605      	mov	r5, r0
  4041e8:	4689      	mov	r9, r1
  4041ea:	4690      	mov	r8, r2

  /* Temporary touch event data struct */
  struct mxt_touch_event touch_event;

  /* first touch only */
  uint first = 0;
  4041ec:	f04f 0a00 	mov.w	sl, #0
  uint8_t i = 0; /* Iterator */
  4041f0:	4654      	mov	r4, sl
  * maximum 2 events at the time */
  do
  {

    /* Read next next touch event in the queue, discard if read fails */
    if (mxt_read_touch_event(device, &touch_event) != STATUS_OK)
  4041f2:	4f15      	ldr	r7, [pc, #84]	; (404248 <mxt_handler+0x68>)

    i++;

    /* Check if there is still messages in the queue and
    * if we have reached the maximum numbers of events */
  } while ((mxt_is_message_pending(device)) & (i < MAX_ENTRIES));
  4041f4:	4e15      	ldr	r6, [pc, #84]	; (40424c <mxt_handler+0x6c>)
  4041f6:	e008      	b.n	40420a <mxt_handler+0x2a>
    i++;
  4041f8:	3401      	adds	r4, #1
  4041fa:	b2e4      	uxtb	r4, r4
  4041fc:	f04f 0a01 	mov.w	sl, #1
  } while ((mxt_is_message_pending(device)) & (i < MAX_ENTRIES));
  404200:	4628      	mov	r0, r5
  404202:	47b0      	blx	r6
  404204:	2c02      	cmp	r4, #2
  404206:	d81b      	bhi.n	404240 <mxt_handler+0x60>
  404208:	b1d0      	cbz	r0, 404240 <mxt_handler+0x60>
    if (mxt_read_touch_event(device, &touch_event) != STATUS_OK)
  40420a:	a901      	add	r1, sp, #4
  40420c:	4628      	mov	r0, r5
  40420e:	47b8      	blx	r7
  404210:	2800      	cmp	r0, #0
  404212:	d1f5      	bne.n	404200 <mxt_handler+0x20>
    if (first == 0)
  404214:	f1ba 0f00 	cmp.w	sl, #0
  404218:	d1ee      	bne.n	4041f8 <mxt_handler+0x18>
      *x = convert_axis_system_x(touch_event.y);
  40421a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  return ILI9488_LCD_WIDTH - ILI9488_LCD_WIDTH * touch_y / 4096;
  40421e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  404222:	f3c3 13d3 	ubfx	r3, r3, #7, #20
  404226:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
      *x = convert_axis_system_x(touch_event.y);
  40422a:	f8c9 3000 	str.w	r3, [r9]
      *y = convert_axis_system_y(touch_event.x);
  40422e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  return ILI9488_LCD_HEIGHT * touch_x / 4096;
  404232:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  404236:	f3c3 1393 	ubfx	r3, r3, #6, #20
      *y = convert_axis_system_y(touch_event.x);
  40423a:	f8c8 3000 	str.w	r3, [r8]
  40423e:	e7db      	b.n	4041f8 <mxt_handler+0x18>
}
  404240:	b004      	add	sp, #16
  404242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404246:	bf00      	nop
  404248:	00400ae5 	.word	0x00400ae5
  40424c:	00400a75 	.word	0x00400a75

00404250 <task_mxt>:
/************************************************************************/
/* tasks                                                                */
/************************************************************************/

void task_mxt(void)
{
  404250:	b580      	push	{r7, lr}
  404252:	b08a      	sub	sp, #40	; 0x28

  struct mxt_device device; /* Device data container */
  mxt_init(&device);        /* Initialize the mXT touch device */
  404254:	a802      	add	r0, sp, #8
  404256:	4b0c      	ldr	r3, [pc, #48]	; (404288 <task_mxt+0x38>)
  404258:	4798      	blx	r3

  while (true)
  {
    /* Check for any pending messages and run message handler if any
    * message is found in the queue */
    if (mxt_is_message_pending(&device))
  40425a:	4c0c      	ldr	r4, [pc, #48]	; (40428c <task_mxt+0x3c>)
    {
      mxt_handler(&device, &touch.x, &touch.y);
  40425c:	4f0c      	ldr	r7, [pc, #48]	; (404290 <task_mxt+0x40>)
      xQueueSend(xQueueTouch, &touch, 0); /* send mesage to queue */
  40425e:	4e0d      	ldr	r6, [pc, #52]	; (404294 <task_mxt+0x44>)
  404260:	e002      	b.n	404268 <task_mxt+0x18>
    }
    vTaskDelay(100);
  404262:	2064      	movs	r0, #100	; 0x64
  404264:	4b0c      	ldr	r3, [pc, #48]	; (404298 <task_mxt+0x48>)
  404266:	4798      	blx	r3
    if (mxt_is_message_pending(&device))
  404268:	a802      	add	r0, sp, #8
  40426a:	47a0      	blx	r4
  40426c:	2800      	cmp	r0, #0
  40426e:	d0f8      	beq.n	404262 <task_mxt+0x12>
      mxt_handler(&device, &touch.x, &touch.y);
  404270:	aa01      	add	r2, sp, #4
  404272:	4669      	mov	r1, sp
  404274:	a802      	add	r0, sp, #8
  404276:	47b8      	blx	r7
      xQueueSend(xQueueTouch, &touch, 0); /* send mesage to queue */
  404278:	2300      	movs	r3, #0
  40427a:	461a      	mov	r2, r3
  40427c:	4669      	mov	r1, sp
  40427e:	6830      	ldr	r0, [r6, #0]
  404280:	4d06      	ldr	r5, [pc, #24]	; (40429c <task_mxt+0x4c>)
  404282:	47a8      	blx	r5
  404284:	e7ed      	b.n	404262 <task_mxt+0x12>
  404286:	bf00      	nop
  404288:	00400581 	.word	0x00400581
  40428c:	00400a75 	.word	0x00400a75
  404290:	004041e1 	.word	0x004041e1
  404294:	2040ca5c 	.word	0x2040ca5c
  404298:	0040351d 	.word	0x0040351d
  40429c:	00402a11 	.word	0x00402a11

004042a0 <calc_x>:
double calc_x(uint plot, int raio){
  4042a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4042a2:	460d      	mov	r5, r1
	return raio * cos(2*PI*plot/4095);
  4042a4:	4b10      	ldr	r3, [pc, #64]	; (4042e8 <calc_x+0x48>)
  4042a6:	4798      	blx	r3
  4042a8:	4c10      	ldr	r4, [pc, #64]	; (4042ec <calc_x+0x4c>)
  4042aa:	a30b      	add	r3, pc, #44	; (adr r3, 4042d8 <calc_x+0x38>)
  4042ac:	e9d3 2300 	ldrd	r2, r3, [r3]
  4042b0:	47a0      	blx	r4
  4042b2:	a30b      	add	r3, pc, #44	; (adr r3, 4042e0 <calc_x+0x40>)
  4042b4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4042b8:	4e0d      	ldr	r6, [pc, #52]	; (4042f0 <calc_x+0x50>)
  4042ba:	47b0      	blx	r6
  4042bc:	4b0d      	ldr	r3, [pc, #52]	; (4042f4 <calc_x+0x54>)
  4042be:	4798      	blx	r3
  4042c0:	4606      	mov	r6, r0
  4042c2:	460f      	mov	r7, r1
  4042c4:	4628      	mov	r0, r5
  4042c6:	4b0c      	ldr	r3, [pc, #48]	; (4042f8 <calc_x+0x58>)
  4042c8:	4798      	blx	r3
  4042ca:	4632      	mov	r2, r6
  4042cc:	463b      	mov	r3, r7
  4042ce:	47a0      	blx	r4
}
  4042d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4042d2:	bf00      	nop
  4042d4:	f3af 8000 	nop.w
  4042d8:	53c8d4f1 	.word	0x53c8d4f1
  4042dc:	401921fb 	.word	0x401921fb
  4042e0:	00000000 	.word	0x00000000
  4042e4:	40affe00 	.word	0x40affe00
  4042e8:	004062e1 	.word	0x004062e1
  4042ec:	004063cd 	.word	0x004063cd
  4042f0:	00406621 	.word	0x00406621
  4042f4:	00404c85 	.word	0x00404c85
  4042f8:	00406301 	.word	0x00406301
  4042fc:	00000000 	.word	0x00000000

00404300 <calc_y>:
double calc_y(uint plot, int raio){
  404300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404302:	460d      	mov	r5, r1
	return raio * sin(2*PI*plot/4095);
  404304:	4b10      	ldr	r3, [pc, #64]	; (404348 <calc_y+0x48>)
  404306:	4798      	blx	r3
  404308:	4c10      	ldr	r4, [pc, #64]	; (40434c <calc_y+0x4c>)
  40430a:	a30b      	add	r3, pc, #44	; (adr r3, 404338 <calc_y+0x38>)
  40430c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404310:	47a0      	blx	r4
  404312:	a30b      	add	r3, pc, #44	; (adr r3, 404340 <calc_y+0x40>)
  404314:	e9d3 2300 	ldrd	r2, r3, [r3]
  404318:	4e0d      	ldr	r6, [pc, #52]	; (404350 <calc_y+0x50>)
  40431a:	47b0      	blx	r6
  40431c:	4b0d      	ldr	r3, [pc, #52]	; (404354 <calc_y+0x54>)
  40431e:	4798      	blx	r3
  404320:	4606      	mov	r6, r0
  404322:	460f      	mov	r7, r1
  404324:	4628      	mov	r0, r5
  404326:	4b0c      	ldr	r3, [pc, #48]	; (404358 <calc_y+0x58>)
  404328:	4798      	blx	r3
  40432a:	4632      	mov	r2, r6
  40432c:	463b      	mov	r3, r7
  40432e:	47a0      	blx	r4
}
  404330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404332:	bf00      	nop
  404334:	f3af 8000 	nop.w
  404338:	53c8d4f1 	.word	0x53c8d4f1
  40433c:	401921fb 	.word	0x401921fb
  404340:	00000000 	.word	0x00000000
  404344:	40affe00 	.word	0x40affe00
  404348:	004062e1 	.word	0x004062e1
  40434c:	004063cd 	.word	0x004063cd
  404350:	00406621 	.word	0x00406621
  404354:	00404d19 	.word	0x00404d19
  404358:	00406301 	.word	0x00406301

0040435c <task_lcd>:
  }
}

void task_lcd(void)
{
  40435c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404360:	b087      	sub	sp, #28
 xQueueTouch = xQueueCreate( 10, sizeof( touchData ) );
  404362:	2200      	movs	r2, #0
  404364:	2108      	movs	r1, #8
  404366:	200a      	movs	r0, #10
  404368:	4c39      	ldr	r4, [pc, #228]	; (404450 <task_lcd+0xf4>)
  40436a:	47a0      	blx	r4
  40436c:	4b39      	ldr	r3, [pc, #228]	; (404454 <task_lcd+0xf8>)
  40436e:	6018      	str	r0, [r3, #0]
 xQueuePlot = xQueueCreate(10, sizeof(t_plot));
  404370:	2200      	movs	r2, #0
  404372:	2108      	movs	r1, #8
  404374:	200a      	movs	r0, #10
  404376:	47a0      	blx	r4
  404378:	4b37      	ldr	r3, [pc, #220]	; (404458 <task_lcd+0xfc>)
  40437a:	6018      	str	r0, [r3, #0]
  g_ili9488_display_opt.ul_width = ILI9488_LCD_WIDTH;
  40437c:	4837      	ldr	r0, [pc, #220]	; (40445c <task_lcd+0x100>)
  40437e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  404382:	6003      	str	r3, [r0, #0]
  g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
  404384:	f44f 73a0 	mov.w	r3, #320	; 0x140
  404388:	6043      	str	r3, [r0, #4]
  g_ili9488_display_opt.foreground_color = COLOR_CONVERT(COLOR_WHITE);
  40438a:	4b35      	ldr	r3, [pc, #212]	; (404460 <task_lcd+0x104>)
  40438c:	6083      	str	r3, [r0, #8]
  g_ili9488_display_opt.background_color = COLOR_CONVERT(COLOR_WHITE);
  40438e:	60c3      	str	r3, [r0, #12]
  ili9488_init(&g_ili9488_display_opt);
  404390:	4b34      	ldr	r3, [pc, #208]	; (404464 <task_lcd+0x108>)
  404392:	4798      	blx	r3
  ili9488_set_display_direction(PORTRAIT);
  404394:	2001      	movs	r0, #1
  404396:	4b34      	ldr	r3, [pc, #208]	; (404468 <task_lcd+0x10c>)
  404398:	4798      	blx	r3
 configure_lcd();
 draw_screen();
  40439a:	4b34      	ldr	r3, [pc, #208]	; (40446c <task_lcd+0x110>)
  40439c:	4798      	blx	r3
 t_plot plot;
 // struct local para armazenar msg enviada pela task do mxt
 touchData touch;
 int raio = 80;
 
 ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  40439e:	2000      	movs	r0, #0
  4043a0:	4b33      	ldr	r3, [pc, #204]	; (404470 <task_lcd+0x114>)
  4043a2:	4798      	blx	r3
 ili9488_draw_filled_circle(ILI9488_LCD_WIDTH/2, ILI9488_LCD_HEIGHT/2, 105 );
  4043a4:	2269      	movs	r2, #105	; 0x69
  4043a6:	21a0      	movs	r1, #160	; 0xa0
  4043a8:	20f0      	movs	r0, #240	; 0xf0
  4043aa:	4b32      	ldr	r3, [pc, #200]	; (404474 <task_lcd+0x118>)
  4043ac:	4798      	blx	r3
			 //ili9488_set_foreground_color(COLOR_CONVERT(COLOR_RED));
			 //ili9488_draw_filled_circle(x, ILI9488_LCD_HEIGHT - plot.filtrado / 16, 2);
			 
			 //plot raw
			 ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
			 ili9488_draw_filled_circle(calc_x(plot.raw, raio)+ ILI9488_LCD_WIDTH/2,
  4043ae:	f04f 0b50 	mov.w	fp, #80	; 0x50
	 if (xQueueReceive( xQueueTouch, &(touch), ( TickType_t )  500 / portTICK_PERIOD_MS)) {
  4043b2:	4e28      	ldr	r6, [pc, #160]	; (404454 <task_lcd+0xf8>)
  4043b4:	2500      	movs	r5, #0
  4043b6:	4c30      	ldr	r4, [pc, #192]	; (404478 <task_lcd+0x11c>)
  4043b8:	462b      	mov	r3, r5
  4043ba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  4043be:	a902      	add	r1, sp, #8
  4043c0:	6830      	ldr	r0, [r6, #0]
  4043c2:	47a0      	blx	r4
	 if (xQueueReceive( xQueuePlot, &(plot), ( TickType_t )  100 / portTICK_PERIOD_MS)) {
  4043c4:	462b      	mov	r3, r5
  4043c6:	2264      	movs	r2, #100	; 0x64
  4043c8:	a904      	add	r1, sp, #16
  4043ca:	4823      	ldr	r0, [pc, #140]	; (404458 <task_lcd+0xfc>)
  4043cc:	6800      	ldr	r0, [r0, #0]
  4043ce:	47a0      	blx	r4
  4043d0:	2800      	cmp	r0, #0
  4043d2:	d0f1      	beq.n	4043b8 <task_lcd+0x5c>
			 ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
  4043d4:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
  4043d8:	4f25      	ldr	r7, [pc, #148]	; (404470 <task_lcd+0x114>)
  4043da:	47b8      	blx	r7
			 ili9488_draw_filled_circle(calc_x(plot.raw, raio)+ ILI9488_LCD_WIDTH/2,
  4043dc:	9c04      	ldr	r4, [sp, #16]
  4043de:	4659      	mov	r1, fp
  4043e0:	4620      	mov	r0, r4
  4043e2:	4e26      	ldr	r6, [pc, #152]	; (40447c <task_lcd+0x120>)
  4043e4:	47b0      	blx	r6
  4043e6:	e9cd 0100 	strd	r0, r1, [sp]
			 calc_y(plot.raw, raio)+ ILI9488_LCD_HEIGHT/2, 2);
  4043ea:	4659      	mov	r1, fp
  4043ec:	4620      	mov	r0, r4
  4043ee:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 404490 <task_lcd+0x134>
  4043f2:	47d0      	blx	sl
  4043f4:	4d22      	ldr	r5, [pc, #136]	; (404480 <task_lcd+0x124>)
  4043f6:	2200      	movs	r2, #0
  4043f8:	4b22      	ldr	r3, [pc, #136]	; (404484 <task_lcd+0x128>)
  4043fa:	47a8      	blx	r5
			 ili9488_draw_filled_circle(calc_x(plot.raw, raio)+ ILI9488_LCD_WIDTH/2,
  4043fc:	4c22      	ldr	r4, [pc, #136]	; (404488 <task_lcd+0x12c>)
  4043fe:	47a0      	blx	r4
  404400:	4680      	mov	r8, r0
  404402:	2200      	movs	r2, #0
  404404:	4b21      	ldr	r3, [pc, #132]	; (40448c <task_lcd+0x130>)
  404406:	e9dd 0100 	ldrd	r0, r1, [sp]
  40440a:	47a8      	blx	r5
  40440c:	47a0      	blx	r4
  40440e:	2202      	movs	r2, #2
  404410:	4641      	mov	r1, r8
  404412:	f8df 9060 	ldr.w	r9, [pc, #96]	; 404474 <task_lcd+0x118>
  404416:	47c8      	blx	r9
			 
			 ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  404418:	4811      	ldr	r0, [pc, #68]	; (404460 <task_lcd+0x104>)
  40441a:	47b8      	blx	r7
			 ili9488_draw_filled_circle(calc_x(plot.raw -1, raio)+ ILI9488_LCD_WIDTH/2,
  40441c:	9b04      	ldr	r3, [sp, #16]
  40441e:	f103 38ff 	add.w	r8, r3, #4294967295
  404422:	4659      	mov	r1, fp
  404424:	4640      	mov	r0, r8
  404426:	47b0      	blx	r6
  404428:	4606      	mov	r6, r0
  40442a:	460f      	mov	r7, r1
			 calc_y(plot.raw-1, raio)+ ILI9488_LCD_HEIGHT/2, 2);
  40442c:	4659      	mov	r1, fp
  40442e:	4640      	mov	r0, r8
  404430:	47d0      	blx	sl
  404432:	2200      	movs	r2, #0
  404434:	4b13      	ldr	r3, [pc, #76]	; (404484 <task_lcd+0x128>)
  404436:	47a8      	blx	r5
			 ili9488_draw_filled_circle(calc_x(plot.raw -1, raio)+ ILI9488_LCD_WIDTH/2,
  404438:	47a0      	blx	r4
  40443a:	4680      	mov	r8, r0
  40443c:	2200      	movs	r2, #0
  40443e:	4b13      	ldr	r3, [pc, #76]	; (40448c <task_lcd+0x130>)
  404440:	4630      	mov	r0, r6
  404442:	4639      	mov	r1, r7
  404444:	47a8      	blx	r5
  404446:	47a0      	blx	r4
  404448:	2202      	movs	r2, #2
  40444a:	4641      	mov	r1, r8
  40444c:	47c8      	blx	r9
  40444e:	e7b0      	b.n	4043b2 <task_lcd+0x56>
  404450:	00402995 	.word	0x00402995
  404454:	2040ca5c 	.word	0x2040ca5c
  404458:	2040ca44 	.word	0x2040ca44
  40445c:	2040ca4c 	.word	0x2040ca4c
  404460:	00fcfcfc 	.word	0x00fcfcfc
  404464:	00401351 	.word	0x00401351
  404468:	00401205 	.word	0x00401205
  40446c:	004041b9 	.word	0x004041b9
  404470:	004012c5 	.word	0x004012c5
  404474:	004015d1 	.word	0x004015d1
  404478:	00402cf5 	.word	0x00402cf5
  40447c:	004042a1 	.word	0x004042a1
  404480:	00406069 	.word	0x00406069
  404484:	40640000 	.word	0x40640000
  404488:	00406951 	.word	0x00406951
  40448c:	406e0000 	.word	0x406e0000
  404490:	00404301 	.word	0x00404301

00404494 <TC_init>:
{
  404494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404498:	b085      	sub	sp, #20
  40449a:	4606      	mov	r6, r0
  40449c:	460c      	mov	r4, r1
  40449e:	4617      	mov	r7, r2
  4044a0:	4698      	mov	r8, r3
  pmc_enable_periph_clk(ID_TC);
  4044a2:	4608      	mov	r0, r1
  4044a4:	4b1e      	ldr	r3, [pc, #120]	; (404520 <TC_init+0x8c>)
  4044a6:	4798      	blx	r3
  tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4044a8:	4d1e      	ldr	r5, [pc, #120]	; (404524 <TC_init+0x90>)
  4044aa:	9500      	str	r5, [sp, #0]
  4044ac:	ab02      	add	r3, sp, #8
  4044ae:	aa03      	add	r2, sp, #12
  4044b0:	4629      	mov	r1, r5
  4044b2:	4640      	mov	r0, r8
  4044b4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 404544 <TC_init+0xb0>
  4044b8:	47c8      	blx	r9
  tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  4044ba:	9a02      	ldr	r2, [sp, #8]
  4044bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4044c0:	4639      	mov	r1, r7
  4044c2:	4630      	mov	r0, r6
  4044c4:	4b18      	ldr	r3, [pc, #96]	; (404528 <TC_init+0x94>)
  4044c6:	4798      	blx	r3
  tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  4044c8:	9a03      	ldr	r2, [sp, #12]
  4044ca:	fbb5 f2f2 	udiv	r2, r5, r2
  4044ce:	fbb2 f2f8 	udiv	r2, r2, r8
  4044d2:	4639      	mov	r1, r7
  4044d4:	4630      	mov	r0, r6
  4044d6:	4b15      	ldr	r3, [pc, #84]	; (40452c <TC_init+0x98>)
  4044d8:	4798      	blx	r3
  NVIC_SetPriority((IRQn_Type)ID_TC, 4);
  4044da:	b263      	sxtb	r3, r4
  if(IRQn < 0) {
  4044dc:	2b00      	cmp	r3, #0
  4044de:	db17      	blt.n	404510 <TC_init+0x7c>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4044e0:	4a13      	ldr	r2, [pc, #76]	; (404530 <TC_init+0x9c>)
  4044e2:	2180      	movs	r1, #128	; 0x80
  4044e4:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4044e6:	095b      	lsrs	r3, r3, #5
  4044e8:	f004 041f 	and.w	r4, r4, #31
  4044ec:	2201      	movs	r2, #1
  4044ee:	fa02 f404 	lsl.w	r4, r2, r4
  4044f2:	4a10      	ldr	r2, [pc, #64]	; (404534 <TC_init+0xa0>)
  4044f4:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  4044f8:	2210      	movs	r2, #16
  4044fa:	4639      	mov	r1, r7
  4044fc:	4630      	mov	r0, r6
  4044fe:	4b0e      	ldr	r3, [pc, #56]	; (404538 <TC_init+0xa4>)
  404500:	4798      	blx	r3
  tc_start(TC, TC_CHANNEL);
  404502:	4639      	mov	r1, r7
  404504:	4630      	mov	r0, r6
  404506:	4b0d      	ldr	r3, [pc, #52]	; (40453c <TC_init+0xa8>)
  404508:	4798      	blx	r3
}
  40450a:	b005      	add	sp, #20
  40450c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  404510:	f004 010f 	and.w	r1, r4, #15
  404514:	4a0a      	ldr	r2, [pc, #40]	; (404540 <TC_init+0xac>)
  404516:	440a      	add	r2, r1
  404518:	2180      	movs	r1, #128	; 0x80
  40451a:	7611      	strb	r1, [r2, #24]
  40451c:	e7e3      	b.n	4044e6 <TC_init+0x52>
  40451e:	bf00      	nop
  404520:	00401b3d 	.word	0x00401b3d
  404524:	11e1a300 	.word	0x11e1a300
  404528:	004004d5 	.word	0x004004d5
  40452c:	004004f7 	.word	0x004004f7
  404530:	e000e400 	.word	0xe000e400
  404534:	e000e100 	.word	0xe000e100
  404538:	004004ff 	.word	0x004004ff
  40453c:	004004ef 	.word	0x004004ef
  404540:	e000ecfc 	.word	0xe000ecfc
  404544:	0040050f 	.word	0x0040050f

00404548 <task_adc>:
	 }
 }
}

void task_adc(void)
{
  404548:	b5f0      	push	{r4, r5, r6, r7, lr}
  40454a:	b0b7      	sub	sp, #220	; 0xdc
  afec_enable(afec);
  40454c:	4c3c      	ldr	r4, [pc, #240]	; (404640 <task_adc+0xf8>)
  40454e:	4620      	mov	r0, r4
  404550:	4b3c      	ldr	r3, [pc, #240]	; (404644 <task_adc+0xfc>)
  404552:	4798      	blx	r3
  afec_get_config_defaults(&afec_cfg);
  404554:	a806      	add	r0, sp, #24
  404556:	4b3c      	ldr	r3, [pc, #240]	; (404648 <task_adc+0x100>)
  404558:	4798      	blx	r3
  afec_init(afec, &afec_cfg);
  40455a:	a906      	add	r1, sp, #24
  40455c:	4620      	mov	r0, r4
  40455e:	4b3b      	ldr	r3, [pc, #236]	; (40464c <task_adc+0x104>)
  404560:	4798      	blx	r3
	reg = afec->AFEC_MR;
  404562:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  404564:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  404568:	6063      	str	r3, [r4, #4]
  afec_ch_get_config_defaults(&afec_ch_cfg);
  40456a:	a803      	add	r0, sp, #12
  40456c:	4b38      	ldr	r3, [pc, #224]	; (404650 <task_adc+0x108>)
  40456e:	4798      	blx	r3
  afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  404570:	2600      	movs	r6, #0
  404572:	f88d 600d 	strb.w	r6, [sp, #13]
  afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  404576:	aa03      	add	r2, sp, #12
  404578:	2106      	movs	r1, #6
  40457a:	4620      	mov	r0, r4
  40457c:	4b35      	ldr	r3, [pc, #212]	; (404654 <task_adc+0x10c>)
  40457e:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  404580:	2506      	movs	r5, #6
  404582:	6665      	str	r5, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  404584:	f44f 7300 	mov.w	r3, #512	; 0x200
  404588:	66e3      	str	r3, [r4, #108]	; 0x6c
  afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  40458a:	a804      	add	r0, sp, #16
  40458c:	4b32      	ldr	r3, [pc, #200]	; (404658 <task_adc+0x110>)
  40458e:	4798      	blx	r3
  afec_temp_sensor_set_config(afec, &afec_temp_sensor_cfg);
  404590:	a904      	add	r1, sp, #16
  404592:	4620      	mov	r0, r4
  404594:	4b31      	ldr	r3, [pc, #196]	; (40465c <task_adc+0x114>)
  404596:	4798      	blx	r3
  afec_set_callback(afec, afec_channel, callback, 1);
  404598:	2301      	movs	r3, #1
  40459a:	4a31      	ldr	r2, [pc, #196]	; (404660 <task_adc+0x118>)
  40459c:	4629      	mov	r1, r5
  40459e:	4620      	mov	r0, r4
  4045a0:	4c30      	ldr	r4, [pc, #192]	; (404664 <task_adc+0x11c>)
  4045a2:	47a0      	blx	r4
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4045a4:	4b30      	ldr	r3, [pc, #192]	; (404668 <task_adc+0x120>)
  4045a6:	2280      	movs	r2, #128	; 0x80
  4045a8:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4045ac:	f44f 7280 	mov.w	r2, #256	; 0x100
  4045b0:	605a      	str	r2, [r3, #4]

 /* inicializa e configura adc */
 config_AFEC_pot(AFEC_POT, AFEC_POT_ID, AFEC_POT_CHANNEL, AFEC_pot_Callback);
 
 TC_init(TC0, ID_TC1, 1, 100);
  4045b2:	2364      	movs	r3, #100	; 0x64
  4045b4:	2201      	movs	r2, #1
  4045b6:	2118      	movs	r1, #24
  4045b8:	482c      	ldr	r0, [pc, #176]	; (40466c <task_adc+0x124>)
  4045ba:	4c2d      	ldr	r4, [pc, #180]	; (404670 <task_adc+0x128>)
  4045bc:	47a0      	blx	r4
 
 adcData adc;
 t_plot plot;

 xQueueADC  = xQueueCreate( 200, sizeof( adcData ) );
  4045be:	4632      	mov	r2, r6
  4045c0:	2104      	movs	r1, #4
  4045c2:	20c8      	movs	r0, #200	; 0xc8
  4045c4:	4b2b      	ldr	r3, [pc, #172]	; (404674 <task_adc+0x12c>)
  4045c6:	4798      	blx	r3
  4045c8:	4b2b      	ldr	r3, [pc, #172]	; (404678 <task_adc+0x130>)
  4045ca:	6018      	str	r0, [r3, #0]
 /* Cria buffers para filtragem e faz a inicializacao do filtro. */
 float32_t firStateF32[BLOCK_SIZE + NUM_TAPS - 1];
 float32_t inputF32[BLOCK_SIZE + NUM_TAPS - 1];
 float32_t outputF32[BLOCK_SIZE + NUM_TAPS - 1];
 arm_fir_instance_f32 S;
 arm_fir_init_f32(&S, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0], BLOCK_SIZE);
  4045cc:	2301      	movs	r3, #1
  4045ce:	9300      	str	r3, [sp, #0]
  4045d0:	ab27      	add	r3, sp, #156	; 0x9c
  4045d2:	4a2a      	ldr	r2, [pc, #168]	; (40467c <task_adc+0x134>)
  4045d4:	210c      	movs	r1, #12
  4045d6:	a80c      	add	r0, sp, #48	; 0x30
  4045d8:	4c29      	ldr	r4, [pc, #164]	; (404680 <task_adc+0x138>)
  4045da:	47a0      	blx	r4
 
 
 int i = 0;
 while(1){
	 
	 if (xQueueReceive( xQueueADC, &(adc), 100)) {
  4045dc:	4d26      	ldr	r5, [pc, #152]	; (404678 <task_adc+0x130>)
  4045de:	4c29      	ldr	r4, [pc, #164]	; (404684 <task_adc+0x13c>)
		 if(i <= NUM_TAPS){
			 inputF32[i++] = (float) adc.value;
			 } else{
			 arm_fir_f32(&S, &inputF32[0], &outputF32[0], BLOCK_SIZE);
  4045e0:	4f29      	ldr	r7, [pc, #164]	; (404688 <task_adc+0x140>)
  4045e2:	e018      	b.n	404616 <task_adc+0xce>
  4045e4:	2301      	movs	r3, #1
  4045e6:	aa0f      	add	r2, sp, #60	; 0x3c
  4045e8:	a91b      	add	r1, sp, #108	; 0x6c
  4045ea:	a80c      	add	r0, sp, #48	; 0x30
  4045ec:	47b8      	blx	r7
			 plot.raw = (int) inputF32[0];
  4045ee:	eddd 7a1b 	vldr	s15, [sp, #108]	; 0x6c
  4045f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  4045f6:	edcd 7a33 	vstr	s15, [sp, #204]	; 0xcc
			 plot.filtrado = (int) outputF32[0];
  4045fa:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
  4045fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  404602:	edcd 7a34 	vstr	s15, [sp, #208]	; 0xd0
			 xQueueSend(xQueuePlot, &plot, 0);
  404606:	2300      	movs	r3, #0
  404608:	461a      	mov	r2, r3
  40460a:	a933      	add	r1, sp, #204	; 0xcc
  40460c:	481f      	ldr	r0, [pc, #124]	; (40468c <task_adc+0x144>)
  40460e:	6800      	ldr	r0, [r0, #0]
  404610:	4e1f      	ldr	r6, [pc, #124]	; (404690 <task_adc+0x148>)
  404612:	47b0      	blx	r6
			 i = 0;
  404614:	2600      	movs	r6, #0
	 if (xQueueReceive( xQueueADC, &(adc), 100)) {
  404616:	2300      	movs	r3, #0
  404618:	2264      	movs	r2, #100	; 0x64
  40461a:	a935      	add	r1, sp, #212	; 0xd4
  40461c:	6828      	ldr	r0, [r5, #0]
  40461e:	47a0      	blx	r4
  404620:	2800      	cmp	r0, #0
  404622:	d0f8      	beq.n	404616 <task_adc+0xce>
		 if(i <= NUM_TAPS){
  404624:	2e0c      	cmp	r6, #12
  404626:	dcdd      	bgt.n	4045e4 <task_adc+0x9c>
			 inputF32[i++] = (float) adc.value;
  404628:	ab36      	add	r3, sp, #216	; 0xd8
  40462a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
  40462e:	eddd 7a35 	vldr	s15, [sp, #212]	; 0xd4
  404632:	eef8 7a67 	vcvt.f32.u32	s15, s15
  404636:	ed43 7a1b 	vstr	s15, [r3, #-108]	; 0xffffff94
  40463a:	3601      	adds	r6, #1
  40463c:	e7eb      	b.n	404616 <task_adc+0xce>
  40463e:	bf00      	nop
  404640:	40064000 	.word	0x40064000
  404644:	00400471 	.word	0x00400471
  404648:	004002a1 	.word	0x004002a1
  40464c:	004002f1 	.word	0x004002f1
  404650:	004002d1 	.word	0x004002d1
  404654:	0040025d 	.word	0x0040025d
  404658:	004002db 	.word	0x004002db
  40465c:	0040028d 	.word	0x0040028d
  404660:	00403f7d 	.word	0x00403f7d
  404664:	004003f1 	.word	0x004003f1
  404668:	e000e100 	.word	0xe000e100
  40466c:	4000c000 	.word	0x4000c000
  404670:	00404495 	.word	0x00404495
  404674:	00402995 	.word	0x00402995
  404678:	2040ca48 	.word	0x2040ca48
  40467c:	00409990 	.word	0x00409990
  404680:	004047c9 	.word	0x004047c9
  404684:	00402cf5 	.word	0x00402cf5
  404688:	004047ed 	.word	0x004047ed
  40468c:	2040ca44 	.word	0x2040ca44
  404690:	00402a11 	.word	0x00402a11

00404694 <main>:
/************************************************************************/
/* main                                                                 */
/************************************************************************/

int main(void)
{
  404694:	b500      	push	{lr}
  404696:	b08b      	sub	sp, #44	; 0x2c
      .baudrate = USART_SERIAL_EXAMPLE_BAUDRATE,
      .charlength = USART_SERIAL_CHAR_LENGTH,
      .paritytype = USART_SERIAL_PARITY,
      .stopbits = USART_SERIAL_STOP_BIT};

  sysclk_init(); /* Initialize system clocks */
  404698:	4b31      	ldr	r3, [pc, #196]	; (404760 <main+0xcc>)
  40469a:	4798      	blx	r3
  board_init();  /* Initialize board */
  40469c:	4b31      	ldr	r3, [pc, #196]	; (404764 <main+0xd0>)
  40469e:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4046a0:	4d31      	ldr	r5, [pc, #196]	; (404768 <main+0xd4>)
  4046a2:	4b32      	ldr	r3, [pc, #200]	; (40476c <main+0xd8>)
  4046a4:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4046a6:	4a32      	ldr	r2, [pc, #200]	; (404770 <main+0xdc>)
  4046a8:	4b32      	ldr	r3, [pc, #200]	; (404774 <main+0xe0>)
  4046aa:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4046ac:	4a32      	ldr	r2, [pc, #200]	; (404778 <main+0xe4>)
  4046ae:	4b33      	ldr	r3, [pc, #204]	; (40477c <main+0xe8>)
  4046b0:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4046b2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  4046b6:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  4046b8:	23c0      	movs	r3, #192	; 0xc0
  4046ba:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  4046bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4046c0:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  4046c2:	2400      	movs	r4, #0
  4046c4:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  4046c6:	9408      	str	r4, [sp, #32]
  4046c8:	200e      	movs	r0, #14
  4046ca:	4b2d      	ldr	r3, [pc, #180]	; (404780 <main+0xec>)
  4046cc:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  4046ce:	4a2d      	ldr	r2, [pc, #180]	; (404784 <main+0xf0>)
  4046d0:	a904      	add	r1, sp, #16
  4046d2:	4628      	mov	r0, r5
  4046d4:	4b2c      	ldr	r3, [pc, #176]	; (404788 <main+0xf4>)
  4046d6:	4798      	blx	r3
		usart_enable_tx(p_usart);
  4046d8:	4628      	mov	r0, r5
  4046da:	4b2c      	ldr	r3, [pc, #176]	; (40478c <main+0xf8>)
  4046dc:	4798      	blx	r3
		usart_enable_rx(p_usart);
  4046de:	4628      	mov	r0, r5
  4046e0:	4b2b      	ldr	r3, [pc, #172]	; (404790 <main+0xfc>)
  4046e2:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  4046e4:	4e2b      	ldr	r6, [pc, #172]	; (404794 <main+0x100>)
  4046e6:	6833      	ldr	r3, [r6, #0]
  4046e8:	4621      	mov	r1, r4
  4046ea:	6898      	ldr	r0, [r3, #8]
  4046ec:	4d2a      	ldr	r5, [pc, #168]	; (404798 <main+0x104>)
  4046ee:	47a8      	blx	r5
	setbuf(stdin, NULL);
  4046f0:	6833      	ldr	r3, [r6, #0]
  4046f2:	4621      	mov	r1, r4
  4046f4:	6858      	ldr	r0, [r3, #4]
  4046f6:	47a8      	blx	r5

  /* Initialize stdio on USART */
  stdio_serial_init(USART_SERIAL_EXAMPLE, &usart_serial_options);

  /* Create task to handler touch */
  if (xTaskCreate(task_mxt, "mxt", TASK_MXT_STACK_SIZE, NULL, TASK_MXT_STACK_PRIORITY, NULL) != pdPASS)
  4046f8:	9403      	str	r4, [sp, #12]
  4046fa:	9402      	str	r4, [sp, #8]
  4046fc:	9401      	str	r4, [sp, #4]
  4046fe:	9400      	str	r4, [sp, #0]
  404700:	4623      	mov	r3, r4
  404702:	f44f 7200 	mov.w	r2, #512	; 0x200
  404706:	4925      	ldr	r1, [pc, #148]	; (40479c <main+0x108>)
  404708:	4825      	ldr	r0, [pc, #148]	; (4047a0 <main+0x10c>)
  40470a:	4c26      	ldr	r4, [pc, #152]	; (4047a4 <main+0x110>)
  40470c:	47a0      	blx	r4
  40470e:	2801      	cmp	r0, #1
  404710:	d002      	beq.n	404718 <main+0x84>
  {
    printf("Failed to create test led task\r\n");
  404712:	4825      	ldr	r0, [pc, #148]	; (4047a8 <main+0x114>)
  404714:	4b25      	ldr	r3, [pc, #148]	; (4047ac <main+0x118>)
  404716:	4798      	blx	r3
  }

  /* Create task to handler LCD */
  if (xTaskCreate(task_lcd, "lcd", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_STACK_PRIORITY, NULL) != pdPASS)
  404718:	2300      	movs	r3, #0
  40471a:	9303      	str	r3, [sp, #12]
  40471c:	9302      	str	r3, [sp, #8]
  40471e:	9301      	str	r3, [sp, #4]
  404720:	9300      	str	r3, [sp, #0]
  404722:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  404726:	4922      	ldr	r1, [pc, #136]	; (4047b0 <main+0x11c>)
  404728:	4822      	ldr	r0, [pc, #136]	; (4047b4 <main+0x120>)
  40472a:	4c1e      	ldr	r4, [pc, #120]	; (4047a4 <main+0x110>)
  40472c:	47a0      	blx	r4
  40472e:	2801      	cmp	r0, #1
  404730:	d002      	beq.n	404738 <main+0xa4>
  {
    printf("Failed to create test led task\r\n");
  404732:	481d      	ldr	r0, [pc, #116]	; (4047a8 <main+0x114>)
  404734:	4b1d      	ldr	r3, [pc, #116]	; (4047ac <main+0x118>)
  404736:	4798      	blx	r3
  }

  if (xTaskCreate(task_adc, "adc", TASK_LCD_STACK_SIZE, NULL, 0, NULL) != pdPASS)
  404738:	2300      	movs	r3, #0
  40473a:	9303      	str	r3, [sp, #12]
  40473c:	9302      	str	r3, [sp, #8]
  40473e:	9301      	str	r3, [sp, #4]
  404740:	9300      	str	r3, [sp, #0]
  404742:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  404746:	491c      	ldr	r1, [pc, #112]	; (4047b8 <main+0x124>)
  404748:	481c      	ldr	r0, [pc, #112]	; (4047bc <main+0x128>)
  40474a:	4c16      	ldr	r4, [pc, #88]	; (4047a4 <main+0x110>)
  40474c:	47a0      	blx	r4
  40474e:	2801      	cmp	r0, #1
  404750:	d002      	beq.n	404758 <main+0xc4>
  {
    printf("Failed to create test adc task\r\n");
  404752:	481b      	ldr	r0, [pc, #108]	; (4047c0 <main+0x12c>)
  404754:	4b15      	ldr	r3, [pc, #84]	; (4047ac <main+0x118>)
  404756:	4798      	blx	r3
  }

  /* Start the scheduler. */
  vTaskStartScheduler();
  404758:	4b1a      	ldr	r3, [pc, #104]	; (4047c4 <main+0x130>)
  40475a:	4798      	blx	r3
  40475c:	e7fe      	b.n	40475c <main+0xc8>
  40475e:	bf00      	nop
  404760:	00400b55 	.word	0x00400b55
  404764:	00400de5 	.word	0x00400de5
  404768:	40028000 	.word	0x40028000
  40476c:	2040ca00 	.word	0x2040ca00
  404770:	00404089 	.word	0x00404089
  404774:	2040c9fc 	.word	0x2040c9fc
  404778:	00403fad 	.word	0x00403fad
  40477c:	2040c9f8 	.word	0x2040c9f8
  404780:	00401b3d 	.word	0x00401b3d
  404784:	08f0d180 	.word	0x08f0d180
  404788:	00401fb1 	.word	0x00401fb1
  40478c:	00402005 	.word	0x00402005
  404790:	0040200b 	.word	0x0040200b
  404794:	20400014 	.word	0x20400014
  404798:	00407185 	.word	0x00407185
  40479c:	004099c0 	.word	0x004099c0
  4047a0:	00404251 	.word	0x00404251
  4047a4:	00402fd5 	.word	0x00402fd5
  4047a8:	004099c4 	.word	0x004099c4
  4047ac:	004069e1 	.word	0x004069e1
  4047b0:	004099e8 	.word	0x004099e8
  4047b4:	0040435d 	.word	0x0040435d
  4047b8:	004099ec 	.word	0x004099ec
  4047bc:	00404549 	.word	0x00404549
  4047c0:	004099f0 	.word	0x004099f0
  4047c4:	00403209 	.word	0x00403209

004047c8 <arm_fir_init_f32>:
  4047c8:	b570      	push	{r4, r5, r6, lr}
  4047ca:	9d04      	ldr	r5, [sp, #16]
  4047cc:	6082      	str	r2, [r0, #8]
  4047ce:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
  4047d2:	3d01      	subs	r5, #1
  4047d4:	440d      	add	r5, r1
  4047d6:	8001      	strh	r1, [r0, #0]
  4047d8:	4604      	mov	r4, r0
  4047da:	461e      	mov	r6, r3
  4047dc:	00aa      	lsls	r2, r5, #2
  4047de:	4618      	mov	r0, r3
  4047e0:	2100      	movs	r1, #0
  4047e2:	f002 fc63 	bl	4070ac <memset>
  4047e6:	6066      	str	r6, [r4, #4]
  4047e8:	bd70      	pop	{r4, r5, r6, pc}
  4047ea:	bf00      	nop

004047ec <arm_fir_f32>:
  4047ec:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4047f0:	ed2d 8b0c 	vpush	{d8-d13}
  4047f4:	b08a      	sub	sp, #40	; 0x28
  4047f6:	9002      	str	r0, [sp, #8]
  4047f8:	9c02      	ldr	r4, [sp, #8]
  4047fa:	8800      	ldrh	r0, [r0, #0]
  4047fc:	f8d4 8004 	ldr.w	r8, [r4, #4]
  404800:	f100 4980 	add.w	r9, r0, #1073741824	; 0x40000000
  404804:	9001      	str	r0, [sp, #4]
  404806:	f109 39ff 	add.w	r9, r9, #4294967295
  40480a:	08d8      	lsrs	r0, r3, #3
  40480c:	9303      	str	r3, [sp, #12]
  40480e:	eb08 0989 	add.w	r9, r8, r9, lsl #2
  404812:	f8d4 a008 	ldr.w	sl, [r4, #8]
  404816:	9004      	str	r0, [sp, #16]
  404818:	f000 81e2 	beq.w	404be0 <arm_fir_f32+0x3f4>
  40481c:	9c01      	ldr	r4, [sp, #4]
  40481e:	f8cd 9018 	str.w	r9, [sp, #24]
  404822:	08e0      	lsrs	r0, r4, #3
  404824:	0143      	lsls	r3, r0, #5
  404826:	eb0a 0403 	add.w	r4, sl, r3
  40482a:	9400      	str	r4, [sp, #0]
  40482c:	331c      	adds	r3, #28
  40482e:	9c01      	ldr	r4, [sp, #4]
  404830:	9305      	str	r3, [sp, #20]
  404832:	9b04      	ldr	r3, [sp, #16]
  404834:	f004 0b07 	and.w	fp, r4, #7
  404838:	464c      	mov	r4, r9
  40483a:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40483e:	460e      	mov	r6, r1
  404840:	f108 0c1c 	add.w	ip, r8, #28
  404844:	4647      	mov	r7, r8
  404846:	f8cd 801c 	str.w	r8, [sp, #28]
  40484a:	9108      	str	r1, [sp, #32]
  40484c:	4615      	mov	r5, r2
  40484e:	46d8      	mov	r8, fp
  404850:	4619      	mov	r1, r3
  404852:	9209      	str	r2, [sp, #36]	; 0x24
  404854:	ed9f 3ab2 	vldr	s6, [pc, #712]	; 404b20 <arm_fir_f32+0x334>
  404858:	6833      	ldr	r3, [r6, #0]
  40485a:	4662      	mov	r2, ip
  40485c:	6023      	str	r3, [r4, #0]
  40485e:	6873      	ldr	r3, [r6, #4]
  404860:	eef0 1a43 	vmov.f32	s3, s6
  404864:	6063      	str	r3, [r4, #4]
  404866:	68b3      	ldr	r3, [r6, #8]
  404868:	eeb0 1a43 	vmov.f32	s2, s6
  40486c:	60a3      	str	r3, [r4, #8]
  40486e:	68f3      	ldr	r3, [r6, #12]
  404870:	eef0 0a43 	vmov.f32	s1, s6
  404874:	60e3      	str	r3, [r4, #12]
  404876:	6933      	ldr	r3, [r6, #16]
  404878:	eeb0 0a43 	vmov.f32	s0, s6
  40487c:	6123      	str	r3, [r4, #16]
  40487e:	6973      	ldr	r3, [r6, #20]
  404880:	eeb0 8a43 	vmov.f32	s16, s6
  404884:	6163      	str	r3, [r4, #20]
  404886:	69b3      	ldr	r3, [r6, #24]
  404888:	eef0 8a43 	vmov.f32	s17, s6
  40488c:	61a3      	str	r3, [r4, #24]
  40488e:	69f3      	ldr	r3, [r6, #28]
  404890:	eeb0 9a43 	vmov.f32	s18, s6
  404894:	61e3      	str	r3, [r4, #28]
  404896:	edd7 4a00 	vldr	s9, [r7]
  40489a:	edd7 7a01 	vldr	s15, [r7, #4]
  40489e:	ed97 7a02 	vldr	s14, [r7, #8]
  4048a2:	edd7 6a03 	vldr	s13, [r7, #12]
  4048a6:	ed97 6a04 	vldr	s12, [r7, #16]
  4048aa:	edd7 5a05 	vldr	s11, [r7, #20]
  4048ae:	ed97 5a06 	vldr	s10, [r7, #24]
  4048b2:	2800      	cmp	r0, #0
  4048b4:	f000 81e3 	beq.w	404c7e <arm_fir_f32+0x492>
  4048b8:	4652      	mov	r2, sl
  4048ba:	4663      	mov	r3, ip
  4048bc:	4683      	mov	fp, r0
  4048be:	ed92 2a00 	vldr	s4, [r2]
  4048c2:	edd3 3a00 	vldr	s7, [r3]
  4048c6:	edd2 2a01 	vldr	s5, [r2, #4]
  4048ca:	ee64 ca82 	vmul.f32	s25, s9, s4
  4048ce:	ee67 ba82 	vmul.f32	s23, s15, s4
  4048d2:	edd3 4a01 	vldr	s9, [r3, #4]
  4048d6:	ee27 ba02 	vmul.f32	s22, s14, s4
  4048da:	ee66 aa82 	vmul.f32	s21, s13, s4
  4048de:	ee26 aa02 	vmul.f32	s20, s12, s4
  4048e2:	ee65 9a82 	vmul.f32	s19, s11, s4
  4048e6:	ee25 ca02 	vmul.f32	s24, s10, s4
  4048ea:	ee23 4a82 	vmul.f32	s8, s7, s4
  4048ee:	ee3c 9a89 	vadd.f32	s18, s25, s18
  4048f2:	ed92 2a02 	vldr	s4, [r2, #8]
  4048f6:	ee67 caa2 	vmul.f32	s25, s15, s5
  4048fa:	ee34 3a03 	vadd.f32	s6, s8, s6
  4048fe:	edd3 7a02 	vldr	s15, [r3, #8]
  404902:	ee7b 8aa8 	vadd.f32	s17, s23, s17
  404906:	ee3b 8a08 	vadd.f32	s16, s22, s16
  40490a:	ee67 ba22 	vmul.f32	s23, s14, s5
  40490e:	ee26 baa2 	vmul.f32	s22, s13, s5
  404912:	ee3a 0a80 	vadd.f32	s0, s21, s0
  404916:	ee7a 0a20 	vadd.f32	s1, s20, s1
  40491a:	ee66 aa22 	vmul.f32	s21, s12, s5
  40491e:	ee25 aaa2 	vmul.f32	s20, s11, s5
  404922:	ee39 1a81 	vadd.f32	s2, s19, s2
  404926:	ee7c 1a21 	vadd.f32	s3, s24, s3
  40492a:	ee65 9a22 	vmul.f32	s19, s10, s5
  40492e:	ee23 caa2 	vmul.f32	s24, s7, s5
  404932:	ee24 4aa2 	vmul.f32	s8, s9, s5
  404936:	ee23 da82 	vmul.f32	s26, s7, s4
  40493a:	edd2 2a03 	vldr	s5, [r2, #12]
  40493e:	ee34 4a03 	vadd.f32	s8, s8, s6
  404942:	ee3c 9a89 	vadd.f32	s18, s25, s18
  404946:	ee7b 8aa8 	vadd.f32	s17, s23, s17
  40494a:	ee67 ca02 	vmul.f32	s25, s14, s4
  40494e:	ee66 ba82 	vmul.f32	s23, s13, s4
  404952:	ed93 7a03 	vldr	s14, [r3, #12]
  404956:	ee3b 8a08 	vadd.f32	s16, s22, s16
  40495a:	ee3a 0a80 	vadd.f32	s0, s21, s0
  40495e:	ee26 ba02 	vmul.f32	s22, s12, s4
  404962:	ee65 aa82 	vmul.f32	s21, s11, s4
  404966:	ee7a 0a20 	vadd.f32	s1, s20, s1
  40496a:	ee39 1a81 	vadd.f32	s2, s19, s2
  40496e:	ee25 aa02 	vmul.f32	s20, s10, s4
  404972:	ee7c 1a21 	vadd.f32	s3, s24, s3
  404976:	ee24 ca82 	vmul.f32	s24, s9, s4
  40497a:	ee27 2a82 	vmul.f32	s4, s15, s4
  40497e:	ed92 3a04 	vldr	s6, [r2, #16]
  404982:	ee65 9a22 	vmul.f32	s19, s10, s5
  404986:	ee3c 9a89 	vadd.f32	s18, s25, s18
  40498a:	ee7b 8aa8 	vadd.f32	s17, s23, s17
  40498e:	ee66 caa2 	vmul.f32	s25, s13, s5
  404992:	ee66 ba22 	vmul.f32	s23, s12, s5
  404996:	edd3 6a04 	vldr	s13, [r3, #16]
  40499a:	ee3b 8a08 	vadd.f32	s16, s22, s16
  40499e:	ee3a 0a80 	vadd.f32	s0, s21, s0
  4049a2:	ee25 baa2 	vmul.f32	s22, s11, s5
  4049a6:	ee63 aaa2 	vmul.f32	s21, s7, s5
  4049aa:	ee7a 0a20 	vadd.f32	s1, s20, s1
  4049ae:	ee3d 1a01 	vadd.f32	s2, s26, s2
  4049b2:	ee7c 1a21 	vadd.f32	s3, s24, s3
  4049b6:	ee24 daa2 	vmul.f32	s26, s9, s5
  4049ba:	ee27 caa2 	vmul.f32	s24, s15, s5
  4049be:	ee32 2a04 	vadd.f32	s4, s4, s8
  4049c2:	ee67 2a22 	vmul.f32	s5, s14, s5
  4049c6:	ed92 4a05 	vldr	s8, [r2, #20]
  4049ca:	ee25 aa03 	vmul.f32	s20, s10, s6
  4049ce:	ee32 2a82 	vadd.f32	s4, s5, s4
  4049d2:	ee3c 9a89 	vadd.f32	s18, s25, s18
  4049d6:	ee7b 8aa8 	vadd.f32	s17, s23, s17
  4049da:	ee66 ca03 	vmul.f32	s25, s12, s6
  4049de:	ee65 ba83 	vmul.f32	s23, s11, s6
  4049e2:	ed93 6a05 	vldr	s12, [r3, #20]
  4049e6:	ee3b 8a08 	vadd.f32	s16, s22, s16
  4049ea:	ee39 0a80 	vadd.f32	s0, s19, s0
  4049ee:	ee23 ba83 	vmul.f32	s22, s7, s6
  4049f2:	ee7a 0aa0 	vadd.f32	s1, s21, s1
  4049f6:	ee3d 1a01 	vadd.f32	s2, s26, s2
  4049fa:	ee64 aa83 	vmul.f32	s21, s9, s6
  4049fe:	ee27 da83 	vmul.f32	s26, s15, s6
  404a02:	ee7c 1a21 	vadd.f32	s3, s24, s3
  404a06:	ee66 2a83 	vmul.f32	s5, s13, s6
  404a0a:	ee27 ca03 	vmul.f32	s24, s14, s6
  404a0e:	ee65 9a04 	vmul.f32	s19, s10, s8
  404a12:	ed92 3a06 	vldr	s6, [r2, #24]
  404a16:	ee3c 9a89 	vadd.f32	s18, s25, s18
  404a1a:	ee7b 8aa8 	vadd.f32	s17, s23, s17
  404a1e:	ee65 ca84 	vmul.f32	s25, s11, s8
  404a22:	ee67 ba04 	vmul.f32	s23, s14, s8
  404a26:	edd3 5a06 	vldr	s11, [r3, #24]
  404a2a:	ee3a 8a08 	vadd.f32	s16, s20, s16
  404a2e:	ee3b 0a00 	vadd.f32	s0, s22, s0
  404a32:	ee23 aa84 	vmul.f32	s20, s7, s8
  404a36:	ee24 ba84 	vmul.f32	s22, s9, s8
  404a3a:	ee7a 0aa0 	vadd.f32	s1, s21, s1
  404a3e:	ee7c 1a21 	vadd.f32	s3, s24, s3
  404a42:	ee67 aa84 	vmul.f32	s21, s15, s8
  404a46:	ee72 2a82 	vadd.f32	s5, s5, s4
  404a4a:	ee26 ca84 	vmul.f32	s24, s13, s8
  404a4e:	ee26 2a04 	vmul.f32	s4, s12, s8
  404a52:	ee3d 1a01 	vadd.f32	s2, s26, s2
  404a56:	ed92 4a07 	vldr	s8, [r2, #28]
  404a5a:	ee72 2a22 	vadd.f32	s5, s4, s5
  404a5e:	ee3c 9a89 	vadd.f32	s18, s25, s18
  404a62:	ee79 8aa8 	vadd.f32	s17, s19, s17
  404a66:	ee65 ca03 	vmul.f32	s25, s10, s6
  404a6a:	ee63 9a83 	vmul.f32	s19, s7, s6
  404a6e:	ee3a 8a08 	vadd.f32	s16, s20, s16
  404a72:	ee3b 0a00 	vadd.f32	s0, s22, s0
  404a76:	ee24 aa83 	vmul.f32	s20, s9, s6
  404a7a:	ee27 ba83 	vmul.f32	s22, s15, s6
  404a7e:	ee7a 0aa0 	vadd.f32	s1, s21, s1
  404a82:	ee3b 1a81 	vadd.f32	s2, s23, s2
  404a86:	ee67 aa03 	vmul.f32	s21, s14, s6
  404a8a:	ee66 ba83 	vmul.f32	s23, s13, s6
  404a8e:	ee26 2a03 	vmul.f32	s4, s12, s6
  404a92:	ed93 5a07 	vldr	s10, [r3, #28]
  404a96:	ee7c 1a21 	vadd.f32	s3, s24, s3
  404a9a:	ee25 3a83 	vmul.f32	s6, s11, s6
  404a9e:	ee63 3a84 	vmul.f32	s7, s7, s8
  404aa2:	ee79 8aa8 	vadd.f32	s17, s19, s17
  404aa6:	ee3a 8a08 	vadd.f32	s16, s20, s16
  404aaa:	ee64 9a84 	vmul.f32	s19, s9, s8
  404aae:	ee27 aa84 	vmul.f32	s20, s15, s8
  404ab2:	ee3b 0a00 	vadd.f32	s0, s22, s0
  404ab6:	ee7a 0aa0 	vadd.f32	s1, s21, s1
  404aba:	ee27 ba04 	vmul.f32	s22, s14, s8
  404abe:	ee66 aa84 	vmul.f32	s21, s13, s8
  404ac2:	ee3b 1a81 	vadd.f32	s2, s23, s2
  404ac6:	ee33 3a22 	vadd.f32	s6, s6, s5
  404aca:	ee66 ba04 	vmul.f32	s23, s12, s8
  404ace:	ee65 2a84 	vmul.f32	s5, s11, s8
  404ad2:	ee3c 9a89 	vadd.f32	s18, s25, s18
  404ad6:	ee72 1a21 	vadd.f32	s3, s4, s3
  404ada:	ee25 4a04 	vmul.f32	s8, s10, s8
  404ade:	f1bb 0b01 	subs.w	fp, fp, #1
  404ae2:	f102 0220 	add.w	r2, r2, #32
  404ae6:	ee33 9a89 	vadd.f32	s18, s7, s18
  404aea:	ee79 8aa8 	vadd.f32	s17, s19, s17
  404aee:	ee3a 8a08 	vadd.f32	s16, s20, s16
  404af2:	ee3b 0a00 	vadd.f32	s0, s22, s0
  404af6:	ee7a 0aa0 	vadd.f32	s1, s21, s1
  404afa:	ee3b 1a81 	vadd.f32	s2, s23, s2
  404afe:	ee72 1aa1 	vadd.f32	s3, s5, s3
  404b02:	ee34 3a03 	vadd.f32	s6, s8, s6
  404b06:	f103 0320 	add.w	r3, r3, #32
  404b0a:	f47f aed8 	bne.w	4048be <arm_fir_f32+0xd2>
  404b0e:	f8dd b000 	ldr.w	fp, [sp]
  404b12:	eb07 0209 	add.w	r2, r7, r9
  404b16:	f1b8 0f00 	cmp.w	r8, #0
  404b1a:	d037      	beq.n	404b8c <arm_fir_f32+0x3a0>
  404b1c:	4643      	mov	r3, r8
  404b1e:	e00f      	b.n	404b40 <arm_fir_f32+0x354>
  404b20:	00000000 	.word	0x00000000
  404b24:	eef0 4a67 	vmov.f32	s9, s15
  404b28:	eef0 7a47 	vmov.f32	s15, s14
  404b2c:	eeb0 7a66 	vmov.f32	s14, s13
  404b30:	eef0 6a46 	vmov.f32	s13, s12
  404b34:	eeb0 6a65 	vmov.f32	s12, s11
  404b38:	eef0 5a45 	vmov.f32	s11, s10
  404b3c:	eeb0 5a63 	vmov.f32	s10, s7
  404b40:	ecbb 4a01 	vldmia	fp!, {s8}
  404b44:	ecf2 3a01 	vldmia	r2!, {s7}
  404b48:	ee64 4a84 	vmul.f32	s9, s9, s8
  404b4c:	ee27 ba84 	vmul.f32	s22, s15, s8
  404b50:	ee67 aa04 	vmul.f32	s21, s14, s8
  404b54:	ee26 aa84 	vmul.f32	s20, s13, s8
  404b58:	ee66 9a04 	vmul.f32	s19, s12, s8
  404b5c:	ee25 2a84 	vmul.f32	s4, s11, s8
  404b60:	ee65 2a04 	vmul.f32	s5, s10, s8
  404b64:	ee23 4a84 	vmul.f32	s8, s7, s8
  404b68:	3b01      	subs	r3, #1
  404b6a:	ee39 9a24 	vadd.f32	s18, s18, s9
  404b6e:	ee78 8a8b 	vadd.f32	s17, s17, s22
  404b72:	ee38 8a2a 	vadd.f32	s16, s16, s21
  404b76:	ee30 0a0a 	vadd.f32	s0, s0, s20
  404b7a:	ee70 0aa9 	vadd.f32	s1, s1, s19
  404b7e:	ee31 1a02 	vadd.f32	s2, s2, s4
  404b82:	ee71 1aa2 	vadd.f32	s3, s3, s5
  404b86:	ee33 3a04 	vadd.f32	s6, s6, s8
  404b8a:	d1cb      	bne.n	404b24 <arm_fir_f32+0x338>
  404b8c:	3901      	subs	r1, #1
  404b8e:	ed85 9a00 	vstr	s18, [r5]
  404b92:	edc5 8a01 	vstr	s17, [r5, #4]
  404b96:	ed85 8a02 	vstr	s16, [r5, #8]
  404b9a:	ed85 0a03 	vstr	s0, [r5, #12]
  404b9e:	edc5 0a04 	vstr	s1, [r5, #16]
  404ba2:	ed85 1a05 	vstr	s2, [r5, #20]
  404ba6:	edc5 1a06 	vstr	s3, [r5, #24]
  404baa:	ed85 3a07 	vstr	s6, [r5, #28]
  404bae:	f107 0720 	add.w	r7, r7, #32
  404bb2:	f106 0620 	add.w	r6, r6, #32
  404bb6:	f105 0520 	add.w	r5, r5, #32
  404bba:	f104 0420 	add.w	r4, r4, #32
  404bbe:	f10c 0c20 	add.w	ip, ip, #32
  404bc2:	f47f ae47 	bne.w	404854 <arm_fir_f32+0x68>
  404bc6:	9804      	ldr	r0, [sp, #16]
  404bc8:	f8dd 9018 	ldr.w	r9, [sp, #24]
  404bcc:	f8dd 801c 	ldr.w	r8, [sp, #28]
  404bd0:	9908      	ldr	r1, [sp, #32]
  404bd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404bd4:	0143      	lsls	r3, r0, #5
  404bd6:	4499      	add	r9, r3
  404bd8:	4419      	add	r1, r3
  404bda:	4498      	add	r8, r3
  404bdc:	441a      	add	r2, r3
  404bde:	9b03      	ldr	r3, [sp, #12]
  404be0:	f013 0707 	ands.w	r7, r3, #7
  404be4:	d01e      	beq.n	404c24 <arm_fir_f32+0x438>
  404be6:	f8dd c004 	ldr.w	ip, [sp, #4]
  404bea:	463e      	mov	r6, r7
  404bec:	4645      	mov	r5, r8
  404bee:	ed5f 7a34 	vldr	s15, [pc, #-208]	; 404b20 <arm_fir_f32+0x334>
  404bf2:	f851 3b04 	ldr.w	r3, [r1], #4
  404bf6:	4654      	mov	r4, sl
  404bf8:	f849 3b04 	str.w	r3, [r9], #4
  404bfc:	4628      	mov	r0, r5
  404bfe:	4663      	mov	r3, ip
  404c00:	ecf0 6a01 	vldmia	r0!, {s13}
  404c04:	ecb4 7a01 	vldmia	r4!, {s14}
  404c08:	ee26 7a87 	vmul.f32	s14, s13, s14
  404c0c:	3b01      	subs	r3, #1
  404c0e:	ee77 7a87 	vadd.f32	s15, s15, s14
  404c12:	d1f5      	bne.n	404c00 <arm_fir_f32+0x414>
  404c14:	3e01      	subs	r6, #1
  404c16:	ece2 7a01 	vstmia	r2!, {s15}
  404c1a:	f105 0504 	add.w	r5, r5, #4
  404c1e:	d1e6      	bne.n	404bee <arm_fir_f32+0x402>
  404c20:	eb08 0887 	add.w	r8, r8, r7, lsl #2
  404c24:	9c01      	ldr	r4, [sp, #4]
  404c26:	1e65      	subs	r5, r4, #1
  404c28:	9c02      	ldr	r4, [sp, #8]
  404c2a:	08ae      	lsrs	r6, r5, #2
  404c2c:	6860      	ldr	r0, [r4, #4]
  404c2e:	d017      	beq.n	404c60 <arm_fir_f32+0x474>
  404c30:	4642      	mov	r2, r8
  404c32:	4603      	mov	r3, r0
  404c34:	4631      	mov	r1, r6
  404c36:	6814      	ldr	r4, [r2, #0]
  404c38:	3901      	subs	r1, #1
  404c3a:	601c      	str	r4, [r3, #0]
  404c3c:	6854      	ldr	r4, [r2, #4]
  404c3e:	f103 0310 	add.w	r3, r3, #16
  404c42:	f843 4c0c 	str.w	r4, [r3, #-12]
  404c46:	6894      	ldr	r4, [r2, #8]
  404c48:	f102 0210 	add.w	r2, r2, #16
  404c4c:	f843 4c08 	str.w	r4, [r3, #-8]
  404c50:	f852 4c04 	ldr.w	r4, [r2, #-4]
  404c54:	f843 4c04 	str.w	r4, [r3, #-4]
  404c58:	d1ed      	bne.n	404c36 <arm_fir_f32+0x44a>
  404c5a:	0133      	lsls	r3, r6, #4
  404c5c:	4418      	add	r0, r3
  404c5e:	4498      	add	r8, r3
  404c60:	f015 0303 	ands.w	r3, r5, #3
  404c64:	d005      	beq.n	404c72 <arm_fir_f32+0x486>
  404c66:	f858 2b04 	ldr.w	r2, [r8], #4
  404c6a:	3b01      	subs	r3, #1
  404c6c:	f840 2b04 	str.w	r2, [r0], #4
  404c70:	d1f9      	bne.n	404c66 <arm_fir_f32+0x47a>
  404c72:	b00a      	add	sp, #40	; 0x28
  404c74:	ecbd 8b0c 	vpop	{d8-d13}
  404c78:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  404c7c:	4770      	bx	lr
  404c7e:	46d3      	mov	fp, sl
  404c80:	e749      	b.n	404b16 <arm_fir_f32+0x32a>
  404c82:	bf00      	nop

00404c84 <cos>:
  404c84:	b530      	push	{r4, r5, lr}
  404c86:	4a22      	ldr	r2, [pc, #136]	; (404d10 <cos+0x8c>)
  404c88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  404c8c:	4293      	cmp	r3, r2
  404c8e:	b087      	sub	sp, #28
  404c90:	dd1b      	ble.n	404cca <cos+0x46>
  404c92:	4a20      	ldr	r2, [pc, #128]	; (404d14 <cos+0x90>)
  404c94:	4293      	cmp	r3, r2
  404c96:	dd05      	ble.n	404ca4 <cos+0x20>
  404c98:	4602      	mov	r2, r0
  404c9a:	460b      	mov	r3, r1
  404c9c:	f001 f9e2 	bl	406064 <__aeabi_dsub>
  404ca0:	b007      	add	sp, #28
  404ca2:	bd30      	pop	{r4, r5, pc}
  404ca4:	aa02      	add	r2, sp, #8
  404ca6:	f000 f87b 	bl	404da0 <__ieee754_rem_pio2>
  404caa:	f000 0303 	and.w	r3, r0, #3
  404cae:	2b01      	cmp	r3, #1
  404cb0:	d01a      	beq.n	404ce8 <cos+0x64>
  404cb2:	2b02      	cmp	r3, #2
  404cb4:	d00f      	beq.n	404cd6 <cos+0x52>
  404cb6:	b31b      	cbz	r3, 404d00 <cos+0x7c>
  404cb8:	2401      	movs	r4, #1
  404cba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404cbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404cc2:	9400      	str	r4, [sp, #0]
  404cc4:	f000 fffc 	bl	405cc0 <__kernel_sin>
  404cc8:	e7ea      	b.n	404ca0 <cos+0x1c>
  404cca:	2200      	movs	r2, #0
  404ccc:	2300      	movs	r3, #0
  404cce:	f000 fa8b 	bl	4051e8 <__kernel_cos>
  404cd2:	b007      	add	sp, #28
  404cd4:	bd30      	pop	{r4, r5, pc}
  404cd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404cda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404cde:	f000 fa83 	bl	4051e8 <__kernel_cos>
  404ce2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  404ce6:	e7db      	b.n	404ca0 <cos+0x1c>
  404ce8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
  404cec:	9300      	str	r3, [sp, #0]
  404cee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404cf2:	4622      	mov	r2, r4
  404cf4:	462b      	mov	r3, r5
  404cf6:	f000 ffe3 	bl	405cc0 <__kernel_sin>
  404cfa:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  404cfe:	e7cf      	b.n	404ca0 <cos+0x1c>
  404d00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404d04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404d08:	f000 fa6e 	bl	4051e8 <__kernel_cos>
  404d0c:	e7c8      	b.n	404ca0 <cos+0x1c>
  404d0e:	bf00      	nop
  404d10:	3fe921fb 	.word	0x3fe921fb
  404d14:	7fefffff 	.word	0x7fefffff

00404d18 <sin>:
  404d18:	b530      	push	{r4, r5, lr}
  404d1a:	4a1f      	ldr	r2, [pc, #124]	; (404d98 <sin+0x80>)
  404d1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  404d20:	4293      	cmp	r3, r2
  404d22:	b087      	sub	sp, #28
  404d24:	dd1b      	ble.n	404d5e <sin+0x46>
  404d26:	4a1d      	ldr	r2, [pc, #116]	; (404d9c <sin+0x84>)
  404d28:	4293      	cmp	r3, r2
  404d2a:	dd05      	ble.n	404d38 <sin+0x20>
  404d2c:	4602      	mov	r2, r0
  404d2e:	460b      	mov	r3, r1
  404d30:	f001 f998 	bl	406064 <__aeabi_dsub>
  404d34:	b007      	add	sp, #28
  404d36:	bd30      	pop	{r4, r5, pc}
  404d38:	aa02      	add	r2, sp, #8
  404d3a:	f000 f831 	bl	404da0 <__ieee754_rem_pio2>
  404d3e:	f000 0003 	and.w	r0, r0, #3
  404d42:	2801      	cmp	r0, #1
  404d44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  404d48:	d01a      	beq.n	404d80 <sin+0x68>
  404d4a:	2802      	cmp	r0, #2
  404d4c:	d00f      	beq.n	404d6e <sin+0x56>
  404d4e:	b1e0      	cbz	r0, 404d8a <sin+0x72>
  404d50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404d54:	f000 fa48 	bl	4051e8 <__kernel_cos>
  404d58:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  404d5c:	e7ea      	b.n	404d34 <sin+0x1c>
  404d5e:	2300      	movs	r3, #0
  404d60:	9300      	str	r3, [sp, #0]
  404d62:	2200      	movs	r2, #0
  404d64:	2300      	movs	r3, #0
  404d66:	f000 ffab 	bl	405cc0 <__kernel_sin>
  404d6a:	b007      	add	sp, #28
  404d6c:	bd30      	pop	{r4, r5, pc}
  404d6e:	2401      	movs	r4, #1
  404d70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404d74:	9400      	str	r4, [sp, #0]
  404d76:	f000 ffa3 	bl	405cc0 <__kernel_sin>
  404d7a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  404d7e:	e7d9      	b.n	404d34 <sin+0x1c>
  404d80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404d84:	f000 fa30 	bl	4051e8 <__kernel_cos>
  404d88:	e7d4      	b.n	404d34 <sin+0x1c>
  404d8a:	2401      	movs	r4, #1
  404d8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404d90:	9400      	str	r4, [sp, #0]
  404d92:	f000 ff95 	bl	405cc0 <__kernel_sin>
  404d96:	e7cd      	b.n	404d34 <sin+0x1c>
  404d98:	3fe921fb 	.word	0x3fe921fb
  404d9c:	7fefffff 	.word	0x7fefffff

00404da0 <__ieee754_rem_pio2>:
  404da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404da4:	4e9a      	ldr	r6, [pc, #616]	; (405010 <__ieee754_rem_pio2+0x270>)
  404da6:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  404daa:	42b7      	cmp	r7, r6
  404dac:	b091      	sub	sp, #68	; 0x44
  404dae:	f340 808e 	ble.w	404ece <__ieee754_rem_pio2+0x12e>
  404db2:	4692      	mov	sl, r2
  404db4:	4a97      	ldr	r2, [pc, #604]	; (405014 <__ieee754_rem_pio2+0x274>)
  404db6:	4297      	cmp	r7, r2
  404db8:	460c      	mov	r4, r1
  404dba:	dc26      	bgt.n	404e0a <__ieee754_rem_pio2+0x6a>
  404dbc:	2900      	cmp	r1, #0
  404dbe:	a38a      	add	r3, pc, #552	; (adr r3, 404fe8 <__ieee754_rem_pio2+0x248>)
  404dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
  404dc4:	f340 81b4 	ble.w	405130 <__ieee754_rem_pio2+0x390>
  404dc8:	f001 f94c 	bl	406064 <__aeabi_dsub>
  404dcc:	4b92      	ldr	r3, [pc, #584]	; (405018 <__ieee754_rem_pio2+0x278>)
  404dce:	429f      	cmp	r7, r3
  404dd0:	4604      	mov	r4, r0
  404dd2:	460d      	mov	r5, r1
  404dd4:	f000 8090 	beq.w	404ef8 <__ieee754_rem_pio2+0x158>
  404dd8:	a385      	add	r3, pc, #532	; (adr r3, 404ff0 <__ieee754_rem_pio2+0x250>)
  404dda:	e9d3 2300 	ldrd	r2, r3, [r3]
  404dde:	f001 f941 	bl	406064 <__aeabi_dsub>
  404de2:	4602      	mov	r2, r0
  404de4:	460b      	mov	r3, r1
  404de6:	e9ca 2300 	strd	r2, r3, [sl]
  404dea:	4620      	mov	r0, r4
  404dec:	4629      	mov	r1, r5
  404dee:	f001 f939 	bl	406064 <__aeabi_dsub>
  404df2:	a37f      	add	r3, pc, #508	; (adr r3, 404ff0 <__ieee754_rem_pio2+0x250>)
  404df4:	e9d3 2300 	ldrd	r2, r3, [r3]
  404df8:	f001 f934 	bl	406064 <__aeabi_dsub>
  404dfc:	2501      	movs	r5, #1
  404dfe:	e9ca 0102 	strd	r0, r1, [sl, #8]
  404e02:	4628      	mov	r0, r5
  404e04:	b011      	add	sp, #68	; 0x44
  404e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e0a:	4a84      	ldr	r2, [pc, #528]	; (40501c <__ieee754_rem_pio2+0x27c>)
  404e0c:	4297      	cmp	r7, r2
  404e0e:	f340 8090 	ble.w	404f32 <__ieee754_rem_pio2+0x192>
  404e12:	4a83      	ldr	r2, [pc, #524]	; (405020 <__ieee754_rem_pio2+0x280>)
  404e14:	4297      	cmp	r7, r2
  404e16:	dc65      	bgt.n	404ee4 <__ieee754_rem_pio2+0x144>
  404e18:	153d      	asrs	r5, r7, #20
  404e1a:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
  404e1e:	eba7 5305 	sub.w	r3, r7, r5, lsl #20
  404e22:	4619      	mov	r1, r3
  404e24:	461f      	mov	r7, r3
  404e26:	4606      	mov	r6, r0
  404e28:	f001 fd6a 	bl	406900 <__aeabi_d2iz>
  404e2c:	f001 fa68 	bl	406300 <__aeabi_i2d>
  404e30:	4680      	mov	r8, r0
  404e32:	4689      	mov	r9, r1
  404e34:	4602      	mov	r2, r0
  404e36:	460b      	mov	r3, r1
  404e38:	4630      	mov	r0, r6
  404e3a:	4639      	mov	r1, r7
  404e3c:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  404e40:	f001 f910 	bl	406064 <__aeabi_dsub>
  404e44:	2200      	movs	r2, #0
  404e46:	4b77      	ldr	r3, [pc, #476]	; (405024 <__ieee754_rem_pio2+0x284>)
  404e48:	f001 fac0 	bl	4063cc <__aeabi_dmul>
  404e4c:	4689      	mov	r9, r1
  404e4e:	4680      	mov	r8, r0
  404e50:	f001 fd56 	bl	406900 <__aeabi_d2iz>
  404e54:	f001 fa54 	bl	406300 <__aeabi_i2d>
  404e58:	4602      	mov	r2, r0
  404e5a:	460b      	mov	r3, r1
  404e5c:	4606      	mov	r6, r0
  404e5e:	460f      	mov	r7, r1
  404e60:	4640      	mov	r0, r8
  404e62:	4649      	mov	r1, r9
  404e64:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  404e68:	f001 f8fc 	bl	406064 <__aeabi_dsub>
  404e6c:	2200      	movs	r2, #0
  404e6e:	4b6d      	ldr	r3, [pc, #436]	; (405024 <__ieee754_rem_pio2+0x284>)
  404e70:	f001 faac 	bl	4063cc <__aeabi_dmul>
  404e74:	2200      	movs	r2, #0
  404e76:	2300      	movs	r3, #0
  404e78:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  404e7c:	f001 fd0e 	bl	40689c <__aeabi_dcmpeq>
  404e80:	2800      	cmp	r0, #0
  404e82:	f000 8173 	beq.w	40516c <__ieee754_rem_pio2+0x3cc>
  404e86:	2300      	movs	r3, #0
  404e88:	4630      	mov	r0, r6
  404e8a:	4639      	mov	r1, r7
  404e8c:	2200      	movs	r2, #0
  404e8e:	f001 fd05 	bl	40689c <__aeabi_dcmpeq>
  404e92:	2800      	cmp	r0, #0
  404e94:	bf14      	ite	ne
  404e96:	2301      	movne	r3, #1
  404e98:	2302      	moveq	r3, #2
  404e9a:	4a63      	ldr	r2, [pc, #396]	; (405028 <__ieee754_rem_pio2+0x288>)
  404e9c:	9201      	str	r2, [sp, #4]
  404e9e:	2102      	movs	r1, #2
  404ea0:	462a      	mov	r2, r5
  404ea2:	9100      	str	r1, [sp, #0]
  404ea4:	a80a      	add	r0, sp, #40	; 0x28
  404ea6:	4651      	mov	r1, sl
  404ea8:	f000 fac2 	bl	405430 <__kernel_rem_pio2>
  404eac:	2c00      	cmp	r4, #0
  404eae:	4605      	mov	r5, r0
  404eb0:	da14      	bge.n	404edc <__ieee754_rem_pio2+0x13c>
  404eb2:	f8da 2004 	ldr.w	r2, [sl, #4]
  404eb6:	f8da 300c 	ldr.w	r3, [sl, #12]
  404eba:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  404ebe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  404ec2:	4245      	negs	r5, r0
  404ec4:	f8ca 2004 	str.w	r2, [sl, #4]
  404ec8:	f8ca 300c 	str.w	r3, [sl, #12]
  404ecc:	e006      	b.n	404edc <__ieee754_rem_pio2+0x13c>
  404ece:	e9c2 0100 	strd	r0, r1, [r2]
  404ed2:	2500      	movs	r5, #0
  404ed4:	2400      	movs	r4, #0
  404ed6:	e9c2 4502 	strd	r4, r5, [r2, #8]
  404eda:	2500      	movs	r5, #0
  404edc:	4628      	mov	r0, r5
  404ede:	b011      	add	sp, #68	; 0x44
  404ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ee4:	4602      	mov	r2, r0
  404ee6:	460b      	mov	r3, r1
  404ee8:	f001 f8bc 	bl	406064 <__aeabi_dsub>
  404eec:	2500      	movs	r5, #0
  404eee:	e9ca 0102 	strd	r0, r1, [sl, #8]
  404ef2:	e9ca 0100 	strd	r0, r1, [sl]
  404ef6:	e7f1      	b.n	404edc <__ieee754_rem_pio2+0x13c>
  404ef8:	a33f      	add	r3, pc, #252	; (adr r3, 404ff8 <__ieee754_rem_pio2+0x258>)
  404efa:	e9d3 2300 	ldrd	r2, r3, [r3]
  404efe:	f001 f8b1 	bl	406064 <__aeabi_dsub>
  404f02:	a33f      	add	r3, pc, #252	; (adr r3, 405000 <__ieee754_rem_pio2+0x260>)
  404f04:	e9d3 2300 	ldrd	r2, r3, [r3]
  404f08:	460d      	mov	r5, r1
  404f0a:	4604      	mov	r4, r0
  404f0c:	f001 f8aa 	bl	406064 <__aeabi_dsub>
  404f10:	4602      	mov	r2, r0
  404f12:	460b      	mov	r3, r1
  404f14:	e9ca 2300 	strd	r2, r3, [sl]
  404f18:	4629      	mov	r1, r5
  404f1a:	4620      	mov	r0, r4
  404f1c:	f001 f8a2 	bl	406064 <__aeabi_dsub>
  404f20:	a337      	add	r3, pc, #220	; (adr r3, 405000 <__ieee754_rem_pio2+0x260>)
  404f22:	e9d3 2300 	ldrd	r2, r3, [r3]
  404f26:	f001 f89d 	bl	406064 <__aeabi_dsub>
  404f2a:	2501      	movs	r5, #1
  404f2c:	e9ca 0102 	strd	r0, r1, [sl, #8]
  404f30:	e7d4      	b.n	404edc <__ieee754_rem_pio2+0x13c>
  404f32:	f000 ff7b 	bl	405e2c <fabs>
  404f36:	a334      	add	r3, pc, #208	; (adr r3, 405008 <__ieee754_rem_pio2+0x268>)
  404f38:	e9d3 2300 	ldrd	r2, r3, [r3]
  404f3c:	4680      	mov	r8, r0
  404f3e:	4689      	mov	r9, r1
  404f40:	f001 fa44 	bl	4063cc <__aeabi_dmul>
  404f44:	2200      	movs	r2, #0
  404f46:	4b39      	ldr	r3, [pc, #228]	; (40502c <__ieee754_rem_pio2+0x28c>)
  404f48:	f001 f88e 	bl	406068 <__adddf3>
  404f4c:	f001 fcd8 	bl	406900 <__aeabi_d2iz>
  404f50:	4605      	mov	r5, r0
  404f52:	f001 f9d5 	bl	406300 <__aeabi_i2d>
  404f56:	a324      	add	r3, pc, #144	; (adr r3, 404fe8 <__ieee754_rem_pio2+0x248>)
  404f58:	e9d3 2300 	ldrd	r2, r3, [r3]
  404f5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404f60:	f001 fa34 	bl	4063cc <__aeabi_dmul>
  404f64:	4602      	mov	r2, r0
  404f66:	460b      	mov	r3, r1
  404f68:	4640      	mov	r0, r8
  404f6a:	4649      	mov	r1, r9
  404f6c:	f001 f87a 	bl	406064 <__aeabi_dsub>
  404f70:	a31f      	add	r3, pc, #124	; (adr r3, 404ff0 <__ieee754_rem_pio2+0x250>)
  404f72:	e9d3 2300 	ldrd	r2, r3, [r3]
  404f76:	4680      	mov	r8, r0
  404f78:	4689      	mov	r9, r1
  404f7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404f7e:	f001 fa25 	bl	4063cc <__aeabi_dmul>
  404f82:	2d1f      	cmp	r5, #31
  404f84:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404f88:	dc54      	bgt.n	405034 <__ieee754_rem_pio2+0x294>
  404f8a:	4b29      	ldr	r3, [pc, #164]	; (405030 <__ieee754_rem_pio2+0x290>)
  404f8c:	1e6a      	subs	r2, r5, #1
  404f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  404f92:	429f      	cmp	r7, r3
  404f94:	d04e      	beq.n	405034 <__ieee754_rem_pio2+0x294>
  404f96:	4602      	mov	r2, r0
  404f98:	460b      	mov	r3, r1
  404f9a:	4640      	mov	r0, r8
  404f9c:	4649      	mov	r1, r9
  404f9e:	f001 f861 	bl	406064 <__aeabi_dsub>
  404fa2:	4602      	mov	r2, r0
  404fa4:	460b      	mov	r3, r1
  404fa6:	e9ca 2300 	strd	r2, r3, [sl]
  404faa:	4683      	mov	fp, r0
  404fac:	460e      	mov	r6, r1
  404fae:	465a      	mov	r2, fp
  404fb0:	4633      	mov	r3, r6
  404fb2:	4640      	mov	r0, r8
  404fb4:	4649      	mov	r1, r9
  404fb6:	f001 f855 	bl	406064 <__aeabi_dsub>
  404fba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404fbe:	f001 f851 	bl	406064 <__aeabi_dsub>
  404fc2:	2c00      	cmp	r4, #0
  404fc4:	4602      	mov	r2, r0
  404fc6:	460b      	mov	r3, r1
  404fc8:	e9ca 2302 	strd	r2, r3, [sl, #8]
  404fcc:	da86      	bge.n	404edc <__ieee754_rem_pio2+0x13c>
  404fce:	465b      	mov	r3, fp
  404fd0:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  404fd4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  404fd8:	e88a 0048 	stmia.w	sl, {r3, r6}
  404fdc:	f8ca 100c 	str.w	r1, [sl, #12]
  404fe0:	f8ca 0008 	str.w	r0, [sl, #8]
  404fe4:	426d      	negs	r5, r5
  404fe6:	e779      	b.n	404edc <__ieee754_rem_pio2+0x13c>
  404fe8:	54400000 	.word	0x54400000
  404fec:	3ff921fb 	.word	0x3ff921fb
  404ff0:	1a626331 	.word	0x1a626331
  404ff4:	3dd0b461 	.word	0x3dd0b461
  404ff8:	1a600000 	.word	0x1a600000
  404ffc:	3dd0b461 	.word	0x3dd0b461
  405000:	2e037073 	.word	0x2e037073
  405004:	3ba3198a 	.word	0x3ba3198a
  405008:	6dc9c883 	.word	0x6dc9c883
  40500c:	3fe45f30 	.word	0x3fe45f30
  405010:	3fe921fb 	.word	0x3fe921fb
  405014:	4002d97b 	.word	0x4002d97b
  405018:	3ff921fb 	.word	0x3ff921fb
  40501c:	413921fb 	.word	0x413921fb
  405020:	7fefffff 	.word	0x7fefffff
  405024:	41700000 	.word	0x41700000
  405028:	00409aac 	.word	0x00409aac
  40502c:	3fe00000 	.word	0x3fe00000
  405030:	00409a2c 	.word	0x00409a2c
  405034:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  405038:	4640      	mov	r0, r8
  40503a:	4649      	mov	r1, r9
  40503c:	f001 f812 	bl	406064 <__aeabi_dsub>
  405040:	153a      	asrs	r2, r7, #20
  405042:	f3c1 530a 	ubfx	r3, r1, #20, #11
  405046:	1ad3      	subs	r3, r2, r3
  405048:	2b10      	cmp	r3, #16
  40504a:	4683      	mov	fp, r0
  40504c:	460e      	mov	r6, r1
  40504e:	9209      	str	r2, [sp, #36]	; 0x24
  405050:	e9ca 0100 	strd	r0, r1, [sl]
  405054:	ddab      	ble.n	404fae <__ieee754_rem_pio2+0x20e>
  405056:	a358      	add	r3, pc, #352	; (adr r3, 4051b8 <__ieee754_rem_pio2+0x418>)
  405058:	e9d3 2300 	ldrd	r2, r3, [r3]
  40505c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405060:	f001 f9b4 	bl	4063cc <__aeabi_dmul>
  405064:	4606      	mov	r6, r0
  405066:	460f      	mov	r7, r1
  405068:	4602      	mov	r2, r0
  40506a:	460b      	mov	r3, r1
  40506c:	4640      	mov	r0, r8
  40506e:	4649      	mov	r1, r9
  405070:	f000 fff8 	bl	406064 <__aeabi_dsub>
  405074:	e9cd 0106 	strd	r0, r1, [sp, #24]
  405078:	4602      	mov	r2, r0
  40507a:	460b      	mov	r3, r1
  40507c:	4640      	mov	r0, r8
  40507e:	4649      	mov	r1, r9
  405080:	f000 fff0 	bl	406064 <__aeabi_dsub>
  405084:	4632      	mov	r2, r6
  405086:	463b      	mov	r3, r7
  405088:	f000 ffec 	bl	406064 <__aeabi_dsub>
  40508c:	a34c      	add	r3, pc, #304	; (adr r3, 4051c0 <__ieee754_rem_pio2+0x420>)
  40508e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405092:	4606      	mov	r6, r0
  405094:	460f      	mov	r7, r1
  405096:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40509a:	f001 f997 	bl	4063cc <__aeabi_dmul>
  40509e:	4632      	mov	r2, r6
  4050a0:	463b      	mov	r3, r7
  4050a2:	f000 ffdf 	bl	406064 <__aeabi_dsub>
  4050a6:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  4050aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4050ae:	4602      	mov	r2, r0
  4050b0:	460b      	mov	r3, r1
  4050b2:	4640      	mov	r0, r8
  4050b4:	4649      	mov	r1, r9
  4050b6:	f000 ffd5 	bl	406064 <__aeabi_dsub>
  4050ba:	460b      	mov	r3, r1
  4050bc:	f3c1 570a 	ubfx	r7, r1, #20, #11
  4050c0:	460e      	mov	r6, r1
  4050c2:	9909      	ldr	r1, [sp, #36]	; 0x24
  4050c4:	1bcf      	subs	r7, r1, r7
  4050c6:	4602      	mov	r2, r0
  4050c8:	2f31      	cmp	r7, #49	; 0x31
  4050ca:	4683      	mov	fp, r0
  4050cc:	e9ca 2300 	strd	r2, r3, [sl]
  4050d0:	dd6c      	ble.n	4051ac <__ieee754_rem_pio2+0x40c>
  4050d2:	a33d      	add	r3, pc, #244	; (adr r3, 4051c8 <__ieee754_rem_pio2+0x428>)
  4050d4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4050d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4050dc:	f001 f976 	bl	4063cc <__aeabi_dmul>
  4050e0:	4606      	mov	r6, r0
  4050e2:	460f      	mov	r7, r1
  4050e4:	4602      	mov	r2, r0
  4050e6:	460b      	mov	r3, r1
  4050e8:	4640      	mov	r0, r8
  4050ea:	4649      	mov	r1, r9
  4050ec:	e9cd 8906 	strd	r8, r9, [sp, #24]
  4050f0:	f000 ffb8 	bl	406064 <__aeabi_dsub>
  4050f4:	4602      	mov	r2, r0
  4050f6:	460b      	mov	r3, r1
  4050f8:	4680      	mov	r8, r0
  4050fa:	4689      	mov	r9, r1
  4050fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  405100:	f000 ffb0 	bl	406064 <__aeabi_dsub>
  405104:	4632      	mov	r2, r6
  405106:	463b      	mov	r3, r7
  405108:	f000 ffac 	bl	406064 <__aeabi_dsub>
  40510c:	a330      	add	r3, pc, #192	; (adr r3, 4051d0 <__ieee754_rem_pio2+0x430>)
  40510e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405112:	4606      	mov	r6, r0
  405114:	460f      	mov	r7, r1
  405116:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40511a:	f001 f957 	bl	4063cc <__aeabi_dmul>
  40511e:	4632      	mov	r2, r6
  405120:	463b      	mov	r3, r7
  405122:	f000 ff9f 	bl	406064 <__aeabi_dsub>
  405126:	4602      	mov	r2, r0
  405128:	460b      	mov	r3, r1
  40512a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  40512e:	e734      	b.n	404f9a <__ieee754_rem_pio2+0x1fa>
  405130:	f000 ff9a 	bl	406068 <__adddf3>
  405134:	4b2a      	ldr	r3, [pc, #168]	; (4051e0 <__ieee754_rem_pio2+0x440>)
  405136:	429f      	cmp	r7, r3
  405138:	4604      	mov	r4, r0
  40513a:	460d      	mov	r5, r1
  40513c:	d018      	beq.n	405170 <__ieee754_rem_pio2+0x3d0>
  40513e:	a326      	add	r3, pc, #152	; (adr r3, 4051d8 <__ieee754_rem_pio2+0x438>)
  405140:	e9d3 2300 	ldrd	r2, r3, [r3]
  405144:	f000 ff90 	bl	406068 <__adddf3>
  405148:	4602      	mov	r2, r0
  40514a:	460b      	mov	r3, r1
  40514c:	e9ca 2300 	strd	r2, r3, [sl]
  405150:	4629      	mov	r1, r5
  405152:	4620      	mov	r0, r4
  405154:	f000 ff86 	bl	406064 <__aeabi_dsub>
  405158:	a31f      	add	r3, pc, #124	; (adr r3, 4051d8 <__ieee754_rem_pio2+0x438>)
  40515a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40515e:	f000 ff83 	bl	406068 <__adddf3>
  405162:	f04f 35ff 	mov.w	r5, #4294967295
  405166:	e9ca 0102 	strd	r0, r1, [sl, #8]
  40516a:	e6b7      	b.n	404edc <__ieee754_rem_pio2+0x13c>
  40516c:	2303      	movs	r3, #3
  40516e:	e694      	b.n	404e9a <__ieee754_rem_pio2+0xfa>
  405170:	a311      	add	r3, pc, #68	; (adr r3, 4051b8 <__ieee754_rem_pio2+0x418>)
  405172:	e9d3 2300 	ldrd	r2, r3, [r3]
  405176:	f000 ff77 	bl	406068 <__adddf3>
  40517a:	a311      	add	r3, pc, #68	; (adr r3, 4051c0 <__ieee754_rem_pio2+0x420>)
  40517c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405180:	460d      	mov	r5, r1
  405182:	4604      	mov	r4, r0
  405184:	f000 ff70 	bl	406068 <__adddf3>
  405188:	4602      	mov	r2, r0
  40518a:	460b      	mov	r3, r1
  40518c:	e9ca 2300 	strd	r2, r3, [sl]
  405190:	4629      	mov	r1, r5
  405192:	4620      	mov	r0, r4
  405194:	f000 ff66 	bl	406064 <__aeabi_dsub>
  405198:	a309      	add	r3, pc, #36	; (adr r3, 4051c0 <__ieee754_rem_pio2+0x420>)
  40519a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40519e:	f000 ff63 	bl	406068 <__adddf3>
  4051a2:	f04f 35ff 	mov.w	r5, #4294967295
  4051a6:	e9ca 0102 	strd	r0, r1, [sl, #8]
  4051aa:	e697      	b.n	404edc <__ieee754_rem_pio2+0x13c>
  4051ac:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  4051b0:	e6fd      	b.n	404fae <__ieee754_rem_pio2+0x20e>
  4051b2:	bf00      	nop
  4051b4:	f3af 8000 	nop.w
  4051b8:	1a600000 	.word	0x1a600000
  4051bc:	3dd0b461 	.word	0x3dd0b461
  4051c0:	2e037073 	.word	0x2e037073
  4051c4:	3ba3198a 	.word	0x3ba3198a
  4051c8:	2e000000 	.word	0x2e000000
  4051cc:	3ba3198a 	.word	0x3ba3198a
  4051d0:	252049c1 	.word	0x252049c1
  4051d4:	397b839a 	.word	0x397b839a
  4051d8:	1a626331 	.word	0x1a626331
  4051dc:	3dd0b461 	.word	0x3dd0b461
  4051e0:	3ff921fb 	.word	0x3ff921fb
  4051e4:	00000000 	.word	0x00000000

004051e8 <__kernel_cos>:
  4051e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4051ec:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  4051f0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  4051f4:	b085      	sub	sp, #20
  4051f6:	460c      	mov	r4, r1
  4051f8:	4692      	mov	sl, r2
  4051fa:	469b      	mov	fp, r3
  4051fc:	4605      	mov	r5, r0
  4051fe:	da6b      	bge.n	4052d8 <__kernel_cos+0xf0>
  405200:	f001 fb7e 	bl	406900 <__aeabi_d2iz>
  405204:	2800      	cmp	r0, #0
  405206:	f000 80e8 	beq.w	4053da <__kernel_cos+0x1f2>
  40520a:	462a      	mov	r2, r5
  40520c:	4623      	mov	r3, r4
  40520e:	4628      	mov	r0, r5
  405210:	4621      	mov	r1, r4
  405212:	f001 f8db 	bl	4063cc <__aeabi_dmul>
  405216:	a374      	add	r3, pc, #464	; (adr r3, 4053e8 <__kernel_cos+0x200>)
  405218:	e9d3 2300 	ldrd	r2, r3, [r3]
  40521c:	4680      	mov	r8, r0
  40521e:	4689      	mov	r9, r1
  405220:	f001 f8d4 	bl	4063cc <__aeabi_dmul>
  405224:	a372      	add	r3, pc, #456	; (adr r3, 4053f0 <__kernel_cos+0x208>)
  405226:	e9d3 2300 	ldrd	r2, r3, [r3]
  40522a:	f000 ff1d 	bl	406068 <__adddf3>
  40522e:	4642      	mov	r2, r8
  405230:	464b      	mov	r3, r9
  405232:	f001 f8cb 	bl	4063cc <__aeabi_dmul>
  405236:	a370      	add	r3, pc, #448	; (adr r3, 4053f8 <__kernel_cos+0x210>)
  405238:	e9d3 2300 	ldrd	r2, r3, [r3]
  40523c:	f000 ff12 	bl	406064 <__aeabi_dsub>
  405240:	4642      	mov	r2, r8
  405242:	464b      	mov	r3, r9
  405244:	f001 f8c2 	bl	4063cc <__aeabi_dmul>
  405248:	a36d      	add	r3, pc, #436	; (adr r3, 405400 <__kernel_cos+0x218>)
  40524a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40524e:	f000 ff0b 	bl	406068 <__adddf3>
  405252:	4642      	mov	r2, r8
  405254:	464b      	mov	r3, r9
  405256:	f001 f8b9 	bl	4063cc <__aeabi_dmul>
  40525a:	a36b      	add	r3, pc, #428	; (adr r3, 405408 <__kernel_cos+0x220>)
  40525c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405260:	f000 ff00 	bl	406064 <__aeabi_dsub>
  405264:	4642      	mov	r2, r8
  405266:	464b      	mov	r3, r9
  405268:	f001 f8b0 	bl	4063cc <__aeabi_dmul>
  40526c:	a368      	add	r3, pc, #416	; (adr r3, 405410 <__kernel_cos+0x228>)
  40526e:	e9d3 2300 	ldrd	r2, r3, [r3]
  405272:	f000 fef9 	bl	406068 <__adddf3>
  405276:	4642      	mov	r2, r8
  405278:	464b      	mov	r3, r9
  40527a:	f001 f8a7 	bl	4063cc <__aeabi_dmul>
  40527e:	e9cd 0100 	strd	r0, r1, [sp]
  405282:	2200      	movs	r2, #0
  405284:	4b64      	ldr	r3, [pc, #400]	; (405418 <__kernel_cos+0x230>)
  405286:	4640      	mov	r0, r8
  405288:	4649      	mov	r1, r9
  40528a:	f001 f89f 	bl	4063cc <__aeabi_dmul>
  40528e:	e9dd 2300 	ldrd	r2, r3, [sp]
  405292:	4606      	mov	r6, r0
  405294:	460f      	mov	r7, r1
  405296:	4640      	mov	r0, r8
  405298:	4649      	mov	r1, r9
  40529a:	f001 f897 	bl	4063cc <__aeabi_dmul>
  40529e:	4652      	mov	r2, sl
  4052a0:	4680      	mov	r8, r0
  4052a2:	4689      	mov	r9, r1
  4052a4:	465b      	mov	r3, fp
  4052a6:	4628      	mov	r0, r5
  4052a8:	4621      	mov	r1, r4
  4052aa:	f001 f88f 	bl	4063cc <__aeabi_dmul>
  4052ae:	4602      	mov	r2, r0
  4052b0:	460b      	mov	r3, r1
  4052b2:	4640      	mov	r0, r8
  4052b4:	4649      	mov	r1, r9
  4052b6:	f000 fed5 	bl	406064 <__aeabi_dsub>
  4052ba:	4602      	mov	r2, r0
  4052bc:	460b      	mov	r3, r1
  4052be:	4630      	mov	r0, r6
  4052c0:	4639      	mov	r1, r7
  4052c2:	f000 fecf 	bl	406064 <__aeabi_dsub>
  4052c6:	4602      	mov	r2, r0
  4052c8:	460b      	mov	r3, r1
  4052ca:	2000      	movs	r0, #0
  4052cc:	4953      	ldr	r1, [pc, #332]	; (40541c <__kernel_cos+0x234>)
  4052ce:	f000 fec9 	bl	406064 <__aeabi_dsub>
  4052d2:	b005      	add	sp, #20
  4052d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4052d8:	4602      	mov	r2, r0
  4052da:	460b      	mov	r3, r1
  4052dc:	f001 f876 	bl	4063cc <__aeabi_dmul>
  4052e0:	a341      	add	r3, pc, #260	; (adr r3, 4053e8 <__kernel_cos+0x200>)
  4052e2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4052e6:	4680      	mov	r8, r0
  4052e8:	4689      	mov	r9, r1
  4052ea:	f001 f86f 	bl	4063cc <__aeabi_dmul>
  4052ee:	a340      	add	r3, pc, #256	; (adr r3, 4053f0 <__kernel_cos+0x208>)
  4052f0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4052f4:	f000 feb8 	bl	406068 <__adddf3>
  4052f8:	4642      	mov	r2, r8
  4052fa:	464b      	mov	r3, r9
  4052fc:	f001 f866 	bl	4063cc <__aeabi_dmul>
  405300:	a33d      	add	r3, pc, #244	; (adr r3, 4053f8 <__kernel_cos+0x210>)
  405302:	e9d3 2300 	ldrd	r2, r3, [r3]
  405306:	f000 fead 	bl	406064 <__aeabi_dsub>
  40530a:	4642      	mov	r2, r8
  40530c:	464b      	mov	r3, r9
  40530e:	f001 f85d 	bl	4063cc <__aeabi_dmul>
  405312:	a33b      	add	r3, pc, #236	; (adr r3, 405400 <__kernel_cos+0x218>)
  405314:	e9d3 2300 	ldrd	r2, r3, [r3]
  405318:	f000 fea6 	bl	406068 <__adddf3>
  40531c:	4642      	mov	r2, r8
  40531e:	464b      	mov	r3, r9
  405320:	f001 f854 	bl	4063cc <__aeabi_dmul>
  405324:	a338      	add	r3, pc, #224	; (adr r3, 405408 <__kernel_cos+0x220>)
  405326:	e9d3 2300 	ldrd	r2, r3, [r3]
  40532a:	f000 fe9b 	bl	406064 <__aeabi_dsub>
  40532e:	4642      	mov	r2, r8
  405330:	464b      	mov	r3, r9
  405332:	f001 f84b 	bl	4063cc <__aeabi_dmul>
  405336:	a336      	add	r3, pc, #216	; (adr r3, 405410 <__kernel_cos+0x228>)
  405338:	e9d3 2300 	ldrd	r2, r3, [r3]
  40533c:	f000 fe94 	bl	406068 <__adddf3>
  405340:	464b      	mov	r3, r9
  405342:	4642      	mov	r2, r8
  405344:	f001 f842 	bl	4063cc <__aeabi_dmul>
  405348:	4b35      	ldr	r3, [pc, #212]	; (405420 <__kernel_cos+0x238>)
  40534a:	429e      	cmp	r6, r3
  40534c:	e9cd 0100 	strd	r0, r1, [sp]
  405350:	dd97      	ble.n	405282 <__kernel_cos+0x9a>
  405352:	4b34      	ldr	r3, [pc, #208]	; (405424 <__kernel_cos+0x23c>)
  405354:	429e      	cmp	r6, r3
  405356:	f04f 0200 	mov.w	r2, #0
  40535a:	dc38      	bgt.n	4053ce <__kernel_cos+0x1e6>
  40535c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
  405360:	2000      	movs	r0, #0
  405362:	492e      	ldr	r1, [pc, #184]	; (40541c <__kernel_cos+0x234>)
  405364:	4616      	mov	r6, r2
  405366:	461f      	mov	r7, r3
  405368:	f000 fe7c 	bl	406064 <__aeabi_dsub>
  40536c:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405370:	2200      	movs	r2, #0
  405372:	4b29      	ldr	r3, [pc, #164]	; (405418 <__kernel_cos+0x230>)
  405374:	4640      	mov	r0, r8
  405376:	4649      	mov	r1, r9
  405378:	f001 f828 	bl	4063cc <__aeabi_dmul>
  40537c:	4632      	mov	r2, r6
  40537e:	463b      	mov	r3, r7
  405380:	f000 fe70 	bl	406064 <__aeabi_dsub>
  405384:	e9dd 2300 	ldrd	r2, r3, [sp]
  405388:	4606      	mov	r6, r0
  40538a:	460f      	mov	r7, r1
  40538c:	4640      	mov	r0, r8
  40538e:	4649      	mov	r1, r9
  405390:	f001 f81c 	bl	4063cc <__aeabi_dmul>
  405394:	4652      	mov	r2, sl
  405396:	4680      	mov	r8, r0
  405398:	4689      	mov	r9, r1
  40539a:	465b      	mov	r3, fp
  40539c:	4628      	mov	r0, r5
  40539e:	4621      	mov	r1, r4
  4053a0:	f001 f814 	bl	4063cc <__aeabi_dmul>
  4053a4:	4602      	mov	r2, r0
  4053a6:	460b      	mov	r3, r1
  4053a8:	4640      	mov	r0, r8
  4053aa:	4649      	mov	r1, r9
  4053ac:	f000 fe5a 	bl	406064 <__aeabi_dsub>
  4053b0:	4602      	mov	r2, r0
  4053b2:	460b      	mov	r3, r1
  4053b4:	4630      	mov	r0, r6
  4053b6:	4639      	mov	r1, r7
  4053b8:	f000 fe54 	bl	406064 <__aeabi_dsub>
  4053bc:	4602      	mov	r2, r0
  4053be:	460b      	mov	r3, r1
  4053c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4053c4:	f000 fe4e 	bl	406064 <__aeabi_dsub>
  4053c8:	b005      	add	sp, #20
  4053ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4053ce:	4b16      	ldr	r3, [pc, #88]	; (405428 <__kernel_cos+0x240>)
  4053d0:	4f16      	ldr	r7, [pc, #88]	; (40542c <__kernel_cos+0x244>)
  4053d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  4053d6:	2600      	movs	r6, #0
  4053d8:	e7ca      	b.n	405370 <__kernel_cos+0x188>
  4053da:	4910      	ldr	r1, [pc, #64]	; (40541c <__kernel_cos+0x234>)
  4053dc:	2000      	movs	r0, #0
  4053de:	b005      	add	sp, #20
  4053e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4053e4:	f3af 8000 	nop.w
  4053e8:	be8838d4 	.word	0xbe8838d4
  4053ec:	bda8fae9 	.word	0xbda8fae9
  4053f0:	bdb4b1c4 	.word	0xbdb4b1c4
  4053f4:	3e21ee9e 	.word	0x3e21ee9e
  4053f8:	809c52ad 	.word	0x809c52ad
  4053fc:	3e927e4f 	.word	0x3e927e4f
  405400:	19cb1590 	.word	0x19cb1590
  405404:	3efa01a0 	.word	0x3efa01a0
  405408:	16c15177 	.word	0x16c15177
  40540c:	3f56c16c 	.word	0x3f56c16c
  405410:	5555554c 	.word	0x5555554c
  405414:	3fa55555 	.word	0x3fa55555
  405418:	3fe00000 	.word	0x3fe00000
  40541c:	3ff00000 	.word	0x3ff00000
  405420:	3fd33332 	.word	0x3fd33332
  405424:	3fe90000 	.word	0x3fe90000
  405428:	3fe70000 	.word	0x3fe70000
  40542c:	3fd20000 	.word	0x3fd20000

00405430 <__kernel_rem_pio2>:
  405430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405434:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
  405438:	4c9c      	ldr	r4, [pc, #624]	; (4056ac <__kernel_rem_pio2+0x27c>)
  40543a:	9ea2      	ldr	r6, [sp, #648]	; 0x288
  40543c:	4d9c      	ldr	r5, [pc, #624]	; (4056b0 <__kernel_rem_pio2+0x280>)
  40543e:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
  405442:	9405      	str	r4, [sp, #20]
  405444:	4626      	mov	r6, r4
  405446:	1ed4      	subs	r4, r2, #3
  405448:	fb85 7504 	smull	r7, r5, r5, r4
  40544c:	17e4      	asrs	r4, r4, #31
  40544e:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
  405452:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
  405456:	461d      	mov	r5, r3
  405458:	9308      	str	r3, [sp, #32]
  40545a:	1c63      	adds	r3, r4, #1
  40545c:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
  405460:	3d01      	subs	r5, #1
  405462:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  405466:	9304      	str	r3, [sp, #16]
  405468:	462b      	mov	r3, r5
  40546a:	9409      	str	r4, [sp, #36]	; 0x24
  40546c:	9502      	str	r5, [sp, #8]
  40546e:	1b65      	subs	r5, r4, r5
  405470:	18f4      	adds	r4, r6, r3
  405472:	9003      	str	r0, [sp, #12]
  405474:	9106      	str	r1, [sp, #24]
  405476:	d41a      	bmi.n	4054ae <__kernel_rem_pio2+0x7e>
  405478:	442c      	add	r4, r5
  40547a:	3401      	adds	r4, #1
  40547c:	f10d 0878 	add.w	r8, sp, #120	; 0x78
  405480:	2600      	movs	r6, #0
  405482:	2700      	movs	r7, #0
  405484:	f8dd 928c 	ldr.w	r9, [sp, #652]	; 0x28c
  405488:	e008      	b.n	40549c <__kernel_rem_pio2+0x6c>
  40548a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
  40548e:	f000 ff37 	bl	406300 <__aeabi_i2d>
  405492:	3501      	adds	r5, #1
  405494:	42a5      	cmp	r5, r4
  405496:	e9e8 0102 	strd	r0, r1, [r8, #8]!
  40549a:	d008      	beq.n	4054ae <__kernel_rem_pio2+0x7e>
  40549c:	2d00      	cmp	r5, #0
  40549e:	daf4      	bge.n	40548a <__kernel_rem_pio2+0x5a>
  4054a0:	3501      	adds	r5, #1
  4054a2:	4630      	mov	r0, r6
  4054a4:	4639      	mov	r1, r7
  4054a6:	42a5      	cmp	r5, r4
  4054a8:	e9e8 0102 	strd	r0, r1, [r8, #8]!
  4054ac:	d1f6      	bne.n	40549c <__kernel_rem_pio2+0x6c>
  4054ae:	9b05      	ldr	r3, [sp, #20]
  4054b0:	2b00      	cmp	r3, #0
  4054b2:	db2e      	blt.n	405512 <__kernel_rem_pio2+0xe2>
  4054b4:	9b08      	ldr	r3, [sp, #32]
  4054b6:	ea4f 09c3 	mov.w	r9, r3, lsl #3
  4054ba:	9b03      	ldr	r3, [sp, #12]
  4054bc:	f1a9 0808 	sub.w	r8, r9, #8
  4054c0:	4498      	add	r8, r3
  4054c2:	ab20      	add	r3, sp, #128	; 0x80
  4054c4:	4499      	add	r9, r3
  4054c6:	9b05      	ldr	r3, [sp, #20]
  4054c8:	aa70      	add	r2, sp, #448	; 0x1c0
  4054ca:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
  4054ce:	f50d 7adc 	add.w	sl, sp, #440	; 0x1b8
  4054d2:	9b02      	ldr	r3, [sp, #8]
  4054d4:	2b00      	cmp	r3, #0
  4054d6:	f2c0 830f 	blt.w	405af8 <__kernel_rem_pio2+0x6c8>
  4054da:	9b03      	ldr	r3, [sp, #12]
  4054dc:	464d      	mov	r5, r9
  4054de:	f1a3 0408 	sub.w	r4, r3, #8
  4054e2:	2600      	movs	r6, #0
  4054e4:	2700      	movs	r7, #0
  4054e6:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
  4054ea:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
  4054ee:	f000 ff6d 	bl	4063cc <__aeabi_dmul>
  4054f2:	4602      	mov	r2, r0
  4054f4:	460b      	mov	r3, r1
  4054f6:	4630      	mov	r0, r6
  4054f8:	4639      	mov	r1, r7
  4054fa:	f000 fdb5 	bl	406068 <__adddf3>
  4054fe:	4544      	cmp	r4, r8
  405500:	4606      	mov	r6, r0
  405502:	460f      	mov	r7, r1
  405504:	d1ef      	bne.n	4054e6 <__kernel_rem_pio2+0xb6>
  405506:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  40550a:	45da      	cmp	sl, fp
  40550c:	f109 0908 	add.w	r9, r9, #8
  405510:	d1df      	bne.n	4054d2 <__kernel_rem_pio2+0xa2>
  405512:	9805      	ldr	r0, [sp, #20]
  405514:	9a08      	ldr	r2, [sp, #32]
  405516:	9000      	str	r0, [sp, #0]
  405518:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
  40551c:	3b01      	subs	r3, #1
  40551e:	009b      	lsls	r3, r3, #2
  405520:	ac0c      	add	r4, sp, #48	; 0x30
  405522:	1f19      	subs	r1, r3, #4
  405524:	4423      	add	r3, r4
  405526:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
  40552a:	930b      	str	r3, [sp, #44]	; 0x2c
  40552c:	9b03      	ldr	r3, [sp, #12]
  40552e:	3a01      	subs	r2, #1
  405530:	4421      	add	r1, r4
  405532:	910a      	str	r1, [sp, #40]	; 0x28
  405534:	eb03 0bc2 	add.w	fp, r3, r2, lsl #3
  405538:	9a00      	ldr	r2, [sp, #0]
  40553a:	a998      	add	r1, sp, #608	; 0x260
  40553c:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  405540:	2a00      	cmp	r2, #0
  405542:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
  405546:	4613      	mov	r3, r2
  405548:	dd2b      	ble.n	4055a2 <__kernel_rem_pio2+0x172>
  40554a:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  40554e:	f1a8 08a8 	sub.w	r8, r8, #168	; 0xa8
  405552:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
  405556:	f50d 7adc 	add.w	sl, sp, #440	; 0x1b8
  40555a:	2200      	movs	r2, #0
  40555c:	4b55      	ldr	r3, [pc, #340]	; (4056b4 <__kernel_rem_pio2+0x284>)
  40555e:	4620      	mov	r0, r4
  405560:	4629      	mov	r1, r5
  405562:	f000 ff33 	bl	4063cc <__aeabi_dmul>
  405566:	f001 f9cb 	bl	406900 <__aeabi_d2iz>
  40556a:	f000 fec9 	bl	406300 <__aeabi_i2d>
  40556e:	2200      	movs	r2, #0
  405570:	4b51      	ldr	r3, [pc, #324]	; (4056b8 <__kernel_rem_pio2+0x288>)
  405572:	4606      	mov	r6, r0
  405574:	460f      	mov	r7, r1
  405576:	f000 ff29 	bl	4063cc <__aeabi_dmul>
  40557a:	4602      	mov	r2, r0
  40557c:	460b      	mov	r3, r1
  40557e:	4620      	mov	r0, r4
  405580:	4629      	mov	r1, r5
  405582:	f000 fd6f 	bl	406064 <__aeabi_dsub>
  405586:	f001 f9bb 	bl	406900 <__aeabi_d2iz>
  40558a:	e878 2302 	ldrd	r2, r3, [r8], #-8
  40558e:	f849 0f04 	str.w	r0, [r9, #4]!
  405592:	4639      	mov	r1, r7
  405594:	4630      	mov	r0, r6
  405596:	f000 fd67 	bl	406068 <__adddf3>
  40559a:	45d0      	cmp	r8, sl
  40559c:	4604      	mov	r4, r0
  40559e:	460d      	mov	r5, r1
  4055a0:	d1db      	bne.n	40555a <__kernel_rem_pio2+0x12a>
  4055a2:	f8dd 9010 	ldr.w	r9, [sp, #16]
  4055a6:	4620      	mov	r0, r4
  4055a8:	4629      	mov	r1, r5
  4055aa:	464a      	mov	r2, r9
  4055ac:	f000 fcd0 	bl	405f50 <scalbn>
  4055b0:	2200      	movs	r2, #0
  4055b2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  4055b6:	4604      	mov	r4, r0
  4055b8:	460d      	mov	r5, r1
  4055ba:	f000 ff07 	bl	4063cc <__aeabi_dmul>
  4055be:	f000 fc3b 	bl	405e38 <floor>
  4055c2:	2200      	movs	r2, #0
  4055c4:	4b3d      	ldr	r3, [pc, #244]	; (4056bc <__kernel_rem_pio2+0x28c>)
  4055c6:	f000 ff01 	bl	4063cc <__aeabi_dmul>
  4055ca:	4602      	mov	r2, r0
  4055cc:	460b      	mov	r3, r1
  4055ce:	4620      	mov	r0, r4
  4055d0:	4629      	mov	r1, r5
  4055d2:	f000 fd47 	bl	406064 <__aeabi_dsub>
  4055d6:	460d      	mov	r5, r1
  4055d8:	4604      	mov	r4, r0
  4055da:	f001 f991 	bl	406900 <__aeabi_d2iz>
  4055de:	4680      	mov	r8, r0
  4055e0:	f000 fe8e 	bl	406300 <__aeabi_i2d>
  4055e4:	460b      	mov	r3, r1
  4055e6:	4602      	mov	r2, r0
  4055e8:	4629      	mov	r1, r5
  4055ea:	4620      	mov	r0, r4
  4055ec:	f000 fd3a 	bl	406064 <__aeabi_dsub>
  4055f0:	464b      	mov	r3, r9
  4055f2:	2b00      	cmp	r3, #0
  4055f4:	4606      	mov	r6, r0
  4055f6:	460f      	mov	r7, r1
  4055f8:	f340 80f7 	ble.w	4057ea <__kernel_rem_pio2+0x3ba>
  4055fc:	9a00      	ldr	r2, [sp, #0]
  4055fe:	a90c      	add	r1, sp, #48	; 0x30
  405600:	3a01      	subs	r2, #1
  405602:	f1c9 0318 	rsb	r3, r9, #24
  405606:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
  40560a:	fa45 f103 	asr.w	r1, r5, r3
  40560e:	fa01 f303 	lsl.w	r3, r1, r3
  405612:	a80c      	add	r0, sp, #48	; 0x30
  405614:	1aeb      	subs	r3, r5, r3
  405616:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  40561a:	f1c9 0517 	rsb	r5, r9, #23
  40561e:	4488      	add	r8, r1
  405620:	fa43 f505 	asr.w	r5, r3, r5
  405624:	2d00      	cmp	r5, #0
  405626:	dd63      	ble.n	4056f0 <__kernel_rem_pio2+0x2c0>
  405628:	9b00      	ldr	r3, [sp, #0]
  40562a:	2b00      	cmp	r3, #0
  40562c:	f108 0801 	add.w	r8, r8, #1
  405630:	f340 8281 	ble.w	405b36 <__kernel_rem_pio2+0x706>
  405634:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405636:	2c00      	cmp	r4, #0
  405638:	f000 8318 	beq.w	405c6c <__kernel_rem_pio2+0x83c>
  40563c:	2001      	movs	r0, #1
  40563e:	2300      	movs	r3, #0
  405640:	aa0c      	add	r2, sp, #48	; 0x30
  405642:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
  405646:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  40564a:	9a00      	ldr	r2, [sp, #0]
  40564c:	4282      	cmp	r2, r0
  40564e:	dd19      	ble.n	405684 <__kernel_rem_pio2+0x254>
  405650:	aa0c      	add	r2, sp, #48	; 0x30
  405652:	ac0c      	add	r4, sp, #48	; 0x30
  405654:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
  405658:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  40565c:	1a51      	subs	r1, r2, r1
  40565e:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
  405662:	9900      	ldr	r1, [sp, #0]
  405664:	3302      	adds	r3, #2
  405666:	4299      	cmp	r1, r3
  405668:	dd0c      	ble.n	405684 <__kernel_rem_pio2+0x254>
  40566a:	4610      	mov	r0, r2
  40566c:	9a00      	ldr	r2, [sp, #0]
  40566e:	a90c      	add	r1, sp, #48	; 0x30
  405670:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  405674:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  405678:	681a      	ldr	r2, [r3, #0]
  40567a:	1a82      	subs	r2, r0, r2
  40567c:	f843 2b04 	str.w	r2, [r3], #4
  405680:	428b      	cmp	r3, r1
  405682:	d1f9      	bne.n	405678 <__kernel_rem_pio2+0x248>
  405684:	9b04      	ldr	r3, [sp, #16]
  405686:	2b00      	cmp	r3, #0
  405688:	dd1a      	ble.n	4056c0 <__kernel_rem_pio2+0x290>
  40568a:	9b04      	ldr	r3, [sp, #16]
  40568c:	2b01      	cmp	r3, #1
  40568e:	f04f 0401 	mov.w	r4, #1
  405692:	f040 8258 	bne.w	405b46 <__kernel_rem_pio2+0x716>
  405696:	9b00      	ldr	r3, [sp, #0]
  405698:	1e5a      	subs	r2, r3, #1
  40569a:	ab0c      	add	r3, sp, #48	; 0x30
  40569c:	a90c      	add	r1, sp, #48	; 0x30
  40569e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4056a2:	f3c3 0316 	ubfx	r3, r3, #0, #23
  4056a6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  4056aa:	e258      	b.n	405b5e <__kernel_rem_pio2+0x72e>
  4056ac:	00409bf8 	.word	0x00409bf8
  4056b0:	2aaaaaab 	.word	0x2aaaaaab
  4056b4:	3e700000 	.word	0x3e700000
  4056b8:	41700000 	.word	0x41700000
  4056bc:	40200000 	.word	0x40200000
  4056c0:	2d02      	cmp	r5, #2
  4056c2:	d115      	bne.n	4056f0 <__kernel_rem_pio2+0x2c0>
  4056c4:	4632      	mov	r2, r6
  4056c6:	463b      	mov	r3, r7
  4056c8:	2000      	movs	r0, #0
  4056ca:	4997      	ldr	r1, [pc, #604]	; (405928 <__kernel_rem_pio2+0x4f8>)
  4056cc:	f000 fcca 	bl	406064 <__aeabi_dsub>
  4056d0:	4606      	mov	r6, r0
  4056d2:	460f      	mov	r7, r1
  4056d4:	9a04      	ldr	r2, [sp, #16]
  4056d6:	4994      	ldr	r1, [pc, #592]	; (405928 <__kernel_rem_pio2+0x4f8>)
  4056d8:	2000      	movs	r0, #0
  4056da:	f000 fc39 	bl	405f50 <scalbn>
  4056de:	4602      	mov	r2, r0
  4056e0:	460b      	mov	r3, r1
  4056e2:	4630      	mov	r0, r6
  4056e4:	4639      	mov	r1, r7
  4056e6:	f000 fcbd 	bl	406064 <__aeabi_dsub>
  4056ea:	2502      	movs	r5, #2
  4056ec:	4606      	mov	r6, r0
  4056ee:	460f      	mov	r7, r1
  4056f0:	2200      	movs	r2, #0
  4056f2:	2300      	movs	r3, #0
  4056f4:	4630      	mov	r0, r6
  4056f6:	4639      	mov	r1, r7
  4056f8:	f001 f8d0 	bl	40689c <__aeabi_dcmpeq>
  4056fc:	2800      	cmp	r0, #0
  4056fe:	f000 8252 	beq.w	405ba6 <__kernel_rem_pio2+0x776>
  405702:	9a00      	ldr	r2, [sp, #0]
  405704:	9b05      	ldr	r3, [sp, #20]
  405706:	1e50      	subs	r0, r2, #1
  405708:	4283      	cmp	r3, r0
  40570a:	dc0f      	bgt.n	40572c <__kernel_rem_pio2+0x2fc>
  40570c:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
  405710:	3b01      	subs	r3, #1
  405712:	aa0c      	add	r2, sp, #48	; 0x30
  405714:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405716:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40571a:	2200      	movs	r2, #0
  40571c:	f853 1904 	ldr.w	r1, [r3], #-4
  405720:	42a3      	cmp	r3, r4
  405722:	ea42 0201 	orr.w	r2, r2, r1
  405726:	d1f9      	bne.n	40571c <__kernel_rem_pio2+0x2ec>
  405728:	2a00      	cmp	r2, #0
  40572a:	d16f      	bne.n	40580c <__kernel_rem_pio2+0x3dc>
  40572c:	9b05      	ldr	r3, [sp, #20]
  40572e:	aa0c      	add	r2, sp, #48	; 0x30
  405730:	3b01      	subs	r3, #1
  405732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  405736:	2b00      	cmp	r3, #0
  405738:	f040 8233 	bne.w	405ba2 <__kernel_rem_pio2+0x772>
  40573c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40573e:	2301      	movs	r3, #1
  405740:	f852 1904 	ldr.w	r1, [r2], #-4
  405744:	3301      	adds	r3, #1
  405746:	2900      	cmp	r1, #0
  405748:	d0fa      	beq.n	405740 <__kernel_rem_pio2+0x310>
  40574a:	9a00      	ldr	r2, [sp, #0]
  40574c:	18d3      	adds	r3, r2, r3
  40574e:	f102 0a01 	add.w	sl, r2, #1
  405752:	459a      	cmp	sl, r3
  405754:	9307      	str	r3, [sp, #28]
  405756:	dc3d      	bgt.n	4057d4 <__kernel_rem_pio2+0x3a4>
  405758:	9b00      	ldr	r3, [sp, #0]
  40575a:	9908      	ldr	r1, [sp, #32]
  40575c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40575e:	440b      	add	r3, r1
  405760:	9907      	ldr	r1, [sp, #28]
  405762:	eb0a 0802 	add.w	r8, sl, r2
  405766:	4699      	mov	r9, r3
  405768:	ab20      	add	r3, sp, #128	; 0x80
  40576a:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
  40576e:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
  405772:	188b      	adds	r3, r1, r2
  405774:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
  405776:	f108 38ff 	add.w	r8, r8, #4294967295
  40577a:	eb02 0888 	add.w	r8, r2, r8, lsl #2
  40577e:	aa70      	add	r2, sp, #448	; 0x1c0
  405780:	eb02 0aca 	add.w	sl, r2, sl, lsl #3
  405784:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
  405786:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40578a:	9300      	str	r3, [sp, #0]
  40578c:	f858 0f04 	ldr.w	r0, [r8, #4]!
  405790:	f000 fdb6 	bl	406300 <__aeabi_i2d>
  405794:	9b02      	ldr	r3, [sp, #8]
  405796:	2b00      	cmp	r3, #0
  405798:	e8e9 0102 	strd	r0, r1, [r9], #8
  40579c:	db1d      	blt.n	4057da <__kernel_rem_pio2+0x3aa>
  40579e:	9b03      	ldr	r3, [sp, #12]
  4057a0:	464d      	mov	r5, r9
  4057a2:	f1a3 0408 	sub.w	r4, r3, #8
  4057a6:	2600      	movs	r6, #0
  4057a8:	2700      	movs	r7, #0
  4057aa:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
  4057ae:	e9f4 0102 	ldrd	r0, r1, [r4, #8]!
  4057b2:	f000 fe0b 	bl	4063cc <__aeabi_dmul>
  4057b6:	4602      	mov	r2, r0
  4057b8:	460b      	mov	r3, r1
  4057ba:	4630      	mov	r0, r6
  4057bc:	4639      	mov	r1, r7
  4057be:	f000 fc53 	bl	406068 <__adddf3>
  4057c2:	455c      	cmp	r4, fp
  4057c4:	4606      	mov	r6, r0
  4057c6:	460f      	mov	r7, r1
  4057c8:	d1ef      	bne.n	4057aa <__kernel_rem_pio2+0x37a>
  4057ca:	9b00      	ldr	r3, [sp, #0]
  4057cc:	4598      	cmp	r8, r3
  4057ce:	e8ea 6702 	strd	r6, r7, [sl], #8
  4057d2:	d1db      	bne.n	40578c <__kernel_rem_pio2+0x35c>
  4057d4:	9b07      	ldr	r3, [sp, #28]
  4057d6:	9300      	str	r3, [sp, #0]
  4057d8:	e6ae      	b.n	405538 <__kernel_rem_pio2+0x108>
  4057da:	9b00      	ldr	r3, [sp, #0]
  4057dc:	2600      	movs	r6, #0
  4057de:	2700      	movs	r7, #0
  4057e0:	4598      	cmp	r8, r3
  4057e2:	e8ea 6702 	strd	r6, r7, [sl], #8
  4057e6:	d1d1      	bne.n	40578c <__kernel_rem_pio2+0x35c>
  4057e8:	e7f4      	b.n	4057d4 <__kernel_rem_pio2+0x3a4>
  4057ea:	d106      	bne.n	4057fa <__kernel_rem_pio2+0x3ca>
  4057ec:	9b00      	ldr	r3, [sp, #0]
  4057ee:	aa0c      	add	r2, sp, #48	; 0x30
  4057f0:	3b01      	subs	r3, #1
  4057f2:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
  4057f6:	15ed      	asrs	r5, r5, #23
  4057f8:	e714      	b.n	405624 <__kernel_rem_pio2+0x1f4>
  4057fa:	2200      	movs	r2, #0
  4057fc:	4b4b      	ldr	r3, [pc, #300]	; (40592c <__kernel_rem_pio2+0x4fc>)
  4057fe:	f001 f86b 	bl	4068d8 <__aeabi_dcmpge>
  405802:	2800      	cmp	r0, #0
  405804:	f040 8182 	bne.w	405b0c <__kernel_rem_pio2+0x6dc>
  405808:	4605      	mov	r5, r0
  40580a:	e771      	b.n	4056f0 <__kernel_rem_pio2+0x2c0>
  40580c:	a90c      	add	r1, sp, #48	; 0x30
  40580e:	9502      	str	r5, [sp, #8]
  405810:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
  405814:	9904      	ldr	r1, [sp, #16]
  405816:	f8cd 801c 	str.w	r8, [sp, #28]
  40581a:	3918      	subs	r1, #24
  40581c:	4602      	mov	r2, r0
  40581e:	9000      	str	r0, [sp, #0]
  405820:	9104      	str	r1, [sp, #16]
  405822:	b96b      	cbnz	r3, 405840 <__kernel_rem_pio2+0x410>
  405824:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
  405828:	3b01      	subs	r3, #1
  40582a:	a80c      	add	r0, sp, #48	; 0x30
  40582c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  405830:	f853 0904 	ldr.w	r0, [r3], #-4
  405834:	3a01      	subs	r2, #1
  405836:	3918      	subs	r1, #24
  405838:	2800      	cmp	r0, #0
  40583a:	d0f9      	beq.n	405830 <__kernel_rem_pio2+0x400>
  40583c:	9200      	str	r2, [sp, #0]
  40583e:	9104      	str	r1, [sp, #16]
  405840:	9a04      	ldr	r2, [sp, #16]
  405842:	4939      	ldr	r1, [pc, #228]	; (405928 <__kernel_rem_pio2+0x4f8>)
  405844:	2000      	movs	r0, #0
  405846:	f000 fb83 	bl	405f50 <scalbn>
  40584a:	9b00      	ldr	r3, [sp, #0]
  40584c:	2b00      	cmp	r3, #0
  40584e:	4604      	mov	r4, r0
  405850:	460d      	mov	r5, r1
  405852:	f2c0 8203 	blt.w	405c5c <__kernel_rem_pio2+0x82c>
  405856:	00da      	lsls	r2, r3, #3
  405858:	a970      	add	r1, sp, #448	; 0x1c0
  40585a:	eb01 0b02 	add.w	fp, r1, r2
  40585e:	9204      	str	r2, [sp, #16]
  405860:	aa0c      	add	r2, sp, #48	; 0x30
  405862:	eb02 0683 	add.w	r6, r2, r3, lsl #2
  405866:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 405930 <__kernel_rem_pio2+0x500>
  40586a:	f10b 0708 	add.w	r7, fp, #8
  40586e:	3604      	adds	r6, #4
  405870:	f04f 0800 	mov.w	r8, #0
  405874:	f856 0d04 	ldr.w	r0, [r6, #-4]!
  405878:	f000 fd42 	bl	406300 <__aeabi_i2d>
  40587c:	4622      	mov	r2, r4
  40587e:	462b      	mov	r3, r5
  405880:	f000 fda4 	bl	4063cc <__aeabi_dmul>
  405884:	464b      	mov	r3, r9
  405886:	e967 0102 	strd	r0, r1, [r7, #-8]!
  40588a:	4642      	mov	r2, r8
  40588c:	4620      	mov	r0, r4
  40588e:	4629      	mov	r1, r5
  405890:	f000 fd9c 	bl	4063cc <__aeabi_dmul>
  405894:	ab0c      	add	r3, sp, #48	; 0x30
  405896:	429e      	cmp	r6, r3
  405898:	4604      	mov	r4, r0
  40589a:	460d      	mov	r5, r1
  40589c:	d1ea      	bne.n	405874 <__kernel_rem_pio2+0x444>
  40589e:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
  4058a2:	f8cd a00c 	str.w	sl, [sp, #12]
  4058a6:	f8dd a014 	ldr.w	sl, [sp, #20]
  4058aa:	f04f 0900 	mov.w	r9, #0
  4058ae:	f1ba 0f00 	cmp.w	sl, #0
  4058b2:	f2c0 813d 	blt.w	405b30 <__kernel_rem_pio2+0x700>
  4058b6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 405934 <__kernel_rem_pio2+0x504>
  4058ba:	465d      	mov	r5, fp
  4058bc:	a118      	add	r1, pc, #96	; (adr r1, 405920 <__kernel_rem_pio2+0x4f0>)
  4058be:	e9d1 0100 	ldrd	r0, r1, [r1]
  4058c2:	2600      	movs	r6, #0
  4058c4:	2700      	movs	r7, #0
  4058c6:	2400      	movs	r4, #0
  4058c8:	e003      	b.n	4058d2 <__kernel_rem_pio2+0x4a2>
  4058ca:	454c      	cmp	r4, r9
  4058cc:	dc10      	bgt.n	4058f0 <__kernel_rem_pio2+0x4c0>
  4058ce:	e8f8 0102 	ldrd	r0, r1, [r8], #8
  4058d2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
  4058d6:	f000 fd79 	bl	4063cc <__aeabi_dmul>
  4058da:	4602      	mov	r2, r0
  4058dc:	460b      	mov	r3, r1
  4058de:	4630      	mov	r0, r6
  4058e0:	4639      	mov	r1, r7
  4058e2:	f000 fbc1 	bl	406068 <__adddf3>
  4058e6:	3401      	adds	r4, #1
  4058e8:	45a2      	cmp	sl, r4
  4058ea:	4606      	mov	r6, r0
  4058ec:	460f      	mov	r7, r1
  4058ee:	daec      	bge.n	4058ca <__kernel_rem_pio2+0x49a>
  4058f0:	9b03      	ldr	r3, [sp, #12]
  4058f2:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  4058f6:	f1ab 0b08 	sub.w	fp, fp, #8
  4058fa:	e9c3 6700 	strd	r6, r7, [r3]
  4058fe:	ab6e      	add	r3, sp, #440	; 0x1b8
  405900:	455b      	cmp	r3, fp
  405902:	f109 0901 	add.w	r9, r9, #1
  405906:	d1d2      	bne.n	4058ae <__kernel_rem_pio2+0x47e>
  405908:	9ba2      	ldr	r3, [sp, #648]	; 0x288
  40590a:	f8dd a00c 	ldr.w	sl, [sp, #12]
  40590e:	2b03      	cmp	r3, #3
  405910:	f200 808b 	bhi.w	405a2a <__kernel_rem_pio2+0x5fa>
  405914:	e8df f013 	tbh	[pc, r3, lsl #1]
  405918:	009000d1 	.word	0x009000d1
  40591c:	00100090 	.word	0x00100090
  405920:	40000000 	.word	0x40000000
  405924:	3ff921fb 	.word	0x3ff921fb
  405928:	3ff00000 	.word	0x3ff00000
  40592c:	3fe00000 	.word	0x3fe00000
  405930:	3e700000 	.word	0x3e700000
  405934:	00409bc0 	.word	0x00409bc0
  405938:	9b00      	ldr	r3, [sp, #0]
  40593a:	2b00      	cmp	r3, #0
  40593c:	f340 81a4 	ble.w	405c88 <__kernel_rem_pio2+0x858>
  405940:	9b04      	ldr	r3, [sp, #16]
  405942:	eb0a 0803 	add.w	r8, sl, r3
  405946:	e9d8 6700 	ldrd	r6, r7, [r8]
  40594a:	46d3      	mov	fp, sl
  40594c:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
  405950:	4632      	mov	r2, r6
  405952:	463b      	mov	r3, r7
  405954:	4648      	mov	r0, r9
  405956:	4651      	mov	r1, sl
  405958:	f000 fb86 	bl	406068 <__adddf3>
  40595c:	4604      	mov	r4, r0
  40595e:	460d      	mov	r5, r1
  405960:	4602      	mov	r2, r0
  405962:	460b      	mov	r3, r1
  405964:	4648      	mov	r0, r9
  405966:	4651      	mov	r1, sl
  405968:	f000 fb7c 	bl	406064 <__aeabi_dsub>
  40596c:	4632      	mov	r2, r6
  40596e:	463b      	mov	r3, r7
  405970:	f000 fb7a 	bl	406068 <__adddf3>
  405974:	e9c8 0100 	strd	r0, r1, [r8]
  405978:	e968 4502 	strd	r4, r5, [r8, #-8]!
  40597c:	45c3      	cmp	fp, r8
  40597e:	4626      	mov	r6, r4
  405980:	462f      	mov	r7, r5
  405982:	d1e3      	bne.n	40594c <__kernel_rem_pio2+0x51c>
  405984:	9b00      	ldr	r3, [sp, #0]
  405986:	2b01      	cmp	r3, #1
  405988:	46da      	mov	sl, fp
  40598a:	f340 817d 	ble.w	405c88 <__kernel_rem_pio2+0x858>
  40598e:	9b04      	ldr	r3, [sp, #16]
  405990:	445b      	add	r3, fp
  405992:	e9d3 6700 	ldrd	r6, r7, [r3]
  405996:	4698      	mov	r8, r3
  405998:	4699      	mov	r9, r3
  40599a:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
  40599e:	e959 3402 	ldrd	r3, r4, [r9, #-8]
  4059a2:	4632      	mov	r2, r6
  4059a4:	4618      	mov	r0, r3
  4059a6:	4621      	mov	r1, r4
  4059a8:	463b      	mov	r3, r7
  4059aa:	e9cd 0100 	strd	r0, r1, [sp]
  4059ae:	f000 fb5b 	bl	406068 <__adddf3>
  4059b2:	4604      	mov	r4, r0
  4059b4:	460d      	mov	r5, r1
  4059b6:	4602      	mov	r2, r0
  4059b8:	460b      	mov	r3, r1
  4059ba:	e9dd 0100 	ldrd	r0, r1, [sp]
  4059be:	f000 fb51 	bl	406064 <__aeabi_dsub>
  4059c2:	4632      	mov	r2, r6
  4059c4:	463b      	mov	r3, r7
  4059c6:	f000 fb4f 	bl	406068 <__adddf3>
  4059ca:	e9c9 0100 	strd	r0, r1, [r9]
  4059ce:	e969 4502 	strd	r4, r5, [r9, #-8]!
  4059d2:	45cb      	cmp	fp, r9
  4059d4:	4626      	mov	r6, r4
  4059d6:	462f      	mov	r7, r5
  4059d8:	d1e1      	bne.n	40599e <__kernel_rem_pio2+0x56e>
  4059da:	2300      	movs	r3, #0
  4059dc:	f108 0808 	add.w	r8, r8, #8
  4059e0:	461d      	mov	r5, r3
  4059e2:	ac4c      	add	r4, sp, #304	; 0x130
  4059e4:	4618      	mov	r0, r3
  4059e6:	4629      	mov	r1, r5
  4059e8:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
  4059ec:	f000 fb3c 	bl	406068 <__adddf3>
  4059f0:	4544      	cmp	r4, r8
  4059f2:	4603      	mov	r3, r0
  4059f4:	460d      	mov	r5, r1
  4059f6:	d1f5      	bne.n	4059e4 <__kernel_rem_pio2+0x5b4>
  4059f8:	9a02      	ldr	r2, [sp, #8]
  4059fa:	2a00      	cmp	r2, #0
  4059fc:	f000 8120 	beq.w	405c40 <__kernel_rem_pio2+0x810>
  405a00:	f8da 4004 	ldr.w	r4, [sl, #4]
  405a04:	f8da 200c 	ldr.w	r2, [sl, #12]
  405a08:	9f06      	ldr	r7, [sp, #24]
  405a0a:	f8da 1000 	ldr.w	r1, [sl]
  405a0e:	f8da 0008 	ldr.w	r0, [sl, #8]
  405a12:	613b      	str	r3, [r7, #16]
  405a14:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
  405a18:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
  405a1c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  405a20:	617d      	str	r5, [r7, #20]
  405a22:	607c      	str	r4, [r7, #4]
  405a24:	60fa      	str	r2, [r7, #12]
  405a26:	6039      	str	r1, [r7, #0]
  405a28:	60b8      	str	r0, [r7, #8]
  405a2a:	9b07      	ldr	r3, [sp, #28]
  405a2c:	f003 0007 	and.w	r0, r3, #7
  405a30:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
  405a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a38:	9c04      	ldr	r4, [sp, #16]
  405a3a:	2600      	movs	r6, #0
  405a3c:	3408      	adds	r4, #8
  405a3e:	4454      	add	r4, sl
  405a40:	4633      	mov	r3, r6
  405a42:	4630      	mov	r0, r6
  405a44:	4619      	mov	r1, r3
  405a46:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  405a4a:	f000 fb0d 	bl	406068 <__adddf3>
  405a4e:	4554      	cmp	r4, sl
  405a50:	4606      	mov	r6, r0
  405a52:	460b      	mov	r3, r1
  405a54:	d1f5      	bne.n	405a42 <__kernel_rem_pio2+0x612>
  405a56:	9a02      	ldr	r2, [sp, #8]
  405a58:	4630      	mov	r0, r6
  405a5a:	4619      	mov	r1, r3
  405a5c:	2a00      	cmp	r2, #0
  405a5e:	f000 80da 	beq.w	405c16 <__kernel_rem_pio2+0x7e6>
  405a62:	9806      	ldr	r0, [sp, #24]
  405a64:	f103 4400 	add.w	r4, r3, #2147483648	; 0x80000000
  405a68:	4632      	mov	r2, r6
  405a6a:	6044      	str	r4, [r0, #4]
  405a6c:	6006      	str	r6, [r0, #0]
  405a6e:	e9da 0100 	ldrd	r0, r1, [sl]
  405a72:	f000 faf7 	bl	406064 <__aeabi_dsub>
  405a76:	460b      	mov	r3, r1
  405a78:	9900      	ldr	r1, [sp, #0]
  405a7a:	2900      	cmp	r1, #0
  405a7c:	4602      	mov	r2, r0
  405a7e:	dd0e      	ble.n	405a9e <__kernel_rem_pio2+0x66e>
  405a80:	2401      	movs	r4, #1
  405a82:	4610      	mov	r0, r2
  405a84:	4619      	mov	r1, r3
  405a86:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
  405a8a:	f000 faed 	bl	406068 <__adddf3>
  405a8e:	460b      	mov	r3, r1
  405a90:	9900      	ldr	r1, [sp, #0]
  405a92:	3401      	adds	r4, #1
  405a94:	42a1      	cmp	r1, r4
  405a96:	4602      	mov	r2, r0
  405a98:	daf3      	bge.n	405a82 <__kernel_rem_pio2+0x652>
  405a9a:	9902      	ldr	r1, [sp, #8]
  405a9c:	b109      	cbz	r1, 405aa2 <__kernel_rem_pio2+0x672>
  405a9e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  405aa2:	4619      	mov	r1, r3
  405aa4:	9b06      	ldr	r3, [sp, #24]
  405aa6:	4610      	mov	r0, r2
  405aa8:	e9c3 0102 	strd	r0, r1, [r3, #8]
  405aac:	9b07      	ldr	r3, [sp, #28]
  405aae:	f003 0007 	and.w	r0, r3, #7
  405ab2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
  405ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405aba:	9c04      	ldr	r4, [sp, #16]
  405abc:	2200      	movs	r2, #0
  405abe:	3408      	adds	r4, #8
  405ac0:	4454      	add	r4, sl
  405ac2:	4613      	mov	r3, r2
  405ac4:	4610      	mov	r0, r2
  405ac6:	4619      	mov	r1, r3
  405ac8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  405acc:	f000 facc 	bl	406068 <__adddf3>
  405ad0:	45a2      	cmp	sl, r4
  405ad2:	4602      	mov	r2, r0
  405ad4:	460b      	mov	r3, r1
  405ad6:	d1f5      	bne.n	405ac4 <__kernel_rem_pio2+0x694>
  405ad8:	9902      	ldr	r1, [sp, #8]
  405ada:	b109      	cbz	r1, 405ae0 <__kernel_rem_pio2+0x6b0>
  405adc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  405ae0:	4619      	mov	r1, r3
  405ae2:	9b06      	ldr	r3, [sp, #24]
  405ae4:	4610      	mov	r0, r2
  405ae6:	e9c3 0100 	strd	r0, r1, [r3]
  405aea:	9b07      	ldr	r3, [sp, #28]
  405aec:	f003 0007 	and.w	r0, r3, #7
  405af0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
  405af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405af8:	2600      	movs	r6, #0
  405afa:	2700      	movs	r7, #0
  405afc:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  405b00:	45da      	cmp	sl, fp
  405b02:	f109 0908 	add.w	r9, r9, #8
  405b06:	f47f ace4 	bne.w	4054d2 <__kernel_rem_pio2+0xa2>
  405b0a:	e502      	b.n	405512 <__kernel_rem_pio2+0xe2>
  405b0c:	9b00      	ldr	r3, [sp, #0]
  405b0e:	2b00      	cmp	r3, #0
  405b10:	f108 0801 	add.w	r8, r8, #1
  405b14:	bfc8      	it	gt
  405b16:	2502      	movgt	r5, #2
  405b18:	f73f ad8c 	bgt.w	405634 <__kernel_rem_pio2+0x204>
  405b1c:	4632      	mov	r2, r6
  405b1e:	463b      	mov	r3, r7
  405b20:	2000      	movs	r0, #0
  405b22:	4963      	ldr	r1, [pc, #396]	; (405cb0 <__kernel_rem_pio2+0x880>)
  405b24:	f000 fa9e 	bl	406064 <__aeabi_dsub>
  405b28:	2502      	movs	r5, #2
  405b2a:	4606      	mov	r6, r0
  405b2c:	460f      	mov	r7, r1
  405b2e:	e5df      	b.n	4056f0 <__kernel_rem_pio2+0x2c0>
  405b30:	2600      	movs	r6, #0
  405b32:	2700      	movs	r7, #0
  405b34:	e6dc      	b.n	4058f0 <__kernel_rem_pio2+0x4c0>
  405b36:	9b04      	ldr	r3, [sp, #16]
  405b38:	2b00      	cmp	r3, #0
  405b3a:	dd26      	ble.n	405b8a <__kernel_rem_pio2+0x75a>
  405b3c:	2400      	movs	r4, #0
  405b3e:	9b04      	ldr	r3, [sp, #16]
  405b40:	2b01      	cmp	r3, #1
  405b42:	f43f ada8 	beq.w	405696 <__kernel_rem_pio2+0x266>
  405b46:	2b02      	cmp	r3, #2
  405b48:	d109      	bne.n	405b5e <__kernel_rem_pio2+0x72e>
  405b4a:	9b00      	ldr	r3, [sp, #0]
  405b4c:	1e5a      	subs	r2, r3, #1
  405b4e:	ab0c      	add	r3, sp, #48	; 0x30
  405b50:	a90c      	add	r1, sp, #48	; 0x30
  405b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  405b56:	f3c3 0315 	ubfx	r3, r3, #0, #22
  405b5a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  405b5e:	2d02      	cmp	r5, #2
  405b60:	f47f adc6 	bne.w	4056f0 <__kernel_rem_pio2+0x2c0>
  405b64:	4632      	mov	r2, r6
  405b66:	463b      	mov	r3, r7
  405b68:	2000      	movs	r0, #0
  405b6a:	4951      	ldr	r1, [pc, #324]	; (405cb0 <__kernel_rem_pio2+0x880>)
  405b6c:	f000 fa7a 	bl	406064 <__aeabi_dsub>
  405b70:	4606      	mov	r6, r0
  405b72:	460f      	mov	r7, r1
  405b74:	2c00      	cmp	r4, #0
  405b76:	f43f adbb 	beq.w	4056f0 <__kernel_rem_pio2+0x2c0>
  405b7a:	e5ab      	b.n	4056d4 <__kernel_rem_pio2+0x2a4>
  405b7c:	9900      	ldr	r1, [sp, #0]
  405b7e:	3301      	adds	r3, #1
  405b80:	4299      	cmp	r1, r3
  405b82:	d178      	bne.n	405c76 <__kernel_rem_pio2+0x846>
  405b84:	9b04      	ldr	r3, [sp, #16]
  405b86:	2b00      	cmp	r3, #0
  405b88:	dcd9      	bgt.n	405b3e <__kernel_rem_pio2+0x70e>
  405b8a:	2d02      	cmp	r5, #2
  405b8c:	f47f adb0 	bne.w	4056f0 <__kernel_rem_pio2+0x2c0>
  405b90:	4632      	mov	r2, r6
  405b92:	463b      	mov	r3, r7
  405b94:	2000      	movs	r0, #0
  405b96:	4946      	ldr	r1, [pc, #280]	; (405cb0 <__kernel_rem_pio2+0x880>)
  405b98:	f000 fa64 	bl	406064 <__aeabi_dsub>
  405b9c:	4606      	mov	r6, r0
  405b9e:	460f      	mov	r7, r1
  405ba0:	e5a6      	b.n	4056f0 <__kernel_rem_pio2+0x2c0>
  405ba2:	2301      	movs	r3, #1
  405ba4:	e5d1      	b.n	40574a <__kernel_rem_pio2+0x31a>
  405ba6:	4639      	mov	r1, r7
  405ba8:	9f04      	ldr	r7, [sp, #16]
  405baa:	9502      	str	r5, [sp, #8]
  405bac:	427a      	negs	r2, r7
  405bae:	4630      	mov	r0, r6
  405bb0:	f8cd 801c 	str.w	r8, [sp, #28]
  405bb4:	f000 f9cc 	bl	405f50 <scalbn>
  405bb8:	2200      	movs	r2, #0
  405bba:	4b3e      	ldr	r3, [pc, #248]	; (405cb4 <__kernel_rem_pio2+0x884>)
  405bbc:	4604      	mov	r4, r0
  405bbe:	460d      	mov	r5, r1
  405bc0:	f000 fe8a 	bl	4068d8 <__aeabi_dcmpge>
  405bc4:	2800      	cmp	r0, #0
  405bc6:	d062      	beq.n	405c8e <__kernel_rem_pio2+0x85e>
  405bc8:	2200      	movs	r2, #0
  405bca:	4b3b      	ldr	r3, [pc, #236]	; (405cb8 <__kernel_rem_pio2+0x888>)
  405bcc:	4620      	mov	r0, r4
  405bce:	4629      	mov	r1, r5
  405bd0:	f000 fbfc 	bl	4063cc <__aeabi_dmul>
  405bd4:	f000 fe94 	bl	406900 <__aeabi_d2iz>
  405bd8:	4606      	mov	r6, r0
  405bda:	f000 fb91 	bl	406300 <__aeabi_i2d>
  405bde:	2200      	movs	r2, #0
  405be0:	4b34      	ldr	r3, [pc, #208]	; (405cb4 <__kernel_rem_pio2+0x884>)
  405be2:	f000 fbf3 	bl	4063cc <__aeabi_dmul>
  405be6:	4602      	mov	r2, r0
  405be8:	460b      	mov	r3, r1
  405bea:	4620      	mov	r0, r4
  405bec:	4629      	mov	r1, r5
  405bee:	f000 fa39 	bl	406064 <__aeabi_dsub>
  405bf2:	f000 fe85 	bl	406900 <__aeabi_d2iz>
  405bf6:	9900      	ldr	r1, [sp, #0]
  405bf8:	460b      	mov	r3, r1
  405bfa:	3301      	adds	r3, #1
  405bfc:	461a      	mov	r2, r3
  405bfe:	9300      	str	r3, [sp, #0]
  405c00:	463b      	mov	r3, r7
  405c02:	3318      	adds	r3, #24
  405c04:	9304      	str	r3, [sp, #16]
  405c06:	460b      	mov	r3, r1
  405c08:	a90c      	add	r1, sp, #48	; 0x30
  405c0a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  405c0e:	4613      	mov	r3, r2
  405c10:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
  405c14:	e614      	b.n	405840 <__kernel_rem_pio2+0x410>
  405c16:	9b06      	ldr	r3, [sp, #24]
  405c18:	4632      	mov	r2, r6
  405c1a:	e9c3 0100 	strd	r0, r1, [r3]
  405c1e:	460b      	mov	r3, r1
  405c20:	e9da 0100 	ldrd	r0, r1, [sl]
  405c24:	f000 fa1e 	bl	406064 <__aeabi_dsub>
  405c28:	460b      	mov	r3, r1
  405c2a:	9900      	ldr	r1, [sp, #0]
  405c2c:	2900      	cmp	r1, #0
  405c2e:	4602      	mov	r2, r0
  405c30:	f73f af26 	bgt.w	405a80 <__kernel_rem_pio2+0x650>
  405c34:	4619      	mov	r1, r3
  405c36:	9b06      	ldr	r3, [sp, #24]
  405c38:	4610      	mov	r0, r2
  405c3a:	e9c3 0102 	strd	r0, r1, [r3, #8]
  405c3e:	e735      	b.n	405aac <__kernel_rem_pio2+0x67c>
  405c40:	4618      	mov	r0, r3
  405c42:	4629      	mov	r1, r5
  405c44:	e9da 2300 	ldrd	r2, r3, [sl]
  405c48:	e9da 4502 	ldrd	r4, r5, [sl, #8]
  405c4c:	9f06      	ldr	r7, [sp, #24]
  405c4e:	e9c7 0104 	strd	r0, r1, [r7, #16]
  405c52:	e9c7 2300 	strd	r2, r3, [r7]
  405c56:	e9c7 4502 	strd	r4, r5, [r7, #8]
  405c5a:	e6e6      	b.n	405a2a <__kernel_rem_pio2+0x5fa>
  405c5c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
  405c5e:	2b03      	cmp	r3, #3
  405c60:	f63f aee3 	bhi.w	405a2a <__kernel_rem_pio2+0x5fa>
  405c64:	e8df f003 	tbb	[pc, r3]
  405c68:	0e1c1c21 	.word	0x0e1c1c21
  405c6c:	9b00      	ldr	r3, [sp, #0]
  405c6e:	2b01      	cmp	r3, #1
  405c70:	dd88      	ble.n	405b84 <__kernel_rem_pio2+0x754>
  405c72:	aa0c      	add	r2, sp, #48	; 0x30
  405c74:	2301      	movs	r3, #1
  405c76:	f852 4f04 	ldr.w	r4, [r2, #4]!
  405c7a:	2c00      	cmp	r4, #0
  405c7c:	f43f af7e 	beq.w	405b7c <__kernel_rem_pio2+0x74c>
  405c80:	1c58      	adds	r0, r3, #1
  405c82:	e4dd      	b.n	405640 <__kernel_rem_pio2+0x210>
  405c84:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
  405c88:	2300      	movs	r3, #0
  405c8a:	461d      	mov	r5, r3
  405c8c:	e6b4      	b.n	4059f8 <__kernel_rem_pio2+0x5c8>
  405c8e:	4629      	mov	r1, r5
  405c90:	4620      	mov	r0, r4
  405c92:	f000 fe35 	bl	406900 <__aeabi_d2iz>
  405c96:	9a00      	ldr	r2, [sp, #0]
  405c98:	a90c      	add	r1, sp, #48	; 0x30
  405c9a:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
  405c9e:	e5cf      	b.n	405840 <__kernel_rem_pio2+0x410>
  405ca0:	2600      	movs	r6, #0
  405ca2:	4633      	mov	r3, r6
  405ca4:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
  405ca8:	e6d5      	b.n	405a56 <__kernel_rem_pio2+0x626>
  405caa:	2200      	movs	r2, #0
  405cac:	4613      	mov	r3, r2
  405cae:	e713      	b.n	405ad8 <__kernel_rem_pio2+0x6a8>
  405cb0:	3ff00000 	.word	0x3ff00000
  405cb4:	41700000 	.word	0x41700000
  405cb8:	3e700000 	.word	0x3e700000
  405cbc:	00000000 	.word	0x00000000

00405cc0 <__kernel_sin>:
  405cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405cc4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  405cc8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
  405ccc:	b085      	sub	sp, #20
  405cce:	460c      	mov	r4, r1
  405cd0:	4690      	mov	r8, r2
  405cd2:	4699      	mov	r9, r3
  405cd4:	4605      	mov	r5, r0
  405cd6:	da04      	bge.n	405ce2 <__kernel_sin+0x22>
  405cd8:	f000 fe12 	bl	406900 <__aeabi_d2iz>
  405cdc:	2800      	cmp	r0, #0
  405cde:	f000 8085 	beq.w	405dec <__kernel_sin+0x12c>
  405ce2:	462a      	mov	r2, r5
  405ce4:	4623      	mov	r3, r4
  405ce6:	4628      	mov	r0, r5
  405ce8:	4621      	mov	r1, r4
  405cea:	f000 fb6f 	bl	4063cc <__aeabi_dmul>
  405cee:	4606      	mov	r6, r0
  405cf0:	460f      	mov	r7, r1
  405cf2:	4602      	mov	r2, r0
  405cf4:	460b      	mov	r3, r1
  405cf6:	4628      	mov	r0, r5
  405cf8:	4621      	mov	r1, r4
  405cfa:	f000 fb67 	bl	4063cc <__aeabi_dmul>
  405cfe:	a33e      	add	r3, pc, #248	; (adr r3, 405df8 <__kernel_sin+0x138>)
  405d00:	e9d3 2300 	ldrd	r2, r3, [r3]
  405d04:	4682      	mov	sl, r0
  405d06:	468b      	mov	fp, r1
  405d08:	4630      	mov	r0, r6
  405d0a:	4639      	mov	r1, r7
  405d0c:	f000 fb5e 	bl	4063cc <__aeabi_dmul>
  405d10:	a33b      	add	r3, pc, #236	; (adr r3, 405e00 <__kernel_sin+0x140>)
  405d12:	e9d3 2300 	ldrd	r2, r3, [r3]
  405d16:	f000 f9a5 	bl	406064 <__aeabi_dsub>
  405d1a:	4632      	mov	r2, r6
  405d1c:	463b      	mov	r3, r7
  405d1e:	f000 fb55 	bl	4063cc <__aeabi_dmul>
  405d22:	a339      	add	r3, pc, #228	; (adr r3, 405e08 <__kernel_sin+0x148>)
  405d24:	e9d3 2300 	ldrd	r2, r3, [r3]
  405d28:	f000 f99e 	bl	406068 <__adddf3>
  405d2c:	4632      	mov	r2, r6
  405d2e:	463b      	mov	r3, r7
  405d30:	f000 fb4c 	bl	4063cc <__aeabi_dmul>
  405d34:	a336      	add	r3, pc, #216	; (adr r3, 405e10 <__kernel_sin+0x150>)
  405d36:	e9d3 2300 	ldrd	r2, r3, [r3]
  405d3a:	f000 f993 	bl	406064 <__aeabi_dsub>
  405d3e:	4632      	mov	r2, r6
  405d40:	463b      	mov	r3, r7
  405d42:	f000 fb43 	bl	4063cc <__aeabi_dmul>
  405d46:	a334      	add	r3, pc, #208	; (adr r3, 405e18 <__kernel_sin+0x158>)
  405d48:	e9d3 2300 	ldrd	r2, r3, [r3]
  405d4c:	f000 f98c 	bl	406068 <__adddf3>
  405d50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405d52:	e9cd 0100 	strd	r0, r1, [sp]
  405d56:	b39b      	cbz	r3, 405dc0 <__kernel_sin+0x100>
  405d58:	2200      	movs	r2, #0
  405d5a:	4b33      	ldr	r3, [pc, #204]	; (405e28 <__kernel_sin+0x168>)
  405d5c:	4640      	mov	r0, r8
  405d5e:	4649      	mov	r1, r9
  405d60:	f000 fb34 	bl	4063cc <__aeabi_dmul>
  405d64:	e9dd 2300 	ldrd	r2, r3, [sp]
  405d68:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405d6c:	4650      	mov	r0, sl
  405d6e:	4659      	mov	r1, fp
  405d70:	f000 fb2c 	bl	4063cc <__aeabi_dmul>
  405d74:	4602      	mov	r2, r0
  405d76:	460b      	mov	r3, r1
  405d78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405d7c:	f000 f972 	bl	406064 <__aeabi_dsub>
  405d80:	4632      	mov	r2, r6
  405d82:	463b      	mov	r3, r7
  405d84:	f000 fb22 	bl	4063cc <__aeabi_dmul>
  405d88:	4642      	mov	r2, r8
  405d8a:	464b      	mov	r3, r9
  405d8c:	f000 f96a 	bl	406064 <__aeabi_dsub>
  405d90:	a323      	add	r3, pc, #140	; (adr r3, 405e20 <__kernel_sin+0x160>)
  405d92:	e9d3 2300 	ldrd	r2, r3, [r3]
  405d96:	4606      	mov	r6, r0
  405d98:	460f      	mov	r7, r1
  405d9a:	4650      	mov	r0, sl
  405d9c:	4659      	mov	r1, fp
  405d9e:	f000 fb15 	bl	4063cc <__aeabi_dmul>
  405da2:	4602      	mov	r2, r0
  405da4:	460b      	mov	r3, r1
  405da6:	4630      	mov	r0, r6
  405da8:	4639      	mov	r1, r7
  405daa:	f000 f95d 	bl	406068 <__adddf3>
  405dae:	4602      	mov	r2, r0
  405db0:	460b      	mov	r3, r1
  405db2:	4628      	mov	r0, r5
  405db4:	4621      	mov	r1, r4
  405db6:	f000 f955 	bl	406064 <__aeabi_dsub>
  405dba:	b005      	add	sp, #20
  405dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405dc0:	4602      	mov	r2, r0
  405dc2:	460b      	mov	r3, r1
  405dc4:	4630      	mov	r0, r6
  405dc6:	4639      	mov	r1, r7
  405dc8:	f000 fb00 	bl	4063cc <__aeabi_dmul>
  405dcc:	a314      	add	r3, pc, #80	; (adr r3, 405e20 <__kernel_sin+0x160>)
  405dce:	e9d3 2300 	ldrd	r2, r3, [r3]
  405dd2:	f000 f947 	bl	406064 <__aeabi_dsub>
  405dd6:	4652      	mov	r2, sl
  405dd8:	465b      	mov	r3, fp
  405dda:	f000 faf7 	bl	4063cc <__aeabi_dmul>
  405dde:	462a      	mov	r2, r5
  405de0:	4623      	mov	r3, r4
  405de2:	f000 f941 	bl	406068 <__adddf3>
  405de6:	b005      	add	sp, #20
  405de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405dec:	4628      	mov	r0, r5
  405dee:	4621      	mov	r1, r4
  405df0:	b005      	add	sp, #20
  405df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405df6:	bf00      	nop
  405df8:	5acfd57c 	.word	0x5acfd57c
  405dfc:	3de5d93a 	.word	0x3de5d93a
  405e00:	8a2b9ceb 	.word	0x8a2b9ceb
  405e04:	3e5ae5e6 	.word	0x3e5ae5e6
  405e08:	57b1fe7d 	.word	0x57b1fe7d
  405e0c:	3ec71de3 	.word	0x3ec71de3
  405e10:	19c161d5 	.word	0x19c161d5
  405e14:	3f2a01a0 	.word	0x3f2a01a0
  405e18:	1110f8a6 	.word	0x1110f8a6
  405e1c:	3f811111 	.word	0x3f811111
  405e20:	55555549 	.word	0x55555549
  405e24:	3fc55555 	.word	0x3fc55555
  405e28:	3fe00000 	.word	0x3fe00000

00405e2c <fabs>:
  405e2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405e30:	4770      	bx	lr
  405e32:	bf00      	nop
  405e34:	0000      	movs	r0, r0
	...

00405e38 <floor>:
  405e38:	f3c1 520a 	ubfx	r2, r1, #20, #11
  405e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405e40:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
  405e44:	2e13      	cmp	r6, #19
  405e46:	460b      	mov	r3, r1
  405e48:	460d      	mov	r5, r1
  405e4a:	4604      	mov	r4, r0
  405e4c:	4688      	mov	r8, r1
  405e4e:	4607      	mov	r7, r0
  405e50:	dc1d      	bgt.n	405e8e <floor+0x56>
  405e52:	2e00      	cmp	r6, #0
  405e54:	db40      	blt.n	405ed8 <floor+0xa0>
  405e56:	4a3c      	ldr	r2, [pc, #240]	; (405f48 <floor+0x110>)
  405e58:	fa42 f906 	asr.w	r9, r2, r6
  405e5c:	ea01 0209 	and.w	r2, r1, r9
  405e60:	4302      	orrs	r2, r0
  405e62:	4686      	mov	lr, r0
  405e64:	d018      	beq.n	405e98 <floor+0x60>
  405e66:	a336      	add	r3, pc, #216	; (adr r3, 405f40 <floor+0x108>)
  405e68:	e9d3 2300 	ldrd	r2, r3, [r3]
  405e6c:	f000 f8fc 	bl	406068 <__adddf3>
  405e70:	2200      	movs	r2, #0
  405e72:	2300      	movs	r3, #0
  405e74:	f000 fd3a 	bl	4068ec <__aeabi_dcmpgt>
  405e78:	b120      	cbz	r0, 405e84 <floor+0x4c>
  405e7a:	2d00      	cmp	r5, #0
  405e7c:	db42      	blt.n	405f04 <floor+0xcc>
  405e7e:	ea28 0509 	bic.w	r5, r8, r9
  405e82:	2700      	movs	r7, #0
  405e84:	463c      	mov	r4, r7
  405e86:	4629      	mov	r1, r5
  405e88:	4620      	mov	r0, r4
  405e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405e8e:	2e33      	cmp	r6, #51	; 0x33
  405e90:	dd06      	ble.n	405ea0 <floor+0x68>
  405e92:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  405e96:	d02f      	beq.n	405ef8 <floor+0xc0>
  405e98:	4619      	mov	r1, r3
  405e9a:	4620      	mov	r0, r4
  405e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405ea0:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
  405ea4:	f04f 39ff 	mov.w	r9, #4294967295
  405ea8:	fa29 f902 	lsr.w	r9, r9, r2
  405eac:	ea10 0f09 	tst.w	r0, r9
  405eb0:	d0f2      	beq.n	405e98 <floor+0x60>
  405eb2:	a323      	add	r3, pc, #140	; (adr r3, 405f40 <floor+0x108>)
  405eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
  405eb8:	f000 f8d6 	bl	406068 <__adddf3>
  405ebc:	2200      	movs	r2, #0
  405ebe:	2300      	movs	r3, #0
  405ec0:	f000 fd14 	bl	4068ec <__aeabi_dcmpgt>
  405ec4:	2800      	cmp	r0, #0
  405ec6:	d0dd      	beq.n	405e84 <floor+0x4c>
  405ec8:	2d00      	cmp	r5, #0
  405eca:	db21      	blt.n	405f10 <floor+0xd8>
  405ecc:	4645      	mov	r5, r8
  405ece:	ea27 0709 	bic.w	r7, r7, r9
  405ed2:	463c      	mov	r4, r7
  405ed4:	4629      	mov	r1, r5
  405ed6:	e7d7      	b.n	405e88 <floor+0x50>
  405ed8:	a319      	add	r3, pc, #100	; (adr r3, 405f40 <floor+0x108>)
  405eda:	e9d3 2300 	ldrd	r2, r3, [r3]
  405ede:	f000 f8c3 	bl	406068 <__adddf3>
  405ee2:	2200      	movs	r2, #0
  405ee4:	2300      	movs	r3, #0
  405ee6:	f000 fd01 	bl	4068ec <__aeabi_dcmpgt>
  405eea:	2800      	cmp	r0, #0
  405eec:	d0ca      	beq.n	405e84 <floor+0x4c>
  405eee:	2d00      	cmp	r5, #0
  405ef0:	db19      	blt.n	405f26 <floor+0xee>
  405ef2:	2700      	movs	r7, #0
  405ef4:	463d      	mov	r5, r7
  405ef6:	e7c5      	b.n	405e84 <floor+0x4c>
  405ef8:	4602      	mov	r2, r0
  405efa:	460b      	mov	r3, r1
  405efc:	f000 f8b4 	bl	406068 <__adddf3>
  405f00:	4604      	mov	r4, r0
  405f02:	e7ca      	b.n	405e9a <floor+0x62>
  405f04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  405f08:	fa43 f606 	asr.w	r6, r3, r6
  405f0c:	44b0      	add	r8, r6
  405f0e:	e7b6      	b.n	405e7e <floor+0x46>
  405f10:	2e14      	cmp	r6, #20
  405f12:	d010      	beq.n	405f36 <floor+0xfe>
  405f14:	2301      	movs	r3, #1
  405f16:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
  405f1a:	fa03 f606 	lsl.w	r6, r3, r6
  405f1e:	1937      	adds	r7, r6, r4
  405f20:	bf28      	it	cs
  405f22:	4498      	addcs	r8, r3
  405f24:	e7d2      	b.n	405ecc <floor+0x94>
  405f26:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
  405f2a:	4b08      	ldr	r3, [pc, #32]	; (405f4c <floor+0x114>)
  405f2c:	4322      	orrs	r2, r4
  405f2e:	bf18      	it	ne
  405f30:	461d      	movne	r5, r3
  405f32:	2700      	movs	r7, #0
  405f34:	e7a6      	b.n	405e84 <floor+0x4c>
  405f36:	f105 0801 	add.w	r8, r5, #1
  405f3a:	e7c7      	b.n	405ecc <floor+0x94>
  405f3c:	f3af 8000 	nop.w
  405f40:	8800759c 	.word	0x8800759c
  405f44:	7e37e43c 	.word	0x7e37e43c
  405f48:	000fffff 	.word	0x000fffff
  405f4c:	bff00000 	.word	0xbff00000

00405f50 <scalbn>:
  405f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405f52:	f3c1 560a 	ubfx	r6, r1, #20, #11
  405f56:	4604      	mov	r4, r0
  405f58:	460d      	mov	r5, r1
  405f5a:	460b      	mov	r3, r1
  405f5c:	4617      	mov	r7, r2
  405f5e:	bb0e      	cbnz	r6, 405fa4 <scalbn+0x54>
  405f60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  405f64:	4303      	orrs	r3, r0
  405f66:	4686      	mov	lr, r0
  405f68:	d025      	beq.n	405fb6 <scalbn+0x66>
  405f6a:	2200      	movs	r2, #0
  405f6c:	4b34      	ldr	r3, [pc, #208]	; (406040 <scalbn+0xf0>)
  405f6e:	f000 fa2d 	bl	4063cc <__aeabi_dmul>
  405f72:	4a34      	ldr	r2, [pc, #208]	; (406044 <scalbn+0xf4>)
  405f74:	4297      	cmp	r7, r2
  405f76:	4604      	mov	r4, r0
  405f78:	460d      	mov	r5, r1
  405f7a:	460b      	mov	r3, r1
  405f7c:	db2a      	blt.n	405fd4 <scalbn+0x84>
  405f7e:	f3c1 560a 	ubfx	r6, r1, #20, #11
  405f82:	3e36      	subs	r6, #54	; 0x36
  405f84:	443e      	add	r6, r7
  405f86:	f240 72fe 	movw	r2, #2046	; 0x7fe
  405f8a:	4296      	cmp	r6, r2
  405f8c:	dc28      	bgt.n	405fe0 <scalbn+0x90>
  405f8e:	2e00      	cmp	r6, #0
  405f90:	dd12      	ble.n	405fb8 <scalbn+0x68>
  405f92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  405f96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  405f9a:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  405f9e:	4620      	mov	r0, r4
  405fa0:	4629      	mov	r1, r5
  405fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405fa4:	f240 72ff 	movw	r2, #2047	; 0x7ff
  405fa8:	4296      	cmp	r6, r2
  405faa:	d1eb      	bne.n	405f84 <scalbn+0x34>
  405fac:	4602      	mov	r2, r0
  405fae:	460b      	mov	r3, r1
  405fb0:	f000 f85a 	bl	406068 <__adddf3>
  405fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405fb8:	f116 0f35 	cmn.w	r6, #53	; 0x35
  405fbc:	da1d      	bge.n	405ffa <scalbn+0xaa>
  405fbe:	f24c 3350 	movw	r3, #50000	; 0xc350
  405fc2:	429f      	cmp	r7, r3
  405fc4:	4622      	mov	r2, r4
  405fc6:	462b      	mov	r3, r5
  405fc8:	dc25      	bgt.n	406016 <scalbn+0xc6>
  405fca:	a119      	add	r1, pc, #100	; (adr r1, 406030 <scalbn+0xe0>)
  405fcc:	e9d1 0100 	ldrd	r0, r1, [r1]
  405fd0:	f000 f83c 	bl	40604c <copysign>
  405fd4:	a316      	add	r3, pc, #88	; (adr r3, 406030 <scalbn+0xe0>)
  405fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
  405fda:	f000 f9f7 	bl	4063cc <__aeabi_dmul>
  405fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405fe0:	4622      	mov	r2, r4
  405fe2:	462b      	mov	r3, r5
  405fe4:	a114      	add	r1, pc, #80	; (adr r1, 406038 <scalbn+0xe8>)
  405fe6:	e9d1 0100 	ldrd	r0, r1, [r1]
  405fea:	f000 f82f 	bl	40604c <copysign>
  405fee:	a312      	add	r3, pc, #72	; (adr r3, 406038 <scalbn+0xe8>)
  405ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
  405ff4:	f000 f9ea 	bl	4063cc <__aeabi_dmul>
  405ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405ffa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
  405ffe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  406002:	3636      	adds	r6, #54	; 0x36
  406004:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
  406008:	4620      	mov	r0, r4
  40600a:	4629      	mov	r1, r5
  40600c:	2200      	movs	r2, #0
  40600e:	4b0e      	ldr	r3, [pc, #56]	; (406048 <scalbn+0xf8>)
  406010:	f000 f9dc 	bl	4063cc <__aeabi_dmul>
  406014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406016:	a108      	add	r1, pc, #32	; (adr r1, 406038 <scalbn+0xe8>)
  406018:	e9d1 0100 	ldrd	r0, r1, [r1]
  40601c:	f000 f816 	bl	40604c <copysign>
  406020:	a305      	add	r3, pc, #20	; (adr r3, 406038 <scalbn+0xe8>)
  406022:	e9d3 2300 	ldrd	r2, r3, [r3]
  406026:	f000 f9d1 	bl	4063cc <__aeabi_dmul>
  40602a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40602c:	f3af 8000 	nop.w
  406030:	c2f8f359 	.word	0xc2f8f359
  406034:	01a56e1f 	.word	0x01a56e1f
  406038:	8800759c 	.word	0x8800759c
  40603c:	7e37e43c 	.word	0x7e37e43c
  406040:	43500000 	.word	0x43500000
  406044:	ffff3cb0 	.word	0xffff3cb0
  406048:	3c900000 	.word	0x3c900000

0040604c <copysign>:
  40604c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  406050:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  406054:	ea42 0103 	orr.w	r1, r2, r3
  406058:	4770      	bx	lr
  40605a:	bf00      	nop

0040605c <__aeabi_drsub>:
  40605c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  406060:	e002      	b.n	406068 <__adddf3>
  406062:	bf00      	nop

00406064 <__aeabi_dsub>:
  406064:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00406068 <__adddf3>:
  406068:	b530      	push	{r4, r5, lr}
  40606a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40606e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  406072:	ea94 0f05 	teq	r4, r5
  406076:	bf08      	it	eq
  406078:	ea90 0f02 	teqeq	r0, r2
  40607c:	bf1f      	itttt	ne
  40607e:	ea54 0c00 	orrsne.w	ip, r4, r0
  406082:	ea55 0c02 	orrsne.w	ip, r5, r2
  406086:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40608a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40608e:	f000 80e2 	beq.w	406256 <__adddf3+0x1ee>
  406092:	ea4f 5454 	mov.w	r4, r4, lsr #21
  406096:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40609a:	bfb8      	it	lt
  40609c:	426d      	neglt	r5, r5
  40609e:	dd0c      	ble.n	4060ba <__adddf3+0x52>
  4060a0:	442c      	add	r4, r5
  4060a2:	ea80 0202 	eor.w	r2, r0, r2
  4060a6:	ea81 0303 	eor.w	r3, r1, r3
  4060aa:	ea82 0000 	eor.w	r0, r2, r0
  4060ae:	ea83 0101 	eor.w	r1, r3, r1
  4060b2:	ea80 0202 	eor.w	r2, r0, r2
  4060b6:	ea81 0303 	eor.w	r3, r1, r3
  4060ba:	2d36      	cmp	r5, #54	; 0x36
  4060bc:	bf88      	it	hi
  4060be:	bd30      	pophi	{r4, r5, pc}
  4060c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4060c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4060c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4060cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4060d0:	d002      	beq.n	4060d8 <__adddf3+0x70>
  4060d2:	4240      	negs	r0, r0
  4060d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4060d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4060dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4060e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4060e4:	d002      	beq.n	4060ec <__adddf3+0x84>
  4060e6:	4252      	negs	r2, r2
  4060e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4060ec:	ea94 0f05 	teq	r4, r5
  4060f0:	f000 80a7 	beq.w	406242 <__adddf3+0x1da>
  4060f4:	f1a4 0401 	sub.w	r4, r4, #1
  4060f8:	f1d5 0e20 	rsbs	lr, r5, #32
  4060fc:	db0d      	blt.n	40611a <__adddf3+0xb2>
  4060fe:	fa02 fc0e 	lsl.w	ip, r2, lr
  406102:	fa22 f205 	lsr.w	r2, r2, r5
  406106:	1880      	adds	r0, r0, r2
  406108:	f141 0100 	adc.w	r1, r1, #0
  40610c:	fa03 f20e 	lsl.w	r2, r3, lr
  406110:	1880      	adds	r0, r0, r2
  406112:	fa43 f305 	asr.w	r3, r3, r5
  406116:	4159      	adcs	r1, r3
  406118:	e00e      	b.n	406138 <__adddf3+0xd0>
  40611a:	f1a5 0520 	sub.w	r5, r5, #32
  40611e:	f10e 0e20 	add.w	lr, lr, #32
  406122:	2a01      	cmp	r2, #1
  406124:	fa03 fc0e 	lsl.w	ip, r3, lr
  406128:	bf28      	it	cs
  40612a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40612e:	fa43 f305 	asr.w	r3, r3, r5
  406132:	18c0      	adds	r0, r0, r3
  406134:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  406138:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40613c:	d507      	bpl.n	40614e <__adddf3+0xe6>
  40613e:	f04f 0e00 	mov.w	lr, #0
  406142:	f1dc 0c00 	rsbs	ip, ip, #0
  406146:	eb7e 0000 	sbcs.w	r0, lr, r0
  40614a:	eb6e 0101 	sbc.w	r1, lr, r1
  40614e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  406152:	d31b      	bcc.n	40618c <__adddf3+0x124>
  406154:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  406158:	d30c      	bcc.n	406174 <__adddf3+0x10c>
  40615a:	0849      	lsrs	r1, r1, #1
  40615c:	ea5f 0030 	movs.w	r0, r0, rrx
  406160:	ea4f 0c3c 	mov.w	ip, ip, rrx
  406164:	f104 0401 	add.w	r4, r4, #1
  406168:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40616c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  406170:	f080 809a 	bcs.w	4062a8 <__adddf3+0x240>
  406174:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  406178:	bf08      	it	eq
  40617a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40617e:	f150 0000 	adcs.w	r0, r0, #0
  406182:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406186:	ea41 0105 	orr.w	r1, r1, r5
  40618a:	bd30      	pop	{r4, r5, pc}
  40618c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  406190:	4140      	adcs	r0, r0
  406192:	eb41 0101 	adc.w	r1, r1, r1
  406196:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40619a:	f1a4 0401 	sub.w	r4, r4, #1
  40619e:	d1e9      	bne.n	406174 <__adddf3+0x10c>
  4061a0:	f091 0f00 	teq	r1, #0
  4061a4:	bf04      	itt	eq
  4061a6:	4601      	moveq	r1, r0
  4061a8:	2000      	moveq	r0, #0
  4061aa:	fab1 f381 	clz	r3, r1
  4061ae:	bf08      	it	eq
  4061b0:	3320      	addeq	r3, #32
  4061b2:	f1a3 030b 	sub.w	r3, r3, #11
  4061b6:	f1b3 0220 	subs.w	r2, r3, #32
  4061ba:	da0c      	bge.n	4061d6 <__adddf3+0x16e>
  4061bc:	320c      	adds	r2, #12
  4061be:	dd08      	ble.n	4061d2 <__adddf3+0x16a>
  4061c0:	f102 0c14 	add.w	ip, r2, #20
  4061c4:	f1c2 020c 	rsb	r2, r2, #12
  4061c8:	fa01 f00c 	lsl.w	r0, r1, ip
  4061cc:	fa21 f102 	lsr.w	r1, r1, r2
  4061d0:	e00c      	b.n	4061ec <__adddf3+0x184>
  4061d2:	f102 0214 	add.w	r2, r2, #20
  4061d6:	bfd8      	it	le
  4061d8:	f1c2 0c20 	rsble	ip, r2, #32
  4061dc:	fa01 f102 	lsl.w	r1, r1, r2
  4061e0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4061e4:	bfdc      	itt	le
  4061e6:	ea41 010c 	orrle.w	r1, r1, ip
  4061ea:	4090      	lslle	r0, r2
  4061ec:	1ae4      	subs	r4, r4, r3
  4061ee:	bfa2      	ittt	ge
  4061f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4061f4:	4329      	orrge	r1, r5
  4061f6:	bd30      	popge	{r4, r5, pc}
  4061f8:	ea6f 0404 	mvn.w	r4, r4
  4061fc:	3c1f      	subs	r4, #31
  4061fe:	da1c      	bge.n	40623a <__adddf3+0x1d2>
  406200:	340c      	adds	r4, #12
  406202:	dc0e      	bgt.n	406222 <__adddf3+0x1ba>
  406204:	f104 0414 	add.w	r4, r4, #20
  406208:	f1c4 0220 	rsb	r2, r4, #32
  40620c:	fa20 f004 	lsr.w	r0, r0, r4
  406210:	fa01 f302 	lsl.w	r3, r1, r2
  406214:	ea40 0003 	orr.w	r0, r0, r3
  406218:	fa21 f304 	lsr.w	r3, r1, r4
  40621c:	ea45 0103 	orr.w	r1, r5, r3
  406220:	bd30      	pop	{r4, r5, pc}
  406222:	f1c4 040c 	rsb	r4, r4, #12
  406226:	f1c4 0220 	rsb	r2, r4, #32
  40622a:	fa20 f002 	lsr.w	r0, r0, r2
  40622e:	fa01 f304 	lsl.w	r3, r1, r4
  406232:	ea40 0003 	orr.w	r0, r0, r3
  406236:	4629      	mov	r1, r5
  406238:	bd30      	pop	{r4, r5, pc}
  40623a:	fa21 f004 	lsr.w	r0, r1, r4
  40623e:	4629      	mov	r1, r5
  406240:	bd30      	pop	{r4, r5, pc}
  406242:	f094 0f00 	teq	r4, #0
  406246:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40624a:	bf06      	itte	eq
  40624c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  406250:	3401      	addeq	r4, #1
  406252:	3d01      	subne	r5, #1
  406254:	e74e      	b.n	4060f4 <__adddf3+0x8c>
  406256:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40625a:	bf18      	it	ne
  40625c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406260:	d029      	beq.n	4062b6 <__adddf3+0x24e>
  406262:	ea94 0f05 	teq	r4, r5
  406266:	bf08      	it	eq
  406268:	ea90 0f02 	teqeq	r0, r2
  40626c:	d005      	beq.n	40627a <__adddf3+0x212>
  40626e:	ea54 0c00 	orrs.w	ip, r4, r0
  406272:	bf04      	itt	eq
  406274:	4619      	moveq	r1, r3
  406276:	4610      	moveq	r0, r2
  406278:	bd30      	pop	{r4, r5, pc}
  40627a:	ea91 0f03 	teq	r1, r3
  40627e:	bf1e      	ittt	ne
  406280:	2100      	movne	r1, #0
  406282:	2000      	movne	r0, #0
  406284:	bd30      	popne	{r4, r5, pc}
  406286:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40628a:	d105      	bne.n	406298 <__adddf3+0x230>
  40628c:	0040      	lsls	r0, r0, #1
  40628e:	4149      	adcs	r1, r1
  406290:	bf28      	it	cs
  406292:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  406296:	bd30      	pop	{r4, r5, pc}
  406298:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40629c:	bf3c      	itt	cc
  40629e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4062a2:	bd30      	popcc	{r4, r5, pc}
  4062a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4062a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4062ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4062b0:	f04f 0000 	mov.w	r0, #0
  4062b4:	bd30      	pop	{r4, r5, pc}
  4062b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4062ba:	bf1a      	itte	ne
  4062bc:	4619      	movne	r1, r3
  4062be:	4610      	movne	r0, r2
  4062c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4062c4:	bf1c      	itt	ne
  4062c6:	460b      	movne	r3, r1
  4062c8:	4602      	movne	r2, r0
  4062ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4062ce:	bf06      	itte	eq
  4062d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4062d4:	ea91 0f03 	teqeq	r1, r3
  4062d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4062dc:	bd30      	pop	{r4, r5, pc}
  4062de:	bf00      	nop

004062e0 <__aeabi_ui2d>:
  4062e0:	f090 0f00 	teq	r0, #0
  4062e4:	bf04      	itt	eq
  4062e6:	2100      	moveq	r1, #0
  4062e8:	4770      	bxeq	lr
  4062ea:	b530      	push	{r4, r5, lr}
  4062ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4062f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4062f4:	f04f 0500 	mov.w	r5, #0
  4062f8:	f04f 0100 	mov.w	r1, #0
  4062fc:	e750      	b.n	4061a0 <__adddf3+0x138>
  4062fe:	bf00      	nop

00406300 <__aeabi_i2d>:
  406300:	f090 0f00 	teq	r0, #0
  406304:	bf04      	itt	eq
  406306:	2100      	moveq	r1, #0
  406308:	4770      	bxeq	lr
  40630a:	b530      	push	{r4, r5, lr}
  40630c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406310:	f104 0432 	add.w	r4, r4, #50	; 0x32
  406314:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  406318:	bf48      	it	mi
  40631a:	4240      	negmi	r0, r0
  40631c:	f04f 0100 	mov.w	r1, #0
  406320:	e73e      	b.n	4061a0 <__adddf3+0x138>
  406322:	bf00      	nop

00406324 <__aeabi_f2d>:
  406324:	0042      	lsls	r2, r0, #1
  406326:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40632a:	ea4f 0131 	mov.w	r1, r1, rrx
  40632e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  406332:	bf1f      	itttt	ne
  406334:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  406338:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40633c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  406340:	4770      	bxne	lr
  406342:	f092 0f00 	teq	r2, #0
  406346:	bf14      	ite	ne
  406348:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40634c:	4770      	bxeq	lr
  40634e:	b530      	push	{r4, r5, lr}
  406350:	f44f 7460 	mov.w	r4, #896	; 0x380
  406354:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406358:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40635c:	e720      	b.n	4061a0 <__adddf3+0x138>
  40635e:	bf00      	nop

00406360 <__aeabi_ul2d>:
  406360:	ea50 0201 	orrs.w	r2, r0, r1
  406364:	bf08      	it	eq
  406366:	4770      	bxeq	lr
  406368:	b530      	push	{r4, r5, lr}
  40636a:	f04f 0500 	mov.w	r5, #0
  40636e:	e00a      	b.n	406386 <__aeabi_l2d+0x16>

00406370 <__aeabi_l2d>:
  406370:	ea50 0201 	orrs.w	r2, r0, r1
  406374:	bf08      	it	eq
  406376:	4770      	bxeq	lr
  406378:	b530      	push	{r4, r5, lr}
  40637a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40637e:	d502      	bpl.n	406386 <__aeabi_l2d+0x16>
  406380:	4240      	negs	r0, r0
  406382:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406386:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40638a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40638e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  406392:	f43f aedc 	beq.w	40614e <__adddf3+0xe6>
  406396:	f04f 0203 	mov.w	r2, #3
  40639a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40639e:	bf18      	it	ne
  4063a0:	3203      	addne	r2, #3
  4063a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4063a6:	bf18      	it	ne
  4063a8:	3203      	addne	r2, #3
  4063aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4063ae:	f1c2 0320 	rsb	r3, r2, #32
  4063b2:	fa00 fc03 	lsl.w	ip, r0, r3
  4063b6:	fa20 f002 	lsr.w	r0, r0, r2
  4063ba:	fa01 fe03 	lsl.w	lr, r1, r3
  4063be:	ea40 000e 	orr.w	r0, r0, lr
  4063c2:	fa21 f102 	lsr.w	r1, r1, r2
  4063c6:	4414      	add	r4, r2
  4063c8:	e6c1      	b.n	40614e <__adddf3+0xe6>
  4063ca:	bf00      	nop

004063cc <__aeabi_dmul>:
  4063cc:	b570      	push	{r4, r5, r6, lr}
  4063ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4063d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4063d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4063da:	bf1d      	ittte	ne
  4063dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4063e0:	ea94 0f0c 	teqne	r4, ip
  4063e4:	ea95 0f0c 	teqne	r5, ip
  4063e8:	f000 f8de 	bleq	4065a8 <__aeabi_dmul+0x1dc>
  4063ec:	442c      	add	r4, r5
  4063ee:	ea81 0603 	eor.w	r6, r1, r3
  4063f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4063f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4063fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4063fe:	bf18      	it	ne
  406400:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  406404:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406408:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40640c:	d038      	beq.n	406480 <__aeabi_dmul+0xb4>
  40640e:	fba0 ce02 	umull	ip, lr, r0, r2
  406412:	f04f 0500 	mov.w	r5, #0
  406416:	fbe1 e502 	umlal	lr, r5, r1, r2
  40641a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40641e:	fbe0 e503 	umlal	lr, r5, r0, r3
  406422:	f04f 0600 	mov.w	r6, #0
  406426:	fbe1 5603 	umlal	r5, r6, r1, r3
  40642a:	f09c 0f00 	teq	ip, #0
  40642e:	bf18      	it	ne
  406430:	f04e 0e01 	orrne.w	lr, lr, #1
  406434:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  406438:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40643c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  406440:	d204      	bcs.n	40644c <__aeabi_dmul+0x80>
  406442:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  406446:	416d      	adcs	r5, r5
  406448:	eb46 0606 	adc.w	r6, r6, r6
  40644c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  406450:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  406454:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  406458:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40645c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  406460:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  406464:	bf88      	it	hi
  406466:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40646a:	d81e      	bhi.n	4064aa <__aeabi_dmul+0xde>
  40646c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  406470:	bf08      	it	eq
  406472:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  406476:	f150 0000 	adcs.w	r0, r0, #0
  40647a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40647e:	bd70      	pop	{r4, r5, r6, pc}
  406480:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  406484:	ea46 0101 	orr.w	r1, r6, r1
  406488:	ea40 0002 	orr.w	r0, r0, r2
  40648c:	ea81 0103 	eor.w	r1, r1, r3
  406490:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  406494:	bfc2      	ittt	gt
  406496:	ebd4 050c 	rsbsgt	r5, r4, ip
  40649a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40649e:	bd70      	popgt	{r4, r5, r6, pc}
  4064a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4064a4:	f04f 0e00 	mov.w	lr, #0
  4064a8:	3c01      	subs	r4, #1
  4064aa:	f300 80ab 	bgt.w	406604 <__aeabi_dmul+0x238>
  4064ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4064b2:	bfde      	ittt	le
  4064b4:	2000      	movle	r0, #0
  4064b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4064ba:	bd70      	pople	{r4, r5, r6, pc}
  4064bc:	f1c4 0400 	rsb	r4, r4, #0
  4064c0:	3c20      	subs	r4, #32
  4064c2:	da35      	bge.n	406530 <__aeabi_dmul+0x164>
  4064c4:	340c      	adds	r4, #12
  4064c6:	dc1b      	bgt.n	406500 <__aeabi_dmul+0x134>
  4064c8:	f104 0414 	add.w	r4, r4, #20
  4064cc:	f1c4 0520 	rsb	r5, r4, #32
  4064d0:	fa00 f305 	lsl.w	r3, r0, r5
  4064d4:	fa20 f004 	lsr.w	r0, r0, r4
  4064d8:	fa01 f205 	lsl.w	r2, r1, r5
  4064dc:	ea40 0002 	orr.w	r0, r0, r2
  4064e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4064e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4064e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4064ec:	fa21 f604 	lsr.w	r6, r1, r4
  4064f0:	eb42 0106 	adc.w	r1, r2, r6
  4064f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4064f8:	bf08      	it	eq
  4064fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4064fe:	bd70      	pop	{r4, r5, r6, pc}
  406500:	f1c4 040c 	rsb	r4, r4, #12
  406504:	f1c4 0520 	rsb	r5, r4, #32
  406508:	fa00 f304 	lsl.w	r3, r0, r4
  40650c:	fa20 f005 	lsr.w	r0, r0, r5
  406510:	fa01 f204 	lsl.w	r2, r1, r4
  406514:	ea40 0002 	orr.w	r0, r0, r2
  406518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40651c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  406520:	f141 0100 	adc.w	r1, r1, #0
  406524:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406528:	bf08      	it	eq
  40652a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40652e:	bd70      	pop	{r4, r5, r6, pc}
  406530:	f1c4 0520 	rsb	r5, r4, #32
  406534:	fa00 f205 	lsl.w	r2, r0, r5
  406538:	ea4e 0e02 	orr.w	lr, lr, r2
  40653c:	fa20 f304 	lsr.w	r3, r0, r4
  406540:	fa01 f205 	lsl.w	r2, r1, r5
  406544:	ea43 0302 	orr.w	r3, r3, r2
  406548:	fa21 f004 	lsr.w	r0, r1, r4
  40654c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406550:	fa21 f204 	lsr.w	r2, r1, r4
  406554:	ea20 0002 	bic.w	r0, r0, r2
  406558:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40655c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406560:	bf08      	it	eq
  406562:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  406566:	bd70      	pop	{r4, r5, r6, pc}
  406568:	f094 0f00 	teq	r4, #0
  40656c:	d10f      	bne.n	40658e <__aeabi_dmul+0x1c2>
  40656e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  406572:	0040      	lsls	r0, r0, #1
  406574:	eb41 0101 	adc.w	r1, r1, r1
  406578:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40657c:	bf08      	it	eq
  40657e:	3c01      	subeq	r4, #1
  406580:	d0f7      	beq.n	406572 <__aeabi_dmul+0x1a6>
  406582:	ea41 0106 	orr.w	r1, r1, r6
  406586:	f095 0f00 	teq	r5, #0
  40658a:	bf18      	it	ne
  40658c:	4770      	bxne	lr
  40658e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  406592:	0052      	lsls	r2, r2, #1
  406594:	eb43 0303 	adc.w	r3, r3, r3
  406598:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40659c:	bf08      	it	eq
  40659e:	3d01      	subeq	r5, #1
  4065a0:	d0f7      	beq.n	406592 <__aeabi_dmul+0x1c6>
  4065a2:	ea43 0306 	orr.w	r3, r3, r6
  4065a6:	4770      	bx	lr
  4065a8:	ea94 0f0c 	teq	r4, ip
  4065ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4065b0:	bf18      	it	ne
  4065b2:	ea95 0f0c 	teqne	r5, ip
  4065b6:	d00c      	beq.n	4065d2 <__aeabi_dmul+0x206>
  4065b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4065bc:	bf18      	it	ne
  4065be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4065c2:	d1d1      	bne.n	406568 <__aeabi_dmul+0x19c>
  4065c4:	ea81 0103 	eor.w	r1, r1, r3
  4065c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4065cc:	f04f 0000 	mov.w	r0, #0
  4065d0:	bd70      	pop	{r4, r5, r6, pc}
  4065d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4065d6:	bf06      	itte	eq
  4065d8:	4610      	moveq	r0, r2
  4065da:	4619      	moveq	r1, r3
  4065dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4065e0:	d019      	beq.n	406616 <__aeabi_dmul+0x24a>
  4065e2:	ea94 0f0c 	teq	r4, ip
  4065e6:	d102      	bne.n	4065ee <__aeabi_dmul+0x222>
  4065e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4065ec:	d113      	bne.n	406616 <__aeabi_dmul+0x24a>
  4065ee:	ea95 0f0c 	teq	r5, ip
  4065f2:	d105      	bne.n	406600 <__aeabi_dmul+0x234>
  4065f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4065f8:	bf1c      	itt	ne
  4065fa:	4610      	movne	r0, r2
  4065fc:	4619      	movne	r1, r3
  4065fe:	d10a      	bne.n	406616 <__aeabi_dmul+0x24a>
  406600:	ea81 0103 	eor.w	r1, r1, r3
  406604:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406608:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40660c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406610:	f04f 0000 	mov.w	r0, #0
  406614:	bd70      	pop	{r4, r5, r6, pc}
  406616:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40661a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40661e:	bd70      	pop	{r4, r5, r6, pc}

00406620 <__aeabi_ddiv>:
  406620:	b570      	push	{r4, r5, r6, lr}
  406622:	f04f 0cff 	mov.w	ip, #255	; 0xff
  406626:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40662a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40662e:	bf1d      	ittte	ne
  406630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  406634:	ea94 0f0c 	teqne	r4, ip
  406638:	ea95 0f0c 	teqne	r5, ip
  40663c:	f000 f8a7 	bleq	40678e <__aeabi_ddiv+0x16e>
  406640:	eba4 0405 	sub.w	r4, r4, r5
  406644:	ea81 0e03 	eor.w	lr, r1, r3
  406648:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40664c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  406650:	f000 8088 	beq.w	406764 <__aeabi_ddiv+0x144>
  406654:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406658:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40665c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  406660:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  406664:	ea4f 2202 	mov.w	r2, r2, lsl #8
  406668:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40666c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  406670:	ea4f 2600 	mov.w	r6, r0, lsl #8
  406674:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  406678:	429d      	cmp	r5, r3
  40667a:	bf08      	it	eq
  40667c:	4296      	cmpeq	r6, r2
  40667e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  406682:	f504 7440 	add.w	r4, r4, #768	; 0x300
  406686:	d202      	bcs.n	40668e <__aeabi_ddiv+0x6e>
  406688:	085b      	lsrs	r3, r3, #1
  40668a:	ea4f 0232 	mov.w	r2, r2, rrx
  40668e:	1ab6      	subs	r6, r6, r2
  406690:	eb65 0503 	sbc.w	r5, r5, r3
  406694:	085b      	lsrs	r3, r3, #1
  406696:	ea4f 0232 	mov.w	r2, r2, rrx
  40669a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40669e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4066a2:	ebb6 0e02 	subs.w	lr, r6, r2
  4066a6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4066aa:	bf22      	ittt	cs
  4066ac:	1ab6      	subcs	r6, r6, r2
  4066ae:	4675      	movcs	r5, lr
  4066b0:	ea40 000c 	orrcs.w	r0, r0, ip
  4066b4:	085b      	lsrs	r3, r3, #1
  4066b6:	ea4f 0232 	mov.w	r2, r2, rrx
  4066ba:	ebb6 0e02 	subs.w	lr, r6, r2
  4066be:	eb75 0e03 	sbcs.w	lr, r5, r3
  4066c2:	bf22      	ittt	cs
  4066c4:	1ab6      	subcs	r6, r6, r2
  4066c6:	4675      	movcs	r5, lr
  4066c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4066cc:	085b      	lsrs	r3, r3, #1
  4066ce:	ea4f 0232 	mov.w	r2, r2, rrx
  4066d2:	ebb6 0e02 	subs.w	lr, r6, r2
  4066d6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4066da:	bf22      	ittt	cs
  4066dc:	1ab6      	subcs	r6, r6, r2
  4066de:	4675      	movcs	r5, lr
  4066e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4066e4:	085b      	lsrs	r3, r3, #1
  4066e6:	ea4f 0232 	mov.w	r2, r2, rrx
  4066ea:	ebb6 0e02 	subs.w	lr, r6, r2
  4066ee:	eb75 0e03 	sbcs.w	lr, r5, r3
  4066f2:	bf22      	ittt	cs
  4066f4:	1ab6      	subcs	r6, r6, r2
  4066f6:	4675      	movcs	r5, lr
  4066f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4066fc:	ea55 0e06 	orrs.w	lr, r5, r6
  406700:	d018      	beq.n	406734 <__aeabi_ddiv+0x114>
  406702:	ea4f 1505 	mov.w	r5, r5, lsl #4
  406706:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40670a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40670e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  406712:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  406716:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40671a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40671e:	d1c0      	bne.n	4066a2 <__aeabi_ddiv+0x82>
  406720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406724:	d10b      	bne.n	40673e <__aeabi_ddiv+0x11e>
  406726:	ea41 0100 	orr.w	r1, r1, r0
  40672a:	f04f 0000 	mov.w	r0, #0
  40672e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  406732:	e7b6      	b.n	4066a2 <__aeabi_ddiv+0x82>
  406734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406738:	bf04      	itt	eq
  40673a:	4301      	orreq	r1, r0
  40673c:	2000      	moveq	r0, #0
  40673e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  406742:	bf88      	it	hi
  406744:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  406748:	f63f aeaf 	bhi.w	4064aa <__aeabi_dmul+0xde>
  40674c:	ebb5 0c03 	subs.w	ip, r5, r3
  406750:	bf04      	itt	eq
  406752:	ebb6 0c02 	subseq.w	ip, r6, r2
  406756:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40675a:	f150 0000 	adcs.w	r0, r0, #0
  40675e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  406762:	bd70      	pop	{r4, r5, r6, pc}
  406764:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  406768:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40676c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  406770:	bfc2      	ittt	gt
  406772:	ebd4 050c 	rsbsgt	r5, r4, ip
  406776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40677a:	bd70      	popgt	{r4, r5, r6, pc}
  40677c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406780:	f04f 0e00 	mov.w	lr, #0
  406784:	3c01      	subs	r4, #1
  406786:	e690      	b.n	4064aa <__aeabi_dmul+0xde>
  406788:	ea45 0e06 	orr.w	lr, r5, r6
  40678c:	e68d      	b.n	4064aa <__aeabi_dmul+0xde>
  40678e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  406792:	ea94 0f0c 	teq	r4, ip
  406796:	bf08      	it	eq
  406798:	ea95 0f0c 	teqeq	r5, ip
  40679c:	f43f af3b 	beq.w	406616 <__aeabi_dmul+0x24a>
  4067a0:	ea94 0f0c 	teq	r4, ip
  4067a4:	d10a      	bne.n	4067bc <__aeabi_ddiv+0x19c>
  4067a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4067aa:	f47f af34 	bne.w	406616 <__aeabi_dmul+0x24a>
  4067ae:	ea95 0f0c 	teq	r5, ip
  4067b2:	f47f af25 	bne.w	406600 <__aeabi_dmul+0x234>
  4067b6:	4610      	mov	r0, r2
  4067b8:	4619      	mov	r1, r3
  4067ba:	e72c      	b.n	406616 <__aeabi_dmul+0x24a>
  4067bc:	ea95 0f0c 	teq	r5, ip
  4067c0:	d106      	bne.n	4067d0 <__aeabi_ddiv+0x1b0>
  4067c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4067c6:	f43f aefd 	beq.w	4065c4 <__aeabi_dmul+0x1f8>
  4067ca:	4610      	mov	r0, r2
  4067cc:	4619      	mov	r1, r3
  4067ce:	e722      	b.n	406616 <__aeabi_dmul+0x24a>
  4067d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4067d4:	bf18      	it	ne
  4067d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4067da:	f47f aec5 	bne.w	406568 <__aeabi_dmul+0x19c>
  4067de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4067e2:	f47f af0d 	bne.w	406600 <__aeabi_dmul+0x234>
  4067e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4067ea:	f47f aeeb 	bne.w	4065c4 <__aeabi_dmul+0x1f8>
  4067ee:	e712      	b.n	406616 <__aeabi_dmul+0x24a>

004067f0 <__gedf2>:
  4067f0:	f04f 3cff 	mov.w	ip, #4294967295
  4067f4:	e006      	b.n	406804 <__cmpdf2+0x4>
  4067f6:	bf00      	nop

004067f8 <__ledf2>:
  4067f8:	f04f 0c01 	mov.w	ip, #1
  4067fc:	e002      	b.n	406804 <__cmpdf2+0x4>
  4067fe:	bf00      	nop

00406800 <__cmpdf2>:
  406800:	f04f 0c01 	mov.w	ip, #1
  406804:	f84d cd04 	str.w	ip, [sp, #-4]!
  406808:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40680c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406810:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406814:	bf18      	it	ne
  406816:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40681a:	d01b      	beq.n	406854 <__cmpdf2+0x54>
  40681c:	b001      	add	sp, #4
  40681e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  406822:	bf0c      	ite	eq
  406824:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  406828:	ea91 0f03 	teqne	r1, r3
  40682c:	bf02      	ittt	eq
  40682e:	ea90 0f02 	teqeq	r0, r2
  406832:	2000      	moveq	r0, #0
  406834:	4770      	bxeq	lr
  406836:	f110 0f00 	cmn.w	r0, #0
  40683a:	ea91 0f03 	teq	r1, r3
  40683e:	bf58      	it	pl
  406840:	4299      	cmppl	r1, r3
  406842:	bf08      	it	eq
  406844:	4290      	cmpeq	r0, r2
  406846:	bf2c      	ite	cs
  406848:	17d8      	asrcs	r0, r3, #31
  40684a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40684e:	f040 0001 	orr.w	r0, r0, #1
  406852:	4770      	bx	lr
  406854:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406858:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40685c:	d102      	bne.n	406864 <__cmpdf2+0x64>
  40685e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  406862:	d107      	bne.n	406874 <__cmpdf2+0x74>
  406864:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406868:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40686c:	d1d6      	bne.n	40681c <__cmpdf2+0x1c>
  40686e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  406872:	d0d3      	beq.n	40681c <__cmpdf2+0x1c>
  406874:	f85d 0b04 	ldr.w	r0, [sp], #4
  406878:	4770      	bx	lr
  40687a:	bf00      	nop

0040687c <__aeabi_cdrcmple>:
  40687c:	4684      	mov	ip, r0
  40687e:	4610      	mov	r0, r2
  406880:	4662      	mov	r2, ip
  406882:	468c      	mov	ip, r1
  406884:	4619      	mov	r1, r3
  406886:	4663      	mov	r3, ip
  406888:	e000      	b.n	40688c <__aeabi_cdcmpeq>
  40688a:	bf00      	nop

0040688c <__aeabi_cdcmpeq>:
  40688c:	b501      	push	{r0, lr}
  40688e:	f7ff ffb7 	bl	406800 <__cmpdf2>
  406892:	2800      	cmp	r0, #0
  406894:	bf48      	it	mi
  406896:	f110 0f00 	cmnmi.w	r0, #0
  40689a:	bd01      	pop	{r0, pc}

0040689c <__aeabi_dcmpeq>:
  40689c:	f84d ed08 	str.w	lr, [sp, #-8]!
  4068a0:	f7ff fff4 	bl	40688c <__aeabi_cdcmpeq>
  4068a4:	bf0c      	ite	eq
  4068a6:	2001      	moveq	r0, #1
  4068a8:	2000      	movne	r0, #0
  4068aa:	f85d fb08 	ldr.w	pc, [sp], #8
  4068ae:	bf00      	nop

004068b0 <__aeabi_dcmplt>:
  4068b0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4068b4:	f7ff ffea 	bl	40688c <__aeabi_cdcmpeq>
  4068b8:	bf34      	ite	cc
  4068ba:	2001      	movcc	r0, #1
  4068bc:	2000      	movcs	r0, #0
  4068be:	f85d fb08 	ldr.w	pc, [sp], #8
  4068c2:	bf00      	nop

004068c4 <__aeabi_dcmple>:
  4068c4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4068c8:	f7ff ffe0 	bl	40688c <__aeabi_cdcmpeq>
  4068cc:	bf94      	ite	ls
  4068ce:	2001      	movls	r0, #1
  4068d0:	2000      	movhi	r0, #0
  4068d2:	f85d fb08 	ldr.w	pc, [sp], #8
  4068d6:	bf00      	nop

004068d8 <__aeabi_dcmpge>:
  4068d8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4068dc:	f7ff ffce 	bl	40687c <__aeabi_cdrcmple>
  4068e0:	bf94      	ite	ls
  4068e2:	2001      	movls	r0, #1
  4068e4:	2000      	movhi	r0, #0
  4068e6:	f85d fb08 	ldr.w	pc, [sp], #8
  4068ea:	bf00      	nop

004068ec <__aeabi_dcmpgt>:
  4068ec:	f84d ed08 	str.w	lr, [sp, #-8]!
  4068f0:	f7ff ffc4 	bl	40687c <__aeabi_cdrcmple>
  4068f4:	bf34      	ite	cc
  4068f6:	2001      	movcc	r0, #1
  4068f8:	2000      	movcs	r0, #0
  4068fa:	f85d fb08 	ldr.w	pc, [sp], #8
  4068fe:	bf00      	nop

00406900 <__aeabi_d2iz>:
  406900:	ea4f 0241 	mov.w	r2, r1, lsl #1
  406904:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  406908:	d215      	bcs.n	406936 <__aeabi_d2iz+0x36>
  40690a:	d511      	bpl.n	406930 <__aeabi_d2iz+0x30>
  40690c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  406910:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  406914:	d912      	bls.n	40693c <__aeabi_d2iz+0x3c>
  406916:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40691a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40691e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  406922:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  406926:	fa23 f002 	lsr.w	r0, r3, r2
  40692a:	bf18      	it	ne
  40692c:	4240      	negne	r0, r0
  40692e:	4770      	bx	lr
  406930:	f04f 0000 	mov.w	r0, #0
  406934:	4770      	bx	lr
  406936:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40693a:	d105      	bne.n	406948 <__aeabi_d2iz+0x48>
  40693c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  406940:	bf08      	it	eq
  406942:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  406946:	4770      	bx	lr
  406948:	f04f 0000 	mov.w	r0, #0
  40694c:	4770      	bx	lr
  40694e:	bf00      	nop

00406950 <__aeabi_d2uiz>:
  406950:	004a      	lsls	r2, r1, #1
  406952:	d211      	bcs.n	406978 <__aeabi_d2uiz+0x28>
  406954:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  406958:	d211      	bcs.n	40697e <__aeabi_d2uiz+0x2e>
  40695a:	d50d      	bpl.n	406978 <__aeabi_d2uiz+0x28>
  40695c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  406960:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  406964:	d40e      	bmi.n	406984 <__aeabi_d2uiz+0x34>
  406966:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40696a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40696e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  406972:	fa23 f002 	lsr.w	r0, r3, r2
  406976:	4770      	bx	lr
  406978:	f04f 0000 	mov.w	r0, #0
  40697c:	4770      	bx	lr
  40697e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  406982:	d102      	bne.n	40698a <__aeabi_d2uiz+0x3a>
  406984:	f04f 30ff 	mov.w	r0, #4294967295
  406988:	4770      	bx	lr
  40698a:	f04f 0000 	mov.w	r0, #0
  40698e:	4770      	bx	lr

00406990 <__libc_init_array>:
  406990:	b570      	push	{r4, r5, r6, lr}
  406992:	4e0f      	ldr	r6, [pc, #60]	; (4069d0 <__libc_init_array+0x40>)
  406994:	4d0f      	ldr	r5, [pc, #60]	; (4069d4 <__libc_init_array+0x44>)
  406996:	1b76      	subs	r6, r6, r5
  406998:	10b6      	asrs	r6, r6, #2
  40699a:	bf18      	it	ne
  40699c:	2400      	movne	r4, #0
  40699e:	d005      	beq.n	4069ac <__libc_init_array+0x1c>
  4069a0:	3401      	adds	r4, #1
  4069a2:	f855 3b04 	ldr.w	r3, [r5], #4
  4069a6:	4798      	blx	r3
  4069a8:	42a6      	cmp	r6, r4
  4069aa:	d1f9      	bne.n	4069a0 <__libc_init_array+0x10>
  4069ac:	4e0a      	ldr	r6, [pc, #40]	; (4069d8 <__libc_init_array+0x48>)
  4069ae:	4d0b      	ldr	r5, [pc, #44]	; (4069dc <__libc_init_array+0x4c>)
  4069b0:	1b76      	subs	r6, r6, r5
  4069b2:	f003 f9dd 	bl	409d70 <_init>
  4069b6:	10b6      	asrs	r6, r6, #2
  4069b8:	bf18      	it	ne
  4069ba:	2400      	movne	r4, #0
  4069bc:	d006      	beq.n	4069cc <__libc_init_array+0x3c>
  4069be:	3401      	adds	r4, #1
  4069c0:	f855 3b04 	ldr.w	r3, [r5], #4
  4069c4:	4798      	blx	r3
  4069c6:	42a6      	cmp	r6, r4
  4069c8:	d1f9      	bne.n	4069be <__libc_init_array+0x2e>
  4069ca:	bd70      	pop	{r4, r5, r6, pc}
  4069cc:	bd70      	pop	{r4, r5, r6, pc}
  4069ce:	bf00      	nop
  4069d0:	00409d7c 	.word	0x00409d7c
  4069d4:	00409d7c 	.word	0x00409d7c
  4069d8:	00409d84 	.word	0x00409d84
  4069dc:	00409d7c 	.word	0x00409d7c

004069e0 <iprintf>:
  4069e0:	b40f      	push	{r0, r1, r2, r3}
  4069e2:	b500      	push	{lr}
  4069e4:	4907      	ldr	r1, [pc, #28]	; (406a04 <iprintf+0x24>)
  4069e6:	b083      	sub	sp, #12
  4069e8:	ab04      	add	r3, sp, #16
  4069ea:	6808      	ldr	r0, [r1, #0]
  4069ec:	f853 2b04 	ldr.w	r2, [r3], #4
  4069f0:	6881      	ldr	r1, [r0, #8]
  4069f2:	9301      	str	r3, [sp, #4]
  4069f4:	f000 fd52 	bl	40749c <_vfiprintf_r>
  4069f8:	b003      	add	sp, #12
  4069fa:	f85d eb04 	ldr.w	lr, [sp], #4
  4069fe:	b004      	add	sp, #16
  406a00:	4770      	bx	lr
  406a02:	bf00      	nop
  406a04:	20400014 	.word	0x20400014

00406a08 <malloc>:
  406a08:	4b02      	ldr	r3, [pc, #8]	; (406a14 <malloc+0xc>)
  406a0a:	4601      	mov	r1, r0
  406a0c:	6818      	ldr	r0, [r3, #0]
  406a0e:	f000 b803 	b.w	406a18 <_malloc_r>
  406a12:	bf00      	nop
  406a14:	20400014 	.word	0x20400014

00406a18 <_malloc_r>:
  406a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406a1c:	f101 060b 	add.w	r6, r1, #11
  406a20:	2e16      	cmp	r6, #22
  406a22:	b083      	sub	sp, #12
  406a24:	4605      	mov	r5, r0
  406a26:	f240 809e 	bls.w	406b66 <_malloc_r+0x14e>
  406a2a:	f036 0607 	bics.w	r6, r6, #7
  406a2e:	f100 80bd 	bmi.w	406bac <_malloc_r+0x194>
  406a32:	42b1      	cmp	r1, r6
  406a34:	f200 80ba 	bhi.w	406bac <_malloc_r+0x194>
  406a38:	f000 fb86 	bl	407148 <__malloc_lock>
  406a3c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  406a40:	f0c0 8293 	bcc.w	406f6a <_malloc_r+0x552>
  406a44:	0a73      	lsrs	r3, r6, #9
  406a46:	f000 80b8 	beq.w	406bba <_malloc_r+0x1a2>
  406a4a:	2b04      	cmp	r3, #4
  406a4c:	f200 8179 	bhi.w	406d42 <_malloc_r+0x32a>
  406a50:	09b3      	lsrs	r3, r6, #6
  406a52:	f103 0039 	add.w	r0, r3, #57	; 0x39
  406a56:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  406a5a:	00c3      	lsls	r3, r0, #3
  406a5c:	4fbf      	ldr	r7, [pc, #764]	; (406d5c <_malloc_r+0x344>)
  406a5e:	443b      	add	r3, r7
  406a60:	f1a3 0108 	sub.w	r1, r3, #8
  406a64:	685c      	ldr	r4, [r3, #4]
  406a66:	42a1      	cmp	r1, r4
  406a68:	d106      	bne.n	406a78 <_malloc_r+0x60>
  406a6a:	e00c      	b.n	406a86 <_malloc_r+0x6e>
  406a6c:	2a00      	cmp	r2, #0
  406a6e:	f280 80aa 	bge.w	406bc6 <_malloc_r+0x1ae>
  406a72:	68e4      	ldr	r4, [r4, #12]
  406a74:	42a1      	cmp	r1, r4
  406a76:	d006      	beq.n	406a86 <_malloc_r+0x6e>
  406a78:	6863      	ldr	r3, [r4, #4]
  406a7a:	f023 0303 	bic.w	r3, r3, #3
  406a7e:	1b9a      	subs	r2, r3, r6
  406a80:	2a0f      	cmp	r2, #15
  406a82:	ddf3      	ble.n	406a6c <_malloc_r+0x54>
  406a84:	4670      	mov	r0, lr
  406a86:	693c      	ldr	r4, [r7, #16]
  406a88:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 406d70 <_malloc_r+0x358>
  406a8c:	4574      	cmp	r4, lr
  406a8e:	f000 81ab 	beq.w	406de8 <_malloc_r+0x3d0>
  406a92:	6863      	ldr	r3, [r4, #4]
  406a94:	f023 0303 	bic.w	r3, r3, #3
  406a98:	1b9a      	subs	r2, r3, r6
  406a9a:	2a0f      	cmp	r2, #15
  406a9c:	f300 8190 	bgt.w	406dc0 <_malloc_r+0x3a8>
  406aa0:	2a00      	cmp	r2, #0
  406aa2:	f8c7 e014 	str.w	lr, [r7, #20]
  406aa6:	f8c7 e010 	str.w	lr, [r7, #16]
  406aaa:	f280 809d 	bge.w	406be8 <_malloc_r+0x1d0>
  406aae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406ab2:	f080 8161 	bcs.w	406d78 <_malloc_r+0x360>
  406ab6:	08db      	lsrs	r3, r3, #3
  406ab8:	f103 0c01 	add.w	ip, r3, #1
  406abc:	1099      	asrs	r1, r3, #2
  406abe:	687a      	ldr	r2, [r7, #4]
  406ac0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  406ac4:	f8c4 8008 	str.w	r8, [r4, #8]
  406ac8:	2301      	movs	r3, #1
  406aca:	408b      	lsls	r3, r1
  406acc:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  406ad0:	4313      	orrs	r3, r2
  406ad2:	3908      	subs	r1, #8
  406ad4:	60e1      	str	r1, [r4, #12]
  406ad6:	607b      	str	r3, [r7, #4]
  406ad8:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  406adc:	f8c8 400c 	str.w	r4, [r8, #12]
  406ae0:	1082      	asrs	r2, r0, #2
  406ae2:	2401      	movs	r4, #1
  406ae4:	4094      	lsls	r4, r2
  406ae6:	429c      	cmp	r4, r3
  406ae8:	f200 808b 	bhi.w	406c02 <_malloc_r+0x1ea>
  406aec:	421c      	tst	r4, r3
  406aee:	d106      	bne.n	406afe <_malloc_r+0xe6>
  406af0:	f020 0003 	bic.w	r0, r0, #3
  406af4:	0064      	lsls	r4, r4, #1
  406af6:	421c      	tst	r4, r3
  406af8:	f100 0004 	add.w	r0, r0, #4
  406afc:	d0fa      	beq.n	406af4 <_malloc_r+0xdc>
  406afe:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  406b02:	46cc      	mov	ip, r9
  406b04:	4680      	mov	r8, r0
  406b06:	f8dc 300c 	ldr.w	r3, [ip, #12]
  406b0a:	459c      	cmp	ip, r3
  406b0c:	d107      	bne.n	406b1e <_malloc_r+0x106>
  406b0e:	e16d      	b.n	406dec <_malloc_r+0x3d4>
  406b10:	2a00      	cmp	r2, #0
  406b12:	f280 817b 	bge.w	406e0c <_malloc_r+0x3f4>
  406b16:	68db      	ldr	r3, [r3, #12]
  406b18:	459c      	cmp	ip, r3
  406b1a:	f000 8167 	beq.w	406dec <_malloc_r+0x3d4>
  406b1e:	6859      	ldr	r1, [r3, #4]
  406b20:	f021 0103 	bic.w	r1, r1, #3
  406b24:	1b8a      	subs	r2, r1, r6
  406b26:	2a0f      	cmp	r2, #15
  406b28:	ddf2      	ble.n	406b10 <_malloc_r+0xf8>
  406b2a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  406b2e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  406b32:	9300      	str	r3, [sp, #0]
  406b34:	199c      	adds	r4, r3, r6
  406b36:	4628      	mov	r0, r5
  406b38:	f046 0601 	orr.w	r6, r6, #1
  406b3c:	f042 0501 	orr.w	r5, r2, #1
  406b40:	605e      	str	r6, [r3, #4]
  406b42:	f8c8 c00c 	str.w	ip, [r8, #12]
  406b46:	f8cc 8008 	str.w	r8, [ip, #8]
  406b4a:	617c      	str	r4, [r7, #20]
  406b4c:	613c      	str	r4, [r7, #16]
  406b4e:	f8c4 e00c 	str.w	lr, [r4, #12]
  406b52:	f8c4 e008 	str.w	lr, [r4, #8]
  406b56:	6065      	str	r5, [r4, #4]
  406b58:	505a      	str	r2, [r3, r1]
  406b5a:	f000 fafb 	bl	407154 <__malloc_unlock>
  406b5e:	9b00      	ldr	r3, [sp, #0]
  406b60:	f103 0408 	add.w	r4, r3, #8
  406b64:	e01e      	b.n	406ba4 <_malloc_r+0x18c>
  406b66:	2910      	cmp	r1, #16
  406b68:	d820      	bhi.n	406bac <_malloc_r+0x194>
  406b6a:	f000 faed 	bl	407148 <__malloc_lock>
  406b6e:	2610      	movs	r6, #16
  406b70:	2318      	movs	r3, #24
  406b72:	2002      	movs	r0, #2
  406b74:	4f79      	ldr	r7, [pc, #484]	; (406d5c <_malloc_r+0x344>)
  406b76:	443b      	add	r3, r7
  406b78:	f1a3 0208 	sub.w	r2, r3, #8
  406b7c:	685c      	ldr	r4, [r3, #4]
  406b7e:	4294      	cmp	r4, r2
  406b80:	f000 813d 	beq.w	406dfe <_malloc_r+0x3e6>
  406b84:	6863      	ldr	r3, [r4, #4]
  406b86:	68e1      	ldr	r1, [r4, #12]
  406b88:	68a6      	ldr	r6, [r4, #8]
  406b8a:	f023 0303 	bic.w	r3, r3, #3
  406b8e:	4423      	add	r3, r4
  406b90:	4628      	mov	r0, r5
  406b92:	685a      	ldr	r2, [r3, #4]
  406b94:	60f1      	str	r1, [r6, #12]
  406b96:	f042 0201 	orr.w	r2, r2, #1
  406b9a:	608e      	str	r6, [r1, #8]
  406b9c:	605a      	str	r2, [r3, #4]
  406b9e:	f000 fad9 	bl	407154 <__malloc_unlock>
  406ba2:	3408      	adds	r4, #8
  406ba4:	4620      	mov	r0, r4
  406ba6:	b003      	add	sp, #12
  406ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406bac:	2400      	movs	r4, #0
  406bae:	230c      	movs	r3, #12
  406bb0:	4620      	mov	r0, r4
  406bb2:	602b      	str	r3, [r5, #0]
  406bb4:	b003      	add	sp, #12
  406bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406bba:	2040      	movs	r0, #64	; 0x40
  406bbc:	f44f 7300 	mov.w	r3, #512	; 0x200
  406bc0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  406bc4:	e74a      	b.n	406a5c <_malloc_r+0x44>
  406bc6:	4423      	add	r3, r4
  406bc8:	68e1      	ldr	r1, [r4, #12]
  406bca:	685a      	ldr	r2, [r3, #4]
  406bcc:	68a6      	ldr	r6, [r4, #8]
  406bce:	f042 0201 	orr.w	r2, r2, #1
  406bd2:	60f1      	str	r1, [r6, #12]
  406bd4:	4628      	mov	r0, r5
  406bd6:	608e      	str	r6, [r1, #8]
  406bd8:	605a      	str	r2, [r3, #4]
  406bda:	f000 fabb 	bl	407154 <__malloc_unlock>
  406bde:	3408      	adds	r4, #8
  406be0:	4620      	mov	r0, r4
  406be2:	b003      	add	sp, #12
  406be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406be8:	4423      	add	r3, r4
  406bea:	4628      	mov	r0, r5
  406bec:	685a      	ldr	r2, [r3, #4]
  406bee:	f042 0201 	orr.w	r2, r2, #1
  406bf2:	605a      	str	r2, [r3, #4]
  406bf4:	f000 faae 	bl	407154 <__malloc_unlock>
  406bf8:	3408      	adds	r4, #8
  406bfa:	4620      	mov	r0, r4
  406bfc:	b003      	add	sp, #12
  406bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406c02:	68bc      	ldr	r4, [r7, #8]
  406c04:	6863      	ldr	r3, [r4, #4]
  406c06:	f023 0803 	bic.w	r8, r3, #3
  406c0a:	45b0      	cmp	r8, r6
  406c0c:	d304      	bcc.n	406c18 <_malloc_r+0x200>
  406c0e:	eba8 0306 	sub.w	r3, r8, r6
  406c12:	2b0f      	cmp	r3, #15
  406c14:	f300 8085 	bgt.w	406d22 <_malloc_r+0x30a>
  406c18:	f8df 9158 	ldr.w	r9, [pc, #344]	; 406d74 <_malloc_r+0x35c>
  406c1c:	4b50      	ldr	r3, [pc, #320]	; (406d60 <_malloc_r+0x348>)
  406c1e:	f8d9 2000 	ldr.w	r2, [r9]
  406c22:	681b      	ldr	r3, [r3, #0]
  406c24:	3201      	adds	r2, #1
  406c26:	4433      	add	r3, r6
  406c28:	eb04 0a08 	add.w	sl, r4, r8
  406c2c:	f000 8155 	beq.w	406eda <_malloc_r+0x4c2>
  406c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  406c34:	330f      	adds	r3, #15
  406c36:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  406c3a:	f02b 0b0f 	bic.w	fp, fp, #15
  406c3e:	4659      	mov	r1, fp
  406c40:	4628      	mov	r0, r5
  406c42:	f000 fa8d 	bl	407160 <_sbrk_r>
  406c46:	1c41      	adds	r1, r0, #1
  406c48:	4602      	mov	r2, r0
  406c4a:	f000 80fc 	beq.w	406e46 <_malloc_r+0x42e>
  406c4e:	4582      	cmp	sl, r0
  406c50:	f200 80f7 	bhi.w	406e42 <_malloc_r+0x42a>
  406c54:	4b43      	ldr	r3, [pc, #268]	; (406d64 <_malloc_r+0x34c>)
  406c56:	6819      	ldr	r1, [r3, #0]
  406c58:	4459      	add	r1, fp
  406c5a:	6019      	str	r1, [r3, #0]
  406c5c:	f000 814d 	beq.w	406efa <_malloc_r+0x4e2>
  406c60:	f8d9 0000 	ldr.w	r0, [r9]
  406c64:	3001      	adds	r0, #1
  406c66:	bf1b      	ittet	ne
  406c68:	eba2 0a0a 	subne.w	sl, r2, sl
  406c6c:	4451      	addne	r1, sl
  406c6e:	f8c9 2000 	streq.w	r2, [r9]
  406c72:	6019      	strne	r1, [r3, #0]
  406c74:	f012 0107 	ands.w	r1, r2, #7
  406c78:	f000 8115 	beq.w	406ea6 <_malloc_r+0x48e>
  406c7c:	f1c1 0008 	rsb	r0, r1, #8
  406c80:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  406c84:	4402      	add	r2, r0
  406c86:	3108      	adds	r1, #8
  406c88:	eb02 090b 	add.w	r9, r2, fp
  406c8c:	f3c9 090b 	ubfx	r9, r9, #0, #12
  406c90:	eba1 0909 	sub.w	r9, r1, r9
  406c94:	4649      	mov	r1, r9
  406c96:	4628      	mov	r0, r5
  406c98:	9301      	str	r3, [sp, #4]
  406c9a:	9200      	str	r2, [sp, #0]
  406c9c:	f000 fa60 	bl	407160 <_sbrk_r>
  406ca0:	1c43      	adds	r3, r0, #1
  406ca2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406ca6:	f000 8143 	beq.w	406f30 <_malloc_r+0x518>
  406caa:	1a80      	subs	r0, r0, r2
  406cac:	4448      	add	r0, r9
  406cae:	f040 0001 	orr.w	r0, r0, #1
  406cb2:	6819      	ldr	r1, [r3, #0]
  406cb4:	60ba      	str	r2, [r7, #8]
  406cb6:	4449      	add	r1, r9
  406cb8:	42bc      	cmp	r4, r7
  406cba:	6050      	str	r0, [r2, #4]
  406cbc:	6019      	str	r1, [r3, #0]
  406cbe:	d017      	beq.n	406cf0 <_malloc_r+0x2d8>
  406cc0:	f1b8 0f0f 	cmp.w	r8, #15
  406cc4:	f240 80fb 	bls.w	406ebe <_malloc_r+0x4a6>
  406cc8:	6860      	ldr	r0, [r4, #4]
  406cca:	f1a8 020c 	sub.w	r2, r8, #12
  406cce:	f022 0207 	bic.w	r2, r2, #7
  406cd2:	eb04 0e02 	add.w	lr, r4, r2
  406cd6:	f000 0001 	and.w	r0, r0, #1
  406cda:	f04f 0c05 	mov.w	ip, #5
  406cde:	4310      	orrs	r0, r2
  406ce0:	2a0f      	cmp	r2, #15
  406ce2:	6060      	str	r0, [r4, #4]
  406ce4:	f8ce c004 	str.w	ip, [lr, #4]
  406ce8:	f8ce c008 	str.w	ip, [lr, #8]
  406cec:	f200 8117 	bhi.w	406f1e <_malloc_r+0x506>
  406cf0:	4b1d      	ldr	r3, [pc, #116]	; (406d68 <_malloc_r+0x350>)
  406cf2:	68bc      	ldr	r4, [r7, #8]
  406cf4:	681a      	ldr	r2, [r3, #0]
  406cf6:	4291      	cmp	r1, r2
  406cf8:	bf88      	it	hi
  406cfa:	6019      	strhi	r1, [r3, #0]
  406cfc:	4b1b      	ldr	r3, [pc, #108]	; (406d6c <_malloc_r+0x354>)
  406cfe:	681a      	ldr	r2, [r3, #0]
  406d00:	4291      	cmp	r1, r2
  406d02:	6862      	ldr	r2, [r4, #4]
  406d04:	bf88      	it	hi
  406d06:	6019      	strhi	r1, [r3, #0]
  406d08:	f022 0203 	bic.w	r2, r2, #3
  406d0c:	4296      	cmp	r6, r2
  406d0e:	eba2 0306 	sub.w	r3, r2, r6
  406d12:	d801      	bhi.n	406d18 <_malloc_r+0x300>
  406d14:	2b0f      	cmp	r3, #15
  406d16:	dc04      	bgt.n	406d22 <_malloc_r+0x30a>
  406d18:	4628      	mov	r0, r5
  406d1a:	f000 fa1b 	bl	407154 <__malloc_unlock>
  406d1e:	2400      	movs	r4, #0
  406d20:	e740      	b.n	406ba4 <_malloc_r+0x18c>
  406d22:	19a2      	adds	r2, r4, r6
  406d24:	f043 0301 	orr.w	r3, r3, #1
  406d28:	f046 0601 	orr.w	r6, r6, #1
  406d2c:	6066      	str	r6, [r4, #4]
  406d2e:	4628      	mov	r0, r5
  406d30:	60ba      	str	r2, [r7, #8]
  406d32:	6053      	str	r3, [r2, #4]
  406d34:	f000 fa0e 	bl	407154 <__malloc_unlock>
  406d38:	3408      	adds	r4, #8
  406d3a:	4620      	mov	r0, r4
  406d3c:	b003      	add	sp, #12
  406d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406d42:	2b14      	cmp	r3, #20
  406d44:	d971      	bls.n	406e2a <_malloc_r+0x412>
  406d46:	2b54      	cmp	r3, #84	; 0x54
  406d48:	f200 80a3 	bhi.w	406e92 <_malloc_r+0x47a>
  406d4c:	0b33      	lsrs	r3, r6, #12
  406d4e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  406d52:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  406d56:	00c3      	lsls	r3, r0, #3
  406d58:	e680      	b.n	406a5c <_malloc_r+0x44>
  406d5a:	bf00      	nop
  406d5c:	20400440 	.word	0x20400440
  406d60:	2040c96c 	.word	0x2040c96c
  406d64:	2040c93c 	.word	0x2040c93c
  406d68:	2040c964 	.word	0x2040c964
  406d6c:	2040c968 	.word	0x2040c968
  406d70:	20400448 	.word	0x20400448
  406d74:	20400848 	.word	0x20400848
  406d78:	0a5a      	lsrs	r2, r3, #9
  406d7a:	2a04      	cmp	r2, #4
  406d7c:	d95b      	bls.n	406e36 <_malloc_r+0x41e>
  406d7e:	2a14      	cmp	r2, #20
  406d80:	f200 80ae 	bhi.w	406ee0 <_malloc_r+0x4c8>
  406d84:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  406d88:	00c9      	lsls	r1, r1, #3
  406d8a:	325b      	adds	r2, #91	; 0x5b
  406d8c:	eb07 0c01 	add.w	ip, r7, r1
  406d90:	5879      	ldr	r1, [r7, r1]
  406d92:	f1ac 0c08 	sub.w	ip, ip, #8
  406d96:	458c      	cmp	ip, r1
  406d98:	f000 8088 	beq.w	406eac <_malloc_r+0x494>
  406d9c:	684a      	ldr	r2, [r1, #4]
  406d9e:	f022 0203 	bic.w	r2, r2, #3
  406da2:	4293      	cmp	r3, r2
  406da4:	d273      	bcs.n	406e8e <_malloc_r+0x476>
  406da6:	6889      	ldr	r1, [r1, #8]
  406da8:	458c      	cmp	ip, r1
  406daa:	d1f7      	bne.n	406d9c <_malloc_r+0x384>
  406dac:	f8dc 200c 	ldr.w	r2, [ip, #12]
  406db0:	687b      	ldr	r3, [r7, #4]
  406db2:	60e2      	str	r2, [r4, #12]
  406db4:	f8c4 c008 	str.w	ip, [r4, #8]
  406db8:	6094      	str	r4, [r2, #8]
  406dba:	f8cc 400c 	str.w	r4, [ip, #12]
  406dbe:	e68f      	b.n	406ae0 <_malloc_r+0xc8>
  406dc0:	19a1      	adds	r1, r4, r6
  406dc2:	f046 0c01 	orr.w	ip, r6, #1
  406dc6:	f042 0601 	orr.w	r6, r2, #1
  406dca:	f8c4 c004 	str.w	ip, [r4, #4]
  406dce:	4628      	mov	r0, r5
  406dd0:	6179      	str	r1, [r7, #20]
  406dd2:	6139      	str	r1, [r7, #16]
  406dd4:	f8c1 e00c 	str.w	lr, [r1, #12]
  406dd8:	f8c1 e008 	str.w	lr, [r1, #8]
  406ddc:	604e      	str	r6, [r1, #4]
  406dde:	50e2      	str	r2, [r4, r3]
  406de0:	f000 f9b8 	bl	407154 <__malloc_unlock>
  406de4:	3408      	adds	r4, #8
  406de6:	e6dd      	b.n	406ba4 <_malloc_r+0x18c>
  406de8:	687b      	ldr	r3, [r7, #4]
  406dea:	e679      	b.n	406ae0 <_malloc_r+0xc8>
  406dec:	f108 0801 	add.w	r8, r8, #1
  406df0:	f018 0f03 	tst.w	r8, #3
  406df4:	f10c 0c08 	add.w	ip, ip, #8
  406df8:	f47f ae85 	bne.w	406b06 <_malloc_r+0xee>
  406dfc:	e02d      	b.n	406e5a <_malloc_r+0x442>
  406dfe:	68dc      	ldr	r4, [r3, #12]
  406e00:	42a3      	cmp	r3, r4
  406e02:	bf08      	it	eq
  406e04:	3002      	addeq	r0, #2
  406e06:	f43f ae3e 	beq.w	406a86 <_malloc_r+0x6e>
  406e0a:	e6bb      	b.n	406b84 <_malloc_r+0x16c>
  406e0c:	4419      	add	r1, r3
  406e0e:	461c      	mov	r4, r3
  406e10:	684a      	ldr	r2, [r1, #4]
  406e12:	68db      	ldr	r3, [r3, #12]
  406e14:	f854 6f08 	ldr.w	r6, [r4, #8]!
  406e18:	f042 0201 	orr.w	r2, r2, #1
  406e1c:	604a      	str	r2, [r1, #4]
  406e1e:	4628      	mov	r0, r5
  406e20:	60f3      	str	r3, [r6, #12]
  406e22:	609e      	str	r6, [r3, #8]
  406e24:	f000 f996 	bl	407154 <__malloc_unlock>
  406e28:	e6bc      	b.n	406ba4 <_malloc_r+0x18c>
  406e2a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  406e2e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  406e32:	00c3      	lsls	r3, r0, #3
  406e34:	e612      	b.n	406a5c <_malloc_r+0x44>
  406e36:	099a      	lsrs	r2, r3, #6
  406e38:	f102 0139 	add.w	r1, r2, #57	; 0x39
  406e3c:	00c9      	lsls	r1, r1, #3
  406e3e:	3238      	adds	r2, #56	; 0x38
  406e40:	e7a4      	b.n	406d8c <_malloc_r+0x374>
  406e42:	42bc      	cmp	r4, r7
  406e44:	d054      	beq.n	406ef0 <_malloc_r+0x4d8>
  406e46:	68bc      	ldr	r4, [r7, #8]
  406e48:	6862      	ldr	r2, [r4, #4]
  406e4a:	f022 0203 	bic.w	r2, r2, #3
  406e4e:	e75d      	b.n	406d0c <_malloc_r+0x2f4>
  406e50:	f859 3908 	ldr.w	r3, [r9], #-8
  406e54:	4599      	cmp	r9, r3
  406e56:	f040 8086 	bne.w	406f66 <_malloc_r+0x54e>
  406e5a:	f010 0f03 	tst.w	r0, #3
  406e5e:	f100 30ff 	add.w	r0, r0, #4294967295
  406e62:	d1f5      	bne.n	406e50 <_malloc_r+0x438>
  406e64:	687b      	ldr	r3, [r7, #4]
  406e66:	ea23 0304 	bic.w	r3, r3, r4
  406e6a:	607b      	str	r3, [r7, #4]
  406e6c:	0064      	lsls	r4, r4, #1
  406e6e:	429c      	cmp	r4, r3
  406e70:	f63f aec7 	bhi.w	406c02 <_malloc_r+0x1ea>
  406e74:	2c00      	cmp	r4, #0
  406e76:	f43f aec4 	beq.w	406c02 <_malloc_r+0x1ea>
  406e7a:	421c      	tst	r4, r3
  406e7c:	4640      	mov	r0, r8
  406e7e:	f47f ae3e 	bne.w	406afe <_malloc_r+0xe6>
  406e82:	0064      	lsls	r4, r4, #1
  406e84:	421c      	tst	r4, r3
  406e86:	f100 0004 	add.w	r0, r0, #4
  406e8a:	d0fa      	beq.n	406e82 <_malloc_r+0x46a>
  406e8c:	e637      	b.n	406afe <_malloc_r+0xe6>
  406e8e:	468c      	mov	ip, r1
  406e90:	e78c      	b.n	406dac <_malloc_r+0x394>
  406e92:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  406e96:	d815      	bhi.n	406ec4 <_malloc_r+0x4ac>
  406e98:	0bf3      	lsrs	r3, r6, #15
  406e9a:	f103 0078 	add.w	r0, r3, #120	; 0x78
  406e9e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  406ea2:	00c3      	lsls	r3, r0, #3
  406ea4:	e5da      	b.n	406a5c <_malloc_r+0x44>
  406ea6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  406eaa:	e6ed      	b.n	406c88 <_malloc_r+0x270>
  406eac:	687b      	ldr	r3, [r7, #4]
  406eae:	1092      	asrs	r2, r2, #2
  406eb0:	2101      	movs	r1, #1
  406eb2:	fa01 f202 	lsl.w	r2, r1, r2
  406eb6:	4313      	orrs	r3, r2
  406eb8:	607b      	str	r3, [r7, #4]
  406eba:	4662      	mov	r2, ip
  406ebc:	e779      	b.n	406db2 <_malloc_r+0x39a>
  406ebe:	2301      	movs	r3, #1
  406ec0:	6053      	str	r3, [r2, #4]
  406ec2:	e729      	b.n	406d18 <_malloc_r+0x300>
  406ec4:	f240 5254 	movw	r2, #1364	; 0x554
  406ec8:	4293      	cmp	r3, r2
  406eca:	d822      	bhi.n	406f12 <_malloc_r+0x4fa>
  406ecc:	0cb3      	lsrs	r3, r6, #18
  406ece:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  406ed2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  406ed6:	00c3      	lsls	r3, r0, #3
  406ed8:	e5c0      	b.n	406a5c <_malloc_r+0x44>
  406eda:	f103 0b10 	add.w	fp, r3, #16
  406ede:	e6ae      	b.n	406c3e <_malloc_r+0x226>
  406ee0:	2a54      	cmp	r2, #84	; 0x54
  406ee2:	d829      	bhi.n	406f38 <_malloc_r+0x520>
  406ee4:	0b1a      	lsrs	r2, r3, #12
  406ee6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  406eea:	00c9      	lsls	r1, r1, #3
  406eec:	326e      	adds	r2, #110	; 0x6e
  406eee:	e74d      	b.n	406d8c <_malloc_r+0x374>
  406ef0:	4b20      	ldr	r3, [pc, #128]	; (406f74 <_malloc_r+0x55c>)
  406ef2:	6819      	ldr	r1, [r3, #0]
  406ef4:	4459      	add	r1, fp
  406ef6:	6019      	str	r1, [r3, #0]
  406ef8:	e6b2      	b.n	406c60 <_malloc_r+0x248>
  406efa:	f3ca 000b 	ubfx	r0, sl, #0, #12
  406efe:	2800      	cmp	r0, #0
  406f00:	f47f aeae 	bne.w	406c60 <_malloc_r+0x248>
  406f04:	eb08 030b 	add.w	r3, r8, fp
  406f08:	68ba      	ldr	r2, [r7, #8]
  406f0a:	f043 0301 	orr.w	r3, r3, #1
  406f0e:	6053      	str	r3, [r2, #4]
  406f10:	e6ee      	b.n	406cf0 <_malloc_r+0x2d8>
  406f12:	207f      	movs	r0, #127	; 0x7f
  406f14:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  406f18:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  406f1c:	e59e      	b.n	406a5c <_malloc_r+0x44>
  406f1e:	f104 0108 	add.w	r1, r4, #8
  406f22:	4628      	mov	r0, r5
  406f24:	9300      	str	r3, [sp, #0]
  406f26:	f001 fbd5 	bl	4086d4 <_free_r>
  406f2a:	9b00      	ldr	r3, [sp, #0]
  406f2c:	6819      	ldr	r1, [r3, #0]
  406f2e:	e6df      	b.n	406cf0 <_malloc_r+0x2d8>
  406f30:	2001      	movs	r0, #1
  406f32:	f04f 0900 	mov.w	r9, #0
  406f36:	e6bc      	b.n	406cb2 <_malloc_r+0x29a>
  406f38:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406f3c:	d805      	bhi.n	406f4a <_malloc_r+0x532>
  406f3e:	0bda      	lsrs	r2, r3, #15
  406f40:	f102 0178 	add.w	r1, r2, #120	; 0x78
  406f44:	00c9      	lsls	r1, r1, #3
  406f46:	3277      	adds	r2, #119	; 0x77
  406f48:	e720      	b.n	406d8c <_malloc_r+0x374>
  406f4a:	f240 5154 	movw	r1, #1364	; 0x554
  406f4e:	428a      	cmp	r2, r1
  406f50:	d805      	bhi.n	406f5e <_malloc_r+0x546>
  406f52:	0c9a      	lsrs	r2, r3, #18
  406f54:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  406f58:	00c9      	lsls	r1, r1, #3
  406f5a:	327c      	adds	r2, #124	; 0x7c
  406f5c:	e716      	b.n	406d8c <_malloc_r+0x374>
  406f5e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  406f62:	227e      	movs	r2, #126	; 0x7e
  406f64:	e712      	b.n	406d8c <_malloc_r+0x374>
  406f66:	687b      	ldr	r3, [r7, #4]
  406f68:	e780      	b.n	406e6c <_malloc_r+0x454>
  406f6a:	08f0      	lsrs	r0, r6, #3
  406f6c:	f106 0308 	add.w	r3, r6, #8
  406f70:	e600      	b.n	406b74 <_malloc_r+0x15c>
  406f72:	bf00      	nop
  406f74:	2040c93c 	.word	0x2040c93c

00406f78 <memcpy>:
  406f78:	4684      	mov	ip, r0
  406f7a:	ea41 0300 	orr.w	r3, r1, r0
  406f7e:	f013 0303 	ands.w	r3, r3, #3
  406f82:	d16d      	bne.n	407060 <memcpy+0xe8>
  406f84:	3a40      	subs	r2, #64	; 0x40
  406f86:	d341      	bcc.n	40700c <memcpy+0x94>
  406f88:	f851 3b04 	ldr.w	r3, [r1], #4
  406f8c:	f840 3b04 	str.w	r3, [r0], #4
  406f90:	f851 3b04 	ldr.w	r3, [r1], #4
  406f94:	f840 3b04 	str.w	r3, [r0], #4
  406f98:	f851 3b04 	ldr.w	r3, [r1], #4
  406f9c:	f840 3b04 	str.w	r3, [r0], #4
  406fa0:	f851 3b04 	ldr.w	r3, [r1], #4
  406fa4:	f840 3b04 	str.w	r3, [r0], #4
  406fa8:	f851 3b04 	ldr.w	r3, [r1], #4
  406fac:	f840 3b04 	str.w	r3, [r0], #4
  406fb0:	f851 3b04 	ldr.w	r3, [r1], #4
  406fb4:	f840 3b04 	str.w	r3, [r0], #4
  406fb8:	f851 3b04 	ldr.w	r3, [r1], #4
  406fbc:	f840 3b04 	str.w	r3, [r0], #4
  406fc0:	f851 3b04 	ldr.w	r3, [r1], #4
  406fc4:	f840 3b04 	str.w	r3, [r0], #4
  406fc8:	f851 3b04 	ldr.w	r3, [r1], #4
  406fcc:	f840 3b04 	str.w	r3, [r0], #4
  406fd0:	f851 3b04 	ldr.w	r3, [r1], #4
  406fd4:	f840 3b04 	str.w	r3, [r0], #4
  406fd8:	f851 3b04 	ldr.w	r3, [r1], #4
  406fdc:	f840 3b04 	str.w	r3, [r0], #4
  406fe0:	f851 3b04 	ldr.w	r3, [r1], #4
  406fe4:	f840 3b04 	str.w	r3, [r0], #4
  406fe8:	f851 3b04 	ldr.w	r3, [r1], #4
  406fec:	f840 3b04 	str.w	r3, [r0], #4
  406ff0:	f851 3b04 	ldr.w	r3, [r1], #4
  406ff4:	f840 3b04 	str.w	r3, [r0], #4
  406ff8:	f851 3b04 	ldr.w	r3, [r1], #4
  406ffc:	f840 3b04 	str.w	r3, [r0], #4
  407000:	f851 3b04 	ldr.w	r3, [r1], #4
  407004:	f840 3b04 	str.w	r3, [r0], #4
  407008:	3a40      	subs	r2, #64	; 0x40
  40700a:	d2bd      	bcs.n	406f88 <memcpy+0x10>
  40700c:	3230      	adds	r2, #48	; 0x30
  40700e:	d311      	bcc.n	407034 <memcpy+0xbc>
  407010:	f851 3b04 	ldr.w	r3, [r1], #4
  407014:	f840 3b04 	str.w	r3, [r0], #4
  407018:	f851 3b04 	ldr.w	r3, [r1], #4
  40701c:	f840 3b04 	str.w	r3, [r0], #4
  407020:	f851 3b04 	ldr.w	r3, [r1], #4
  407024:	f840 3b04 	str.w	r3, [r0], #4
  407028:	f851 3b04 	ldr.w	r3, [r1], #4
  40702c:	f840 3b04 	str.w	r3, [r0], #4
  407030:	3a10      	subs	r2, #16
  407032:	d2ed      	bcs.n	407010 <memcpy+0x98>
  407034:	320c      	adds	r2, #12
  407036:	d305      	bcc.n	407044 <memcpy+0xcc>
  407038:	f851 3b04 	ldr.w	r3, [r1], #4
  40703c:	f840 3b04 	str.w	r3, [r0], #4
  407040:	3a04      	subs	r2, #4
  407042:	d2f9      	bcs.n	407038 <memcpy+0xc0>
  407044:	3204      	adds	r2, #4
  407046:	d008      	beq.n	40705a <memcpy+0xe2>
  407048:	07d2      	lsls	r2, r2, #31
  40704a:	bf1c      	itt	ne
  40704c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  407050:	f800 3b01 	strbne.w	r3, [r0], #1
  407054:	d301      	bcc.n	40705a <memcpy+0xe2>
  407056:	880b      	ldrh	r3, [r1, #0]
  407058:	8003      	strh	r3, [r0, #0]
  40705a:	4660      	mov	r0, ip
  40705c:	4770      	bx	lr
  40705e:	bf00      	nop
  407060:	2a08      	cmp	r2, #8
  407062:	d313      	bcc.n	40708c <memcpy+0x114>
  407064:	078b      	lsls	r3, r1, #30
  407066:	d08d      	beq.n	406f84 <memcpy+0xc>
  407068:	f010 0303 	ands.w	r3, r0, #3
  40706c:	d08a      	beq.n	406f84 <memcpy+0xc>
  40706e:	f1c3 0304 	rsb	r3, r3, #4
  407072:	1ad2      	subs	r2, r2, r3
  407074:	07db      	lsls	r3, r3, #31
  407076:	bf1c      	itt	ne
  407078:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40707c:	f800 3b01 	strbne.w	r3, [r0], #1
  407080:	d380      	bcc.n	406f84 <memcpy+0xc>
  407082:	f831 3b02 	ldrh.w	r3, [r1], #2
  407086:	f820 3b02 	strh.w	r3, [r0], #2
  40708a:	e77b      	b.n	406f84 <memcpy+0xc>
  40708c:	3a04      	subs	r2, #4
  40708e:	d3d9      	bcc.n	407044 <memcpy+0xcc>
  407090:	3a01      	subs	r2, #1
  407092:	f811 3b01 	ldrb.w	r3, [r1], #1
  407096:	f800 3b01 	strb.w	r3, [r0], #1
  40709a:	d2f9      	bcs.n	407090 <memcpy+0x118>
  40709c:	780b      	ldrb	r3, [r1, #0]
  40709e:	7003      	strb	r3, [r0, #0]
  4070a0:	784b      	ldrb	r3, [r1, #1]
  4070a2:	7043      	strb	r3, [r0, #1]
  4070a4:	788b      	ldrb	r3, [r1, #2]
  4070a6:	7083      	strb	r3, [r0, #2]
  4070a8:	4660      	mov	r0, ip
  4070aa:	4770      	bx	lr

004070ac <memset>:
  4070ac:	b470      	push	{r4, r5, r6}
  4070ae:	0786      	lsls	r6, r0, #30
  4070b0:	d046      	beq.n	407140 <memset+0x94>
  4070b2:	1e54      	subs	r4, r2, #1
  4070b4:	2a00      	cmp	r2, #0
  4070b6:	d041      	beq.n	40713c <memset+0x90>
  4070b8:	b2ca      	uxtb	r2, r1
  4070ba:	4603      	mov	r3, r0
  4070bc:	e002      	b.n	4070c4 <memset+0x18>
  4070be:	f114 34ff 	adds.w	r4, r4, #4294967295
  4070c2:	d33b      	bcc.n	40713c <memset+0x90>
  4070c4:	f803 2b01 	strb.w	r2, [r3], #1
  4070c8:	079d      	lsls	r5, r3, #30
  4070ca:	d1f8      	bne.n	4070be <memset+0x12>
  4070cc:	2c03      	cmp	r4, #3
  4070ce:	d92e      	bls.n	40712e <memset+0x82>
  4070d0:	b2cd      	uxtb	r5, r1
  4070d2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4070d6:	2c0f      	cmp	r4, #15
  4070d8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4070dc:	d919      	bls.n	407112 <memset+0x66>
  4070de:	f103 0210 	add.w	r2, r3, #16
  4070e2:	4626      	mov	r6, r4
  4070e4:	3e10      	subs	r6, #16
  4070e6:	2e0f      	cmp	r6, #15
  4070e8:	f842 5c10 	str.w	r5, [r2, #-16]
  4070ec:	f842 5c0c 	str.w	r5, [r2, #-12]
  4070f0:	f842 5c08 	str.w	r5, [r2, #-8]
  4070f4:	f842 5c04 	str.w	r5, [r2, #-4]
  4070f8:	f102 0210 	add.w	r2, r2, #16
  4070fc:	d8f2      	bhi.n	4070e4 <memset+0x38>
  4070fe:	f1a4 0210 	sub.w	r2, r4, #16
  407102:	f022 020f 	bic.w	r2, r2, #15
  407106:	f004 040f 	and.w	r4, r4, #15
  40710a:	3210      	adds	r2, #16
  40710c:	2c03      	cmp	r4, #3
  40710e:	4413      	add	r3, r2
  407110:	d90d      	bls.n	40712e <memset+0x82>
  407112:	461e      	mov	r6, r3
  407114:	4622      	mov	r2, r4
  407116:	3a04      	subs	r2, #4
  407118:	2a03      	cmp	r2, #3
  40711a:	f846 5b04 	str.w	r5, [r6], #4
  40711e:	d8fa      	bhi.n	407116 <memset+0x6a>
  407120:	1f22      	subs	r2, r4, #4
  407122:	f022 0203 	bic.w	r2, r2, #3
  407126:	3204      	adds	r2, #4
  407128:	4413      	add	r3, r2
  40712a:	f004 0403 	and.w	r4, r4, #3
  40712e:	b12c      	cbz	r4, 40713c <memset+0x90>
  407130:	b2c9      	uxtb	r1, r1
  407132:	441c      	add	r4, r3
  407134:	f803 1b01 	strb.w	r1, [r3], #1
  407138:	429c      	cmp	r4, r3
  40713a:	d1fb      	bne.n	407134 <memset+0x88>
  40713c:	bc70      	pop	{r4, r5, r6}
  40713e:	4770      	bx	lr
  407140:	4614      	mov	r4, r2
  407142:	4603      	mov	r3, r0
  407144:	e7c2      	b.n	4070cc <memset+0x20>
  407146:	bf00      	nop

00407148 <__malloc_lock>:
  407148:	4801      	ldr	r0, [pc, #4]	; (407150 <__malloc_lock+0x8>)
  40714a:	f001 bd5d 	b.w	408c08 <__retarget_lock_acquire_recursive>
  40714e:	bf00      	nop
  407150:	2040ca70 	.word	0x2040ca70

00407154 <__malloc_unlock>:
  407154:	4801      	ldr	r0, [pc, #4]	; (40715c <__malloc_unlock+0x8>)
  407156:	f001 bd59 	b.w	408c0c <__retarget_lock_release_recursive>
  40715a:	bf00      	nop
  40715c:	2040ca70 	.word	0x2040ca70

00407160 <_sbrk_r>:
  407160:	b538      	push	{r3, r4, r5, lr}
  407162:	4c07      	ldr	r4, [pc, #28]	; (407180 <_sbrk_r+0x20>)
  407164:	2300      	movs	r3, #0
  407166:	4605      	mov	r5, r0
  407168:	4608      	mov	r0, r1
  40716a:	6023      	str	r3, [r4, #0]
  40716c:	f7fb f898 	bl	4022a0 <_sbrk>
  407170:	1c43      	adds	r3, r0, #1
  407172:	d000      	beq.n	407176 <_sbrk_r+0x16>
  407174:	bd38      	pop	{r3, r4, r5, pc}
  407176:	6823      	ldr	r3, [r4, #0]
  407178:	2b00      	cmp	r3, #0
  40717a:	d0fb      	beq.n	407174 <_sbrk_r+0x14>
  40717c:	602b      	str	r3, [r5, #0]
  40717e:	bd38      	pop	{r3, r4, r5, pc}
  407180:	2040ca84 	.word	0x2040ca84

00407184 <setbuf>:
  407184:	2900      	cmp	r1, #0
  407186:	bf0c      	ite	eq
  407188:	2202      	moveq	r2, #2
  40718a:	2200      	movne	r2, #0
  40718c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407190:	f000 b800 	b.w	407194 <setvbuf>

00407194 <setvbuf>:
  407194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  407198:	4c61      	ldr	r4, [pc, #388]	; (407320 <setvbuf+0x18c>)
  40719a:	6825      	ldr	r5, [r4, #0]
  40719c:	b083      	sub	sp, #12
  40719e:	4604      	mov	r4, r0
  4071a0:	460f      	mov	r7, r1
  4071a2:	4690      	mov	r8, r2
  4071a4:	461e      	mov	r6, r3
  4071a6:	b115      	cbz	r5, 4071ae <setvbuf+0x1a>
  4071a8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4071aa:	2b00      	cmp	r3, #0
  4071ac:	d064      	beq.n	407278 <setvbuf+0xe4>
  4071ae:	f1b8 0f02 	cmp.w	r8, #2
  4071b2:	d006      	beq.n	4071c2 <setvbuf+0x2e>
  4071b4:	f1b8 0f01 	cmp.w	r8, #1
  4071b8:	f200 809f 	bhi.w	4072fa <setvbuf+0x166>
  4071bc:	2e00      	cmp	r6, #0
  4071be:	f2c0 809c 	blt.w	4072fa <setvbuf+0x166>
  4071c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4071c4:	07d8      	lsls	r0, r3, #31
  4071c6:	d534      	bpl.n	407232 <setvbuf+0x9e>
  4071c8:	4621      	mov	r1, r4
  4071ca:	4628      	mov	r0, r5
  4071cc:	f001 f904 	bl	4083d8 <_fflush_r>
  4071d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4071d2:	b141      	cbz	r1, 4071e6 <setvbuf+0x52>
  4071d4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4071d8:	4299      	cmp	r1, r3
  4071da:	d002      	beq.n	4071e2 <setvbuf+0x4e>
  4071dc:	4628      	mov	r0, r5
  4071de:	f001 fa79 	bl	4086d4 <_free_r>
  4071e2:	2300      	movs	r3, #0
  4071e4:	6323      	str	r3, [r4, #48]	; 0x30
  4071e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4071ea:	2200      	movs	r2, #0
  4071ec:	61a2      	str	r2, [r4, #24]
  4071ee:	6062      	str	r2, [r4, #4]
  4071f0:	061a      	lsls	r2, r3, #24
  4071f2:	d43a      	bmi.n	40726a <setvbuf+0xd6>
  4071f4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4071f8:	f023 0303 	bic.w	r3, r3, #3
  4071fc:	f1b8 0f02 	cmp.w	r8, #2
  407200:	81a3      	strh	r3, [r4, #12]
  407202:	d01d      	beq.n	407240 <setvbuf+0xac>
  407204:	ab01      	add	r3, sp, #4
  407206:	466a      	mov	r2, sp
  407208:	4621      	mov	r1, r4
  40720a:	4628      	mov	r0, r5
  40720c:	f001 fd00 	bl	408c10 <__swhatbuf_r>
  407210:	89a3      	ldrh	r3, [r4, #12]
  407212:	4318      	orrs	r0, r3
  407214:	81a0      	strh	r0, [r4, #12]
  407216:	2e00      	cmp	r6, #0
  407218:	d132      	bne.n	407280 <setvbuf+0xec>
  40721a:	9e00      	ldr	r6, [sp, #0]
  40721c:	4630      	mov	r0, r6
  40721e:	f7ff fbf3 	bl	406a08 <malloc>
  407222:	4607      	mov	r7, r0
  407224:	2800      	cmp	r0, #0
  407226:	d06b      	beq.n	407300 <setvbuf+0x16c>
  407228:	89a3      	ldrh	r3, [r4, #12]
  40722a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40722e:	81a3      	strh	r3, [r4, #12]
  407230:	e028      	b.n	407284 <setvbuf+0xf0>
  407232:	89a3      	ldrh	r3, [r4, #12]
  407234:	0599      	lsls	r1, r3, #22
  407236:	d4c7      	bmi.n	4071c8 <setvbuf+0x34>
  407238:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40723a:	f001 fce5 	bl	408c08 <__retarget_lock_acquire_recursive>
  40723e:	e7c3      	b.n	4071c8 <setvbuf+0x34>
  407240:	2500      	movs	r5, #0
  407242:	6e61      	ldr	r1, [r4, #100]	; 0x64
  407244:	2600      	movs	r6, #0
  407246:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40724a:	f043 0302 	orr.w	r3, r3, #2
  40724e:	2001      	movs	r0, #1
  407250:	60a6      	str	r6, [r4, #8]
  407252:	07ce      	lsls	r6, r1, #31
  407254:	81a3      	strh	r3, [r4, #12]
  407256:	6022      	str	r2, [r4, #0]
  407258:	6122      	str	r2, [r4, #16]
  40725a:	6160      	str	r0, [r4, #20]
  40725c:	d401      	bmi.n	407262 <setvbuf+0xce>
  40725e:	0598      	lsls	r0, r3, #22
  407260:	d53e      	bpl.n	4072e0 <setvbuf+0x14c>
  407262:	4628      	mov	r0, r5
  407264:	b003      	add	sp, #12
  407266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40726a:	6921      	ldr	r1, [r4, #16]
  40726c:	4628      	mov	r0, r5
  40726e:	f001 fa31 	bl	4086d4 <_free_r>
  407272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407276:	e7bd      	b.n	4071f4 <setvbuf+0x60>
  407278:	4628      	mov	r0, r5
  40727a:	f001 f905 	bl	408488 <__sinit>
  40727e:	e796      	b.n	4071ae <setvbuf+0x1a>
  407280:	2f00      	cmp	r7, #0
  407282:	d0cb      	beq.n	40721c <setvbuf+0x88>
  407284:	6bab      	ldr	r3, [r5, #56]	; 0x38
  407286:	2b00      	cmp	r3, #0
  407288:	d033      	beq.n	4072f2 <setvbuf+0x15e>
  40728a:	9b00      	ldr	r3, [sp, #0]
  40728c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407290:	6027      	str	r7, [r4, #0]
  407292:	429e      	cmp	r6, r3
  407294:	bf1c      	itt	ne
  407296:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40729a:	81a2      	strhne	r2, [r4, #12]
  40729c:	f1b8 0f01 	cmp.w	r8, #1
  4072a0:	bf04      	itt	eq
  4072a2:	f042 0201 	orreq.w	r2, r2, #1
  4072a6:	81a2      	strheq	r2, [r4, #12]
  4072a8:	b292      	uxth	r2, r2
  4072aa:	f012 0308 	ands.w	r3, r2, #8
  4072ae:	6127      	str	r7, [r4, #16]
  4072b0:	6166      	str	r6, [r4, #20]
  4072b2:	d00e      	beq.n	4072d2 <setvbuf+0x13e>
  4072b4:	07d1      	lsls	r1, r2, #31
  4072b6:	d51a      	bpl.n	4072ee <setvbuf+0x15a>
  4072b8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4072ba:	4276      	negs	r6, r6
  4072bc:	2300      	movs	r3, #0
  4072be:	f015 0501 	ands.w	r5, r5, #1
  4072c2:	61a6      	str	r6, [r4, #24]
  4072c4:	60a3      	str	r3, [r4, #8]
  4072c6:	d009      	beq.n	4072dc <setvbuf+0x148>
  4072c8:	2500      	movs	r5, #0
  4072ca:	4628      	mov	r0, r5
  4072cc:	b003      	add	sp, #12
  4072ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4072d2:	60a3      	str	r3, [r4, #8]
  4072d4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4072d6:	f015 0501 	ands.w	r5, r5, #1
  4072da:	d1f5      	bne.n	4072c8 <setvbuf+0x134>
  4072dc:	0593      	lsls	r3, r2, #22
  4072de:	d4c0      	bmi.n	407262 <setvbuf+0xce>
  4072e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4072e2:	f001 fc93 	bl	408c0c <__retarget_lock_release_recursive>
  4072e6:	4628      	mov	r0, r5
  4072e8:	b003      	add	sp, #12
  4072ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4072ee:	60a6      	str	r6, [r4, #8]
  4072f0:	e7f0      	b.n	4072d4 <setvbuf+0x140>
  4072f2:	4628      	mov	r0, r5
  4072f4:	f001 f8c8 	bl	408488 <__sinit>
  4072f8:	e7c7      	b.n	40728a <setvbuf+0xf6>
  4072fa:	f04f 35ff 	mov.w	r5, #4294967295
  4072fe:	e7b0      	b.n	407262 <setvbuf+0xce>
  407300:	f8dd 9000 	ldr.w	r9, [sp]
  407304:	45b1      	cmp	r9, r6
  407306:	d004      	beq.n	407312 <setvbuf+0x17e>
  407308:	4648      	mov	r0, r9
  40730a:	f7ff fb7d 	bl	406a08 <malloc>
  40730e:	4607      	mov	r7, r0
  407310:	b920      	cbnz	r0, 40731c <setvbuf+0x188>
  407312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407316:	f04f 35ff 	mov.w	r5, #4294967295
  40731a:	e792      	b.n	407242 <setvbuf+0xae>
  40731c:	464e      	mov	r6, r9
  40731e:	e783      	b.n	407228 <setvbuf+0x94>
  407320:	20400014 	.word	0x20400014
	...

00407340 <strlen>:
  407340:	f890 f000 	pld	[r0]
  407344:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  407348:	f020 0107 	bic.w	r1, r0, #7
  40734c:	f06f 0c00 	mvn.w	ip, #0
  407350:	f010 0407 	ands.w	r4, r0, #7
  407354:	f891 f020 	pld	[r1, #32]
  407358:	f040 8049 	bne.w	4073ee <strlen+0xae>
  40735c:	f04f 0400 	mov.w	r4, #0
  407360:	f06f 0007 	mvn.w	r0, #7
  407364:	e9d1 2300 	ldrd	r2, r3, [r1]
  407368:	f891 f040 	pld	[r1, #64]	; 0x40
  40736c:	f100 0008 	add.w	r0, r0, #8
  407370:	fa82 f24c 	uadd8	r2, r2, ip
  407374:	faa4 f28c 	sel	r2, r4, ip
  407378:	fa83 f34c 	uadd8	r3, r3, ip
  40737c:	faa2 f38c 	sel	r3, r2, ip
  407380:	bb4b      	cbnz	r3, 4073d6 <strlen+0x96>
  407382:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  407386:	fa82 f24c 	uadd8	r2, r2, ip
  40738a:	f100 0008 	add.w	r0, r0, #8
  40738e:	faa4 f28c 	sel	r2, r4, ip
  407392:	fa83 f34c 	uadd8	r3, r3, ip
  407396:	faa2 f38c 	sel	r3, r2, ip
  40739a:	b9e3      	cbnz	r3, 4073d6 <strlen+0x96>
  40739c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4073a0:	fa82 f24c 	uadd8	r2, r2, ip
  4073a4:	f100 0008 	add.w	r0, r0, #8
  4073a8:	faa4 f28c 	sel	r2, r4, ip
  4073ac:	fa83 f34c 	uadd8	r3, r3, ip
  4073b0:	faa2 f38c 	sel	r3, r2, ip
  4073b4:	b97b      	cbnz	r3, 4073d6 <strlen+0x96>
  4073b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4073ba:	f101 0120 	add.w	r1, r1, #32
  4073be:	fa82 f24c 	uadd8	r2, r2, ip
  4073c2:	f100 0008 	add.w	r0, r0, #8
  4073c6:	faa4 f28c 	sel	r2, r4, ip
  4073ca:	fa83 f34c 	uadd8	r3, r3, ip
  4073ce:	faa2 f38c 	sel	r3, r2, ip
  4073d2:	2b00      	cmp	r3, #0
  4073d4:	d0c6      	beq.n	407364 <strlen+0x24>
  4073d6:	2a00      	cmp	r2, #0
  4073d8:	bf04      	itt	eq
  4073da:	3004      	addeq	r0, #4
  4073dc:	461a      	moveq	r2, r3
  4073de:	ba12      	rev	r2, r2
  4073e0:	fab2 f282 	clz	r2, r2
  4073e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4073e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4073ec:	4770      	bx	lr
  4073ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4073f2:	f004 0503 	and.w	r5, r4, #3
  4073f6:	f1c4 0000 	rsb	r0, r4, #0
  4073fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4073fe:	f014 0f04 	tst.w	r4, #4
  407402:	f891 f040 	pld	[r1, #64]	; 0x40
  407406:	fa0c f505 	lsl.w	r5, ip, r5
  40740a:	ea62 0205 	orn	r2, r2, r5
  40740e:	bf1c      	itt	ne
  407410:	ea63 0305 	ornne	r3, r3, r5
  407414:	4662      	movne	r2, ip
  407416:	f04f 0400 	mov.w	r4, #0
  40741a:	e7a9      	b.n	407370 <strlen+0x30>

0040741c <__sprint_r.part.0>:
  40741c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407420:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  407422:	049c      	lsls	r4, r3, #18
  407424:	4693      	mov	fp, r2
  407426:	d52f      	bpl.n	407488 <__sprint_r.part.0+0x6c>
  407428:	6893      	ldr	r3, [r2, #8]
  40742a:	6812      	ldr	r2, [r2, #0]
  40742c:	b353      	cbz	r3, 407484 <__sprint_r.part.0+0x68>
  40742e:	460e      	mov	r6, r1
  407430:	4607      	mov	r7, r0
  407432:	f102 0908 	add.w	r9, r2, #8
  407436:	e919 0420 	ldmdb	r9, {r5, sl}
  40743a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40743e:	d017      	beq.n	407470 <__sprint_r.part.0+0x54>
  407440:	3d04      	subs	r5, #4
  407442:	2400      	movs	r4, #0
  407444:	e001      	b.n	40744a <__sprint_r.part.0+0x2e>
  407446:	45a0      	cmp	r8, r4
  407448:	d010      	beq.n	40746c <__sprint_r.part.0+0x50>
  40744a:	4632      	mov	r2, r6
  40744c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  407450:	4638      	mov	r0, r7
  407452:	f001 f8bb 	bl	4085cc <_fputwc_r>
  407456:	1c43      	adds	r3, r0, #1
  407458:	f104 0401 	add.w	r4, r4, #1
  40745c:	d1f3      	bne.n	407446 <__sprint_r.part.0+0x2a>
  40745e:	2300      	movs	r3, #0
  407460:	f8cb 3008 	str.w	r3, [fp, #8]
  407464:	f8cb 3004 	str.w	r3, [fp, #4]
  407468:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40746c:	f8db 3008 	ldr.w	r3, [fp, #8]
  407470:	f02a 0a03 	bic.w	sl, sl, #3
  407474:	eba3 030a 	sub.w	r3, r3, sl
  407478:	f8cb 3008 	str.w	r3, [fp, #8]
  40747c:	f109 0908 	add.w	r9, r9, #8
  407480:	2b00      	cmp	r3, #0
  407482:	d1d8      	bne.n	407436 <__sprint_r.part.0+0x1a>
  407484:	2000      	movs	r0, #0
  407486:	e7ea      	b.n	40745e <__sprint_r.part.0+0x42>
  407488:	f001 fa0a 	bl	4088a0 <__sfvwrite_r>
  40748c:	2300      	movs	r3, #0
  40748e:	f8cb 3008 	str.w	r3, [fp, #8]
  407492:	f8cb 3004 	str.w	r3, [fp, #4]
  407496:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40749a:	bf00      	nop

0040749c <_vfiprintf_r>:
  40749c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4074a0:	b0ad      	sub	sp, #180	; 0xb4
  4074a2:	461d      	mov	r5, r3
  4074a4:	468b      	mov	fp, r1
  4074a6:	4690      	mov	r8, r2
  4074a8:	9307      	str	r3, [sp, #28]
  4074aa:	9006      	str	r0, [sp, #24]
  4074ac:	b118      	cbz	r0, 4074b6 <_vfiprintf_r+0x1a>
  4074ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4074b0:	2b00      	cmp	r3, #0
  4074b2:	f000 80f3 	beq.w	40769c <_vfiprintf_r+0x200>
  4074b6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4074ba:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4074be:	07df      	lsls	r7, r3, #31
  4074c0:	b281      	uxth	r1, r0
  4074c2:	d402      	bmi.n	4074ca <_vfiprintf_r+0x2e>
  4074c4:	058e      	lsls	r6, r1, #22
  4074c6:	f140 80fc 	bpl.w	4076c2 <_vfiprintf_r+0x226>
  4074ca:	048c      	lsls	r4, r1, #18
  4074cc:	d40a      	bmi.n	4074e4 <_vfiprintf_r+0x48>
  4074ce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4074d2:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4074d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4074da:	f8ab 100c 	strh.w	r1, [fp, #12]
  4074de:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4074e2:	b289      	uxth	r1, r1
  4074e4:	0708      	lsls	r0, r1, #28
  4074e6:	f140 80b3 	bpl.w	407650 <_vfiprintf_r+0x1b4>
  4074ea:	f8db 3010 	ldr.w	r3, [fp, #16]
  4074ee:	2b00      	cmp	r3, #0
  4074f0:	f000 80ae 	beq.w	407650 <_vfiprintf_r+0x1b4>
  4074f4:	f001 031a 	and.w	r3, r1, #26
  4074f8:	2b0a      	cmp	r3, #10
  4074fa:	f000 80b5 	beq.w	407668 <_vfiprintf_r+0x1cc>
  4074fe:	2300      	movs	r3, #0
  407500:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  407504:	930b      	str	r3, [sp, #44]	; 0x2c
  407506:	9311      	str	r3, [sp, #68]	; 0x44
  407508:	9310      	str	r3, [sp, #64]	; 0x40
  40750a:	9303      	str	r3, [sp, #12]
  40750c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  407510:	46ca      	mov	sl, r9
  407512:	f8cd b010 	str.w	fp, [sp, #16]
  407516:	f898 3000 	ldrb.w	r3, [r8]
  40751a:	4644      	mov	r4, r8
  40751c:	b1fb      	cbz	r3, 40755e <_vfiprintf_r+0xc2>
  40751e:	2b25      	cmp	r3, #37	; 0x25
  407520:	d102      	bne.n	407528 <_vfiprintf_r+0x8c>
  407522:	e01c      	b.n	40755e <_vfiprintf_r+0xc2>
  407524:	2b25      	cmp	r3, #37	; 0x25
  407526:	d003      	beq.n	407530 <_vfiprintf_r+0x94>
  407528:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40752c:	2b00      	cmp	r3, #0
  40752e:	d1f9      	bne.n	407524 <_vfiprintf_r+0x88>
  407530:	eba4 0508 	sub.w	r5, r4, r8
  407534:	b19d      	cbz	r5, 40755e <_vfiprintf_r+0xc2>
  407536:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407538:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40753a:	f8ca 8000 	str.w	r8, [sl]
  40753e:	3301      	adds	r3, #1
  407540:	442a      	add	r2, r5
  407542:	2b07      	cmp	r3, #7
  407544:	f8ca 5004 	str.w	r5, [sl, #4]
  407548:	9211      	str	r2, [sp, #68]	; 0x44
  40754a:	9310      	str	r3, [sp, #64]	; 0x40
  40754c:	dd7a      	ble.n	407644 <_vfiprintf_r+0x1a8>
  40754e:	2a00      	cmp	r2, #0
  407550:	f040 84b0 	bne.w	407eb4 <_vfiprintf_r+0xa18>
  407554:	9b03      	ldr	r3, [sp, #12]
  407556:	9210      	str	r2, [sp, #64]	; 0x40
  407558:	442b      	add	r3, r5
  40755a:	46ca      	mov	sl, r9
  40755c:	9303      	str	r3, [sp, #12]
  40755e:	7823      	ldrb	r3, [r4, #0]
  407560:	2b00      	cmp	r3, #0
  407562:	f000 83e0 	beq.w	407d26 <_vfiprintf_r+0x88a>
  407566:	2000      	movs	r0, #0
  407568:	f04f 0300 	mov.w	r3, #0
  40756c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  407570:	f104 0801 	add.w	r8, r4, #1
  407574:	7862      	ldrb	r2, [r4, #1]
  407576:	4605      	mov	r5, r0
  407578:	4606      	mov	r6, r0
  40757a:	4603      	mov	r3, r0
  40757c:	f04f 34ff 	mov.w	r4, #4294967295
  407580:	f108 0801 	add.w	r8, r8, #1
  407584:	f1a2 0120 	sub.w	r1, r2, #32
  407588:	2958      	cmp	r1, #88	; 0x58
  40758a:	f200 82de 	bhi.w	407b4a <_vfiprintf_r+0x6ae>
  40758e:	e8df f011 	tbh	[pc, r1, lsl #1]
  407592:	0221      	.short	0x0221
  407594:	02dc02dc 	.word	0x02dc02dc
  407598:	02dc0229 	.word	0x02dc0229
  40759c:	02dc02dc 	.word	0x02dc02dc
  4075a0:	02dc02dc 	.word	0x02dc02dc
  4075a4:	028902dc 	.word	0x028902dc
  4075a8:	02dc0295 	.word	0x02dc0295
  4075ac:	02bd00a2 	.word	0x02bd00a2
  4075b0:	019f02dc 	.word	0x019f02dc
  4075b4:	01a401a4 	.word	0x01a401a4
  4075b8:	01a401a4 	.word	0x01a401a4
  4075bc:	01a401a4 	.word	0x01a401a4
  4075c0:	01a401a4 	.word	0x01a401a4
  4075c4:	02dc01a4 	.word	0x02dc01a4
  4075c8:	02dc02dc 	.word	0x02dc02dc
  4075cc:	02dc02dc 	.word	0x02dc02dc
  4075d0:	02dc02dc 	.word	0x02dc02dc
  4075d4:	02dc02dc 	.word	0x02dc02dc
  4075d8:	01b202dc 	.word	0x01b202dc
  4075dc:	02dc02dc 	.word	0x02dc02dc
  4075e0:	02dc02dc 	.word	0x02dc02dc
  4075e4:	02dc02dc 	.word	0x02dc02dc
  4075e8:	02dc02dc 	.word	0x02dc02dc
  4075ec:	02dc02dc 	.word	0x02dc02dc
  4075f0:	02dc0197 	.word	0x02dc0197
  4075f4:	02dc02dc 	.word	0x02dc02dc
  4075f8:	02dc02dc 	.word	0x02dc02dc
  4075fc:	02dc019b 	.word	0x02dc019b
  407600:	025302dc 	.word	0x025302dc
  407604:	02dc02dc 	.word	0x02dc02dc
  407608:	02dc02dc 	.word	0x02dc02dc
  40760c:	02dc02dc 	.word	0x02dc02dc
  407610:	02dc02dc 	.word	0x02dc02dc
  407614:	02dc02dc 	.word	0x02dc02dc
  407618:	021b025a 	.word	0x021b025a
  40761c:	02dc02dc 	.word	0x02dc02dc
  407620:	026e02dc 	.word	0x026e02dc
  407624:	02dc021b 	.word	0x02dc021b
  407628:	027302dc 	.word	0x027302dc
  40762c:	01f502dc 	.word	0x01f502dc
  407630:	02090182 	.word	0x02090182
  407634:	02dc02d7 	.word	0x02dc02d7
  407638:	02dc029a 	.word	0x02dc029a
  40763c:	02dc00a7 	.word	0x02dc00a7
  407640:	022e02dc 	.word	0x022e02dc
  407644:	f10a 0a08 	add.w	sl, sl, #8
  407648:	9b03      	ldr	r3, [sp, #12]
  40764a:	442b      	add	r3, r5
  40764c:	9303      	str	r3, [sp, #12]
  40764e:	e786      	b.n	40755e <_vfiprintf_r+0xc2>
  407650:	4659      	mov	r1, fp
  407652:	9806      	ldr	r0, [sp, #24]
  407654:	f000 fdac 	bl	4081b0 <__swsetup_r>
  407658:	bb18      	cbnz	r0, 4076a2 <_vfiprintf_r+0x206>
  40765a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40765e:	f001 031a 	and.w	r3, r1, #26
  407662:	2b0a      	cmp	r3, #10
  407664:	f47f af4b 	bne.w	4074fe <_vfiprintf_r+0x62>
  407668:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40766c:	2b00      	cmp	r3, #0
  40766e:	f6ff af46 	blt.w	4074fe <_vfiprintf_r+0x62>
  407672:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  407676:	07db      	lsls	r3, r3, #31
  407678:	d405      	bmi.n	407686 <_vfiprintf_r+0x1ea>
  40767a:	058f      	lsls	r7, r1, #22
  40767c:	d403      	bmi.n	407686 <_vfiprintf_r+0x1ea>
  40767e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  407682:	f001 fac3 	bl	408c0c <__retarget_lock_release_recursive>
  407686:	462b      	mov	r3, r5
  407688:	4642      	mov	r2, r8
  40768a:	4659      	mov	r1, fp
  40768c:	9806      	ldr	r0, [sp, #24]
  40768e:	f000 fd4d 	bl	40812c <__sbprintf>
  407692:	9003      	str	r0, [sp, #12]
  407694:	9803      	ldr	r0, [sp, #12]
  407696:	b02d      	add	sp, #180	; 0xb4
  407698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40769c:	f000 fef4 	bl	408488 <__sinit>
  4076a0:	e709      	b.n	4074b6 <_vfiprintf_r+0x1a>
  4076a2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4076a6:	07d9      	lsls	r1, r3, #31
  4076a8:	d404      	bmi.n	4076b4 <_vfiprintf_r+0x218>
  4076aa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4076ae:	059a      	lsls	r2, r3, #22
  4076b0:	f140 84aa 	bpl.w	408008 <_vfiprintf_r+0xb6c>
  4076b4:	f04f 33ff 	mov.w	r3, #4294967295
  4076b8:	9303      	str	r3, [sp, #12]
  4076ba:	9803      	ldr	r0, [sp, #12]
  4076bc:	b02d      	add	sp, #180	; 0xb4
  4076be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4076c2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4076c6:	f001 fa9f 	bl	408c08 <__retarget_lock_acquire_recursive>
  4076ca:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4076ce:	b281      	uxth	r1, r0
  4076d0:	e6fb      	b.n	4074ca <_vfiprintf_r+0x2e>
  4076d2:	4276      	negs	r6, r6
  4076d4:	9207      	str	r2, [sp, #28]
  4076d6:	f043 0304 	orr.w	r3, r3, #4
  4076da:	f898 2000 	ldrb.w	r2, [r8]
  4076de:	e74f      	b.n	407580 <_vfiprintf_r+0xe4>
  4076e0:	9608      	str	r6, [sp, #32]
  4076e2:	069e      	lsls	r6, r3, #26
  4076e4:	f100 8450 	bmi.w	407f88 <_vfiprintf_r+0xaec>
  4076e8:	9907      	ldr	r1, [sp, #28]
  4076ea:	06dd      	lsls	r5, r3, #27
  4076ec:	460a      	mov	r2, r1
  4076ee:	f100 83ef 	bmi.w	407ed0 <_vfiprintf_r+0xa34>
  4076f2:	0658      	lsls	r0, r3, #25
  4076f4:	f140 83ec 	bpl.w	407ed0 <_vfiprintf_r+0xa34>
  4076f8:	880e      	ldrh	r6, [r1, #0]
  4076fa:	3104      	adds	r1, #4
  4076fc:	2700      	movs	r7, #0
  4076fe:	2201      	movs	r2, #1
  407700:	9107      	str	r1, [sp, #28]
  407702:	f04f 0100 	mov.w	r1, #0
  407706:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40770a:	2500      	movs	r5, #0
  40770c:	1c61      	adds	r1, r4, #1
  40770e:	f000 8116 	beq.w	40793e <_vfiprintf_r+0x4a2>
  407712:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  407716:	9102      	str	r1, [sp, #8]
  407718:	ea56 0107 	orrs.w	r1, r6, r7
  40771c:	f040 8114 	bne.w	407948 <_vfiprintf_r+0x4ac>
  407720:	2c00      	cmp	r4, #0
  407722:	f040 835c 	bne.w	407dde <_vfiprintf_r+0x942>
  407726:	2a00      	cmp	r2, #0
  407728:	f040 83b7 	bne.w	407e9a <_vfiprintf_r+0x9fe>
  40772c:	f013 0301 	ands.w	r3, r3, #1
  407730:	9305      	str	r3, [sp, #20]
  407732:	f000 8457 	beq.w	407fe4 <_vfiprintf_r+0xb48>
  407736:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40773a:	2330      	movs	r3, #48	; 0x30
  40773c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  407740:	9b05      	ldr	r3, [sp, #20]
  407742:	42a3      	cmp	r3, r4
  407744:	bfb8      	it	lt
  407746:	4623      	movlt	r3, r4
  407748:	9301      	str	r3, [sp, #4]
  40774a:	b10d      	cbz	r5, 407750 <_vfiprintf_r+0x2b4>
  40774c:	3301      	adds	r3, #1
  40774e:	9301      	str	r3, [sp, #4]
  407750:	9b02      	ldr	r3, [sp, #8]
  407752:	f013 0302 	ands.w	r3, r3, #2
  407756:	9309      	str	r3, [sp, #36]	; 0x24
  407758:	d002      	beq.n	407760 <_vfiprintf_r+0x2c4>
  40775a:	9b01      	ldr	r3, [sp, #4]
  40775c:	3302      	adds	r3, #2
  40775e:	9301      	str	r3, [sp, #4]
  407760:	9b02      	ldr	r3, [sp, #8]
  407762:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  407766:	930a      	str	r3, [sp, #40]	; 0x28
  407768:	f040 8217 	bne.w	407b9a <_vfiprintf_r+0x6fe>
  40776c:	9b08      	ldr	r3, [sp, #32]
  40776e:	9a01      	ldr	r2, [sp, #4]
  407770:	1a9d      	subs	r5, r3, r2
  407772:	2d00      	cmp	r5, #0
  407774:	f340 8211 	ble.w	407b9a <_vfiprintf_r+0x6fe>
  407778:	2d10      	cmp	r5, #16
  40777a:	f340 8490 	ble.w	40809e <_vfiprintf_r+0xc02>
  40777e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407780:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407782:	4ec4      	ldr	r6, [pc, #784]	; (407a94 <_vfiprintf_r+0x5f8>)
  407784:	46d6      	mov	lr, sl
  407786:	2710      	movs	r7, #16
  407788:	46a2      	mov	sl, r4
  40778a:	4619      	mov	r1, r3
  40778c:	9c06      	ldr	r4, [sp, #24]
  40778e:	e007      	b.n	4077a0 <_vfiprintf_r+0x304>
  407790:	f101 0c02 	add.w	ip, r1, #2
  407794:	f10e 0e08 	add.w	lr, lr, #8
  407798:	4601      	mov	r1, r0
  40779a:	3d10      	subs	r5, #16
  40779c:	2d10      	cmp	r5, #16
  40779e:	dd11      	ble.n	4077c4 <_vfiprintf_r+0x328>
  4077a0:	1c48      	adds	r0, r1, #1
  4077a2:	3210      	adds	r2, #16
  4077a4:	2807      	cmp	r0, #7
  4077a6:	9211      	str	r2, [sp, #68]	; 0x44
  4077a8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4077ac:	9010      	str	r0, [sp, #64]	; 0x40
  4077ae:	ddef      	ble.n	407790 <_vfiprintf_r+0x2f4>
  4077b0:	2a00      	cmp	r2, #0
  4077b2:	f040 81e4 	bne.w	407b7e <_vfiprintf_r+0x6e2>
  4077b6:	3d10      	subs	r5, #16
  4077b8:	2d10      	cmp	r5, #16
  4077ba:	4611      	mov	r1, r2
  4077bc:	f04f 0c01 	mov.w	ip, #1
  4077c0:	46ce      	mov	lr, r9
  4077c2:	dced      	bgt.n	4077a0 <_vfiprintf_r+0x304>
  4077c4:	4654      	mov	r4, sl
  4077c6:	4661      	mov	r1, ip
  4077c8:	46f2      	mov	sl, lr
  4077ca:	442a      	add	r2, r5
  4077cc:	2907      	cmp	r1, #7
  4077ce:	9211      	str	r2, [sp, #68]	; 0x44
  4077d0:	f8ca 6000 	str.w	r6, [sl]
  4077d4:	f8ca 5004 	str.w	r5, [sl, #4]
  4077d8:	9110      	str	r1, [sp, #64]	; 0x40
  4077da:	f300 82ec 	bgt.w	407db6 <_vfiprintf_r+0x91a>
  4077de:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4077e2:	f10a 0a08 	add.w	sl, sl, #8
  4077e6:	1c48      	adds	r0, r1, #1
  4077e8:	2d00      	cmp	r5, #0
  4077ea:	f040 81de 	bne.w	407baa <_vfiprintf_r+0x70e>
  4077ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4077f0:	2b00      	cmp	r3, #0
  4077f2:	f000 81f8 	beq.w	407be6 <_vfiprintf_r+0x74a>
  4077f6:	3202      	adds	r2, #2
  4077f8:	a90e      	add	r1, sp, #56	; 0x38
  4077fa:	2302      	movs	r3, #2
  4077fc:	2807      	cmp	r0, #7
  4077fe:	9211      	str	r2, [sp, #68]	; 0x44
  407800:	9010      	str	r0, [sp, #64]	; 0x40
  407802:	e88a 000a 	stmia.w	sl, {r1, r3}
  407806:	f340 81ea 	ble.w	407bde <_vfiprintf_r+0x742>
  40780a:	2a00      	cmp	r2, #0
  40780c:	f040 838c 	bne.w	407f28 <_vfiprintf_r+0xa8c>
  407810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407812:	2b80      	cmp	r3, #128	; 0x80
  407814:	f04f 0001 	mov.w	r0, #1
  407818:	4611      	mov	r1, r2
  40781a:	46ca      	mov	sl, r9
  40781c:	f040 81e7 	bne.w	407bee <_vfiprintf_r+0x752>
  407820:	9b08      	ldr	r3, [sp, #32]
  407822:	9d01      	ldr	r5, [sp, #4]
  407824:	1b5e      	subs	r6, r3, r5
  407826:	2e00      	cmp	r6, #0
  407828:	f340 81e1 	ble.w	407bee <_vfiprintf_r+0x752>
  40782c:	2e10      	cmp	r6, #16
  40782e:	4d9a      	ldr	r5, [pc, #616]	; (407a98 <_vfiprintf_r+0x5fc>)
  407830:	f340 8450 	ble.w	4080d4 <_vfiprintf_r+0xc38>
  407834:	46d4      	mov	ip, sl
  407836:	2710      	movs	r7, #16
  407838:	46a2      	mov	sl, r4
  40783a:	9c06      	ldr	r4, [sp, #24]
  40783c:	e007      	b.n	40784e <_vfiprintf_r+0x3b2>
  40783e:	f101 0e02 	add.w	lr, r1, #2
  407842:	f10c 0c08 	add.w	ip, ip, #8
  407846:	4601      	mov	r1, r0
  407848:	3e10      	subs	r6, #16
  40784a:	2e10      	cmp	r6, #16
  40784c:	dd11      	ble.n	407872 <_vfiprintf_r+0x3d6>
  40784e:	1c48      	adds	r0, r1, #1
  407850:	3210      	adds	r2, #16
  407852:	2807      	cmp	r0, #7
  407854:	9211      	str	r2, [sp, #68]	; 0x44
  407856:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40785a:	9010      	str	r0, [sp, #64]	; 0x40
  40785c:	ddef      	ble.n	40783e <_vfiprintf_r+0x3a2>
  40785e:	2a00      	cmp	r2, #0
  407860:	f040 829d 	bne.w	407d9e <_vfiprintf_r+0x902>
  407864:	3e10      	subs	r6, #16
  407866:	2e10      	cmp	r6, #16
  407868:	f04f 0e01 	mov.w	lr, #1
  40786c:	4611      	mov	r1, r2
  40786e:	46cc      	mov	ip, r9
  407870:	dced      	bgt.n	40784e <_vfiprintf_r+0x3b2>
  407872:	4654      	mov	r4, sl
  407874:	46e2      	mov	sl, ip
  407876:	4432      	add	r2, r6
  407878:	f1be 0f07 	cmp.w	lr, #7
  40787c:	9211      	str	r2, [sp, #68]	; 0x44
  40787e:	e88a 0060 	stmia.w	sl, {r5, r6}
  407882:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  407886:	f300 8369 	bgt.w	407f5c <_vfiprintf_r+0xac0>
  40788a:	f10a 0a08 	add.w	sl, sl, #8
  40788e:	f10e 0001 	add.w	r0, lr, #1
  407892:	4671      	mov	r1, lr
  407894:	e1ab      	b.n	407bee <_vfiprintf_r+0x752>
  407896:	9608      	str	r6, [sp, #32]
  407898:	f013 0220 	ands.w	r2, r3, #32
  40789c:	f040 838c 	bne.w	407fb8 <_vfiprintf_r+0xb1c>
  4078a0:	f013 0110 	ands.w	r1, r3, #16
  4078a4:	f040 831a 	bne.w	407edc <_vfiprintf_r+0xa40>
  4078a8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4078ac:	f000 8316 	beq.w	407edc <_vfiprintf_r+0xa40>
  4078b0:	9807      	ldr	r0, [sp, #28]
  4078b2:	460a      	mov	r2, r1
  4078b4:	4601      	mov	r1, r0
  4078b6:	3104      	adds	r1, #4
  4078b8:	8806      	ldrh	r6, [r0, #0]
  4078ba:	9107      	str	r1, [sp, #28]
  4078bc:	2700      	movs	r7, #0
  4078be:	e720      	b.n	407702 <_vfiprintf_r+0x266>
  4078c0:	9608      	str	r6, [sp, #32]
  4078c2:	f043 0310 	orr.w	r3, r3, #16
  4078c6:	e7e7      	b.n	407898 <_vfiprintf_r+0x3fc>
  4078c8:	9608      	str	r6, [sp, #32]
  4078ca:	f043 0310 	orr.w	r3, r3, #16
  4078ce:	e708      	b.n	4076e2 <_vfiprintf_r+0x246>
  4078d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4078d4:	f898 2000 	ldrb.w	r2, [r8]
  4078d8:	e652      	b.n	407580 <_vfiprintf_r+0xe4>
  4078da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4078de:	2600      	movs	r6, #0
  4078e0:	f818 2b01 	ldrb.w	r2, [r8], #1
  4078e4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4078e8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4078ec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4078f0:	2909      	cmp	r1, #9
  4078f2:	d9f5      	bls.n	4078e0 <_vfiprintf_r+0x444>
  4078f4:	e646      	b.n	407584 <_vfiprintf_r+0xe8>
  4078f6:	9608      	str	r6, [sp, #32]
  4078f8:	2800      	cmp	r0, #0
  4078fa:	f040 8408 	bne.w	40810e <_vfiprintf_r+0xc72>
  4078fe:	f043 0310 	orr.w	r3, r3, #16
  407902:	069e      	lsls	r6, r3, #26
  407904:	f100 834c 	bmi.w	407fa0 <_vfiprintf_r+0xb04>
  407908:	06dd      	lsls	r5, r3, #27
  40790a:	f100 82f3 	bmi.w	407ef4 <_vfiprintf_r+0xa58>
  40790e:	0658      	lsls	r0, r3, #25
  407910:	f140 82f0 	bpl.w	407ef4 <_vfiprintf_r+0xa58>
  407914:	9d07      	ldr	r5, [sp, #28]
  407916:	f9b5 6000 	ldrsh.w	r6, [r5]
  40791a:	462a      	mov	r2, r5
  40791c:	17f7      	asrs	r7, r6, #31
  40791e:	3204      	adds	r2, #4
  407920:	4630      	mov	r0, r6
  407922:	4639      	mov	r1, r7
  407924:	9207      	str	r2, [sp, #28]
  407926:	2800      	cmp	r0, #0
  407928:	f171 0200 	sbcs.w	r2, r1, #0
  40792c:	f2c0 835d 	blt.w	407fea <_vfiprintf_r+0xb4e>
  407930:	1c61      	adds	r1, r4, #1
  407932:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  407936:	f04f 0201 	mov.w	r2, #1
  40793a:	f47f aeea 	bne.w	407712 <_vfiprintf_r+0x276>
  40793e:	ea56 0107 	orrs.w	r1, r6, r7
  407942:	f000 824d 	beq.w	407de0 <_vfiprintf_r+0x944>
  407946:	9302      	str	r3, [sp, #8]
  407948:	2a01      	cmp	r2, #1
  40794a:	f000 828c 	beq.w	407e66 <_vfiprintf_r+0x9ca>
  40794e:	2a02      	cmp	r2, #2
  407950:	f040 825c 	bne.w	407e0c <_vfiprintf_r+0x970>
  407954:	980b      	ldr	r0, [sp, #44]	; 0x2c
  407956:	46cb      	mov	fp, r9
  407958:	0933      	lsrs	r3, r6, #4
  40795a:	f006 010f 	and.w	r1, r6, #15
  40795e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  407962:	093a      	lsrs	r2, r7, #4
  407964:	461e      	mov	r6, r3
  407966:	4617      	mov	r7, r2
  407968:	5c43      	ldrb	r3, [r0, r1]
  40796a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40796e:	ea56 0307 	orrs.w	r3, r6, r7
  407972:	d1f1      	bne.n	407958 <_vfiprintf_r+0x4bc>
  407974:	eba9 030b 	sub.w	r3, r9, fp
  407978:	9305      	str	r3, [sp, #20]
  40797a:	e6e1      	b.n	407740 <_vfiprintf_r+0x2a4>
  40797c:	2800      	cmp	r0, #0
  40797e:	f040 83c0 	bne.w	408102 <_vfiprintf_r+0xc66>
  407982:	0699      	lsls	r1, r3, #26
  407984:	f100 8367 	bmi.w	408056 <_vfiprintf_r+0xbba>
  407988:	06da      	lsls	r2, r3, #27
  40798a:	f100 80f1 	bmi.w	407b70 <_vfiprintf_r+0x6d4>
  40798e:	065b      	lsls	r3, r3, #25
  407990:	f140 80ee 	bpl.w	407b70 <_vfiprintf_r+0x6d4>
  407994:	9a07      	ldr	r2, [sp, #28]
  407996:	6813      	ldr	r3, [r2, #0]
  407998:	3204      	adds	r2, #4
  40799a:	9207      	str	r2, [sp, #28]
  40799c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4079a0:	801a      	strh	r2, [r3, #0]
  4079a2:	e5b8      	b.n	407516 <_vfiprintf_r+0x7a>
  4079a4:	9807      	ldr	r0, [sp, #28]
  4079a6:	4a3d      	ldr	r2, [pc, #244]	; (407a9c <_vfiprintf_r+0x600>)
  4079a8:	9608      	str	r6, [sp, #32]
  4079aa:	920b      	str	r2, [sp, #44]	; 0x2c
  4079ac:	6806      	ldr	r6, [r0, #0]
  4079ae:	2278      	movs	r2, #120	; 0x78
  4079b0:	2130      	movs	r1, #48	; 0x30
  4079b2:	3004      	adds	r0, #4
  4079b4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4079b8:	f043 0302 	orr.w	r3, r3, #2
  4079bc:	9007      	str	r0, [sp, #28]
  4079be:	2700      	movs	r7, #0
  4079c0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4079c4:	2202      	movs	r2, #2
  4079c6:	e69c      	b.n	407702 <_vfiprintf_r+0x266>
  4079c8:	9608      	str	r6, [sp, #32]
  4079ca:	2800      	cmp	r0, #0
  4079cc:	d099      	beq.n	407902 <_vfiprintf_r+0x466>
  4079ce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4079d2:	e796      	b.n	407902 <_vfiprintf_r+0x466>
  4079d4:	f898 2000 	ldrb.w	r2, [r8]
  4079d8:	2d00      	cmp	r5, #0
  4079da:	f47f add1 	bne.w	407580 <_vfiprintf_r+0xe4>
  4079de:	2001      	movs	r0, #1
  4079e0:	2520      	movs	r5, #32
  4079e2:	e5cd      	b.n	407580 <_vfiprintf_r+0xe4>
  4079e4:	f043 0301 	orr.w	r3, r3, #1
  4079e8:	f898 2000 	ldrb.w	r2, [r8]
  4079ec:	e5c8      	b.n	407580 <_vfiprintf_r+0xe4>
  4079ee:	9608      	str	r6, [sp, #32]
  4079f0:	2800      	cmp	r0, #0
  4079f2:	f040 8393 	bne.w	40811c <_vfiprintf_r+0xc80>
  4079f6:	4929      	ldr	r1, [pc, #164]	; (407a9c <_vfiprintf_r+0x600>)
  4079f8:	910b      	str	r1, [sp, #44]	; 0x2c
  4079fa:	069f      	lsls	r7, r3, #26
  4079fc:	f100 82e8 	bmi.w	407fd0 <_vfiprintf_r+0xb34>
  407a00:	9807      	ldr	r0, [sp, #28]
  407a02:	06de      	lsls	r6, r3, #27
  407a04:	4601      	mov	r1, r0
  407a06:	f100 8270 	bmi.w	407eea <_vfiprintf_r+0xa4e>
  407a0a:	065d      	lsls	r5, r3, #25
  407a0c:	f140 826d 	bpl.w	407eea <_vfiprintf_r+0xa4e>
  407a10:	3104      	adds	r1, #4
  407a12:	8806      	ldrh	r6, [r0, #0]
  407a14:	9107      	str	r1, [sp, #28]
  407a16:	2700      	movs	r7, #0
  407a18:	07d8      	lsls	r0, r3, #31
  407a1a:	f140 8222 	bpl.w	407e62 <_vfiprintf_r+0x9c6>
  407a1e:	ea56 0107 	orrs.w	r1, r6, r7
  407a22:	f000 821e 	beq.w	407e62 <_vfiprintf_r+0x9c6>
  407a26:	2130      	movs	r1, #48	; 0x30
  407a28:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  407a2c:	f043 0302 	orr.w	r3, r3, #2
  407a30:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  407a34:	2202      	movs	r2, #2
  407a36:	e664      	b.n	407702 <_vfiprintf_r+0x266>
  407a38:	9608      	str	r6, [sp, #32]
  407a3a:	2800      	cmp	r0, #0
  407a3c:	f040 836b 	bne.w	408116 <_vfiprintf_r+0xc7a>
  407a40:	4917      	ldr	r1, [pc, #92]	; (407aa0 <_vfiprintf_r+0x604>)
  407a42:	910b      	str	r1, [sp, #44]	; 0x2c
  407a44:	e7d9      	b.n	4079fa <_vfiprintf_r+0x55e>
  407a46:	9907      	ldr	r1, [sp, #28]
  407a48:	9608      	str	r6, [sp, #32]
  407a4a:	680a      	ldr	r2, [r1, #0]
  407a4c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  407a50:	f04f 0000 	mov.w	r0, #0
  407a54:	460a      	mov	r2, r1
  407a56:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  407a5a:	3204      	adds	r2, #4
  407a5c:	2001      	movs	r0, #1
  407a5e:	9001      	str	r0, [sp, #4]
  407a60:	9207      	str	r2, [sp, #28]
  407a62:	9005      	str	r0, [sp, #20]
  407a64:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  407a68:	9302      	str	r3, [sp, #8]
  407a6a:	2400      	movs	r4, #0
  407a6c:	e670      	b.n	407750 <_vfiprintf_r+0x2b4>
  407a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407a72:	f898 2000 	ldrb.w	r2, [r8]
  407a76:	e583      	b.n	407580 <_vfiprintf_r+0xe4>
  407a78:	f898 2000 	ldrb.w	r2, [r8]
  407a7c:	2a6c      	cmp	r2, #108	; 0x6c
  407a7e:	bf03      	ittte	eq
  407a80:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  407a84:	f043 0320 	orreq.w	r3, r3, #32
  407a88:	f108 0801 	addeq.w	r8, r8, #1
  407a8c:	f043 0310 	orrne.w	r3, r3, #16
  407a90:	e576      	b.n	407580 <_vfiprintf_r+0xe4>
  407a92:	bf00      	nop
  407a94:	00409c3c 	.word	0x00409c3c
  407a98:	00409c4c 	.word	0x00409c4c
  407a9c:	00409c20 	.word	0x00409c20
  407aa0:	00409c0c 	.word	0x00409c0c
  407aa4:	9907      	ldr	r1, [sp, #28]
  407aa6:	680e      	ldr	r6, [r1, #0]
  407aa8:	460a      	mov	r2, r1
  407aaa:	2e00      	cmp	r6, #0
  407aac:	f102 0204 	add.w	r2, r2, #4
  407ab0:	f6ff ae0f 	blt.w	4076d2 <_vfiprintf_r+0x236>
  407ab4:	9207      	str	r2, [sp, #28]
  407ab6:	f898 2000 	ldrb.w	r2, [r8]
  407aba:	e561      	b.n	407580 <_vfiprintf_r+0xe4>
  407abc:	f898 2000 	ldrb.w	r2, [r8]
  407ac0:	2001      	movs	r0, #1
  407ac2:	252b      	movs	r5, #43	; 0x2b
  407ac4:	e55c      	b.n	407580 <_vfiprintf_r+0xe4>
  407ac6:	9907      	ldr	r1, [sp, #28]
  407ac8:	9608      	str	r6, [sp, #32]
  407aca:	f8d1 b000 	ldr.w	fp, [r1]
  407ace:	f04f 0200 	mov.w	r2, #0
  407ad2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  407ad6:	1d0e      	adds	r6, r1, #4
  407ad8:	f1bb 0f00 	cmp.w	fp, #0
  407adc:	f000 82e5 	beq.w	4080aa <_vfiprintf_r+0xc0e>
  407ae0:	1c67      	adds	r7, r4, #1
  407ae2:	f000 82c4 	beq.w	40806e <_vfiprintf_r+0xbd2>
  407ae6:	4622      	mov	r2, r4
  407ae8:	2100      	movs	r1, #0
  407aea:	4658      	mov	r0, fp
  407aec:	9301      	str	r3, [sp, #4]
  407aee:	f001 f91f 	bl	408d30 <memchr>
  407af2:	9b01      	ldr	r3, [sp, #4]
  407af4:	2800      	cmp	r0, #0
  407af6:	f000 82e5 	beq.w	4080c4 <_vfiprintf_r+0xc28>
  407afa:	eba0 020b 	sub.w	r2, r0, fp
  407afe:	9205      	str	r2, [sp, #20]
  407b00:	9607      	str	r6, [sp, #28]
  407b02:	9302      	str	r3, [sp, #8]
  407b04:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  407b08:	2400      	movs	r4, #0
  407b0a:	e619      	b.n	407740 <_vfiprintf_r+0x2a4>
  407b0c:	f898 2000 	ldrb.w	r2, [r8]
  407b10:	2a2a      	cmp	r2, #42	; 0x2a
  407b12:	f108 0701 	add.w	r7, r8, #1
  407b16:	f000 82e9 	beq.w	4080ec <_vfiprintf_r+0xc50>
  407b1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  407b1e:	2909      	cmp	r1, #9
  407b20:	46b8      	mov	r8, r7
  407b22:	f04f 0400 	mov.w	r4, #0
  407b26:	f63f ad2d 	bhi.w	407584 <_vfiprintf_r+0xe8>
  407b2a:	f818 2b01 	ldrb.w	r2, [r8], #1
  407b2e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  407b32:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  407b36:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  407b3a:	2909      	cmp	r1, #9
  407b3c:	d9f5      	bls.n	407b2a <_vfiprintf_r+0x68e>
  407b3e:	e521      	b.n	407584 <_vfiprintf_r+0xe8>
  407b40:	f043 0320 	orr.w	r3, r3, #32
  407b44:	f898 2000 	ldrb.w	r2, [r8]
  407b48:	e51a      	b.n	407580 <_vfiprintf_r+0xe4>
  407b4a:	9608      	str	r6, [sp, #32]
  407b4c:	2800      	cmp	r0, #0
  407b4e:	f040 82db 	bne.w	408108 <_vfiprintf_r+0xc6c>
  407b52:	2a00      	cmp	r2, #0
  407b54:	f000 80e7 	beq.w	407d26 <_vfiprintf_r+0x88a>
  407b58:	2101      	movs	r1, #1
  407b5a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  407b5e:	f04f 0200 	mov.w	r2, #0
  407b62:	9101      	str	r1, [sp, #4]
  407b64:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  407b68:	9105      	str	r1, [sp, #20]
  407b6a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  407b6e:	e77b      	b.n	407a68 <_vfiprintf_r+0x5cc>
  407b70:	9a07      	ldr	r2, [sp, #28]
  407b72:	6813      	ldr	r3, [r2, #0]
  407b74:	3204      	adds	r2, #4
  407b76:	9207      	str	r2, [sp, #28]
  407b78:	9a03      	ldr	r2, [sp, #12]
  407b7a:	601a      	str	r2, [r3, #0]
  407b7c:	e4cb      	b.n	407516 <_vfiprintf_r+0x7a>
  407b7e:	aa0f      	add	r2, sp, #60	; 0x3c
  407b80:	9904      	ldr	r1, [sp, #16]
  407b82:	4620      	mov	r0, r4
  407b84:	f7ff fc4a 	bl	40741c <__sprint_r.part.0>
  407b88:	2800      	cmp	r0, #0
  407b8a:	f040 8139 	bne.w	407e00 <_vfiprintf_r+0x964>
  407b8e:	9910      	ldr	r1, [sp, #64]	; 0x40
  407b90:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407b92:	f101 0c01 	add.w	ip, r1, #1
  407b96:	46ce      	mov	lr, r9
  407b98:	e5ff      	b.n	40779a <_vfiprintf_r+0x2fe>
  407b9a:	9910      	ldr	r1, [sp, #64]	; 0x40
  407b9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407b9e:	1c48      	adds	r0, r1, #1
  407ba0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  407ba4:	2d00      	cmp	r5, #0
  407ba6:	f43f ae22 	beq.w	4077ee <_vfiprintf_r+0x352>
  407baa:	3201      	adds	r2, #1
  407bac:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  407bb0:	2101      	movs	r1, #1
  407bb2:	2807      	cmp	r0, #7
  407bb4:	9211      	str	r2, [sp, #68]	; 0x44
  407bb6:	9010      	str	r0, [sp, #64]	; 0x40
  407bb8:	f8ca 5000 	str.w	r5, [sl]
  407bbc:	f8ca 1004 	str.w	r1, [sl, #4]
  407bc0:	f340 8108 	ble.w	407dd4 <_vfiprintf_r+0x938>
  407bc4:	2a00      	cmp	r2, #0
  407bc6:	f040 81bc 	bne.w	407f42 <_vfiprintf_r+0xaa6>
  407bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407bcc:	2b00      	cmp	r3, #0
  407bce:	f43f ae1f 	beq.w	407810 <_vfiprintf_r+0x374>
  407bd2:	ab0e      	add	r3, sp, #56	; 0x38
  407bd4:	2202      	movs	r2, #2
  407bd6:	4608      	mov	r0, r1
  407bd8:	931c      	str	r3, [sp, #112]	; 0x70
  407bda:	921d      	str	r2, [sp, #116]	; 0x74
  407bdc:	46ca      	mov	sl, r9
  407bde:	4601      	mov	r1, r0
  407be0:	f10a 0a08 	add.w	sl, sl, #8
  407be4:	3001      	adds	r0, #1
  407be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407be8:	2b80      	cmp	r3, #128	; 0x80
  407bea:	f43f ae19 	beq.w	407820 <_vfiprintf_r+0x384>
  407bee:	9b05      	ldr	r3, [sp, #20]
  407bf0:	1ae4      	subs	r4, r4, r3
  407bf2:	2c00      	cmp	r4, #0
  407bf4:	dd2e      	ble.n	407c54 <_vfiprintf_r+0x7b8>
  407bf6:	2c10      	cmp	r4, #16
  407bf8:	4db3      	ldr	r5, [pc, #716]	; (407ec8 <_vfiprintf_r+0xa2c>)
  407bfa:	dd1e      	ble.n	407c3a <_vfiprintf_r+0x79e>
  407bfc:	46d6      	mov	lr, sl
  407bfe:	2610      	movs	r6, #16
  407c00:	9f06      	ldr	r7, [sp, #24]
  407c02:	f8dd a010 	ldr.w	sl, [sp, #16]
  407c06:	e006      	b.n	407c16 <_vfiprintf_r+0x77a>
  407c08:	1c88      	adds	r0, r1, #2
  407c0a:	f10e 0e08 	add.w	lr, lr, #8
  407c0e:	4619      	mov	r1, r3
  407c10:	3c10      	subs	r4, #16
  407c12:	2c10      	cmp	r4, #16
  407c14:	dd10      	ble.n	407c38 <_vfiprintf_r+0x79c>
  407c16:	1c4b      	adds	r3, r1, #1
  407c18:	3210      	adds	r2, #16
  407c1a:	2b07      	cmp	r3, #7
  407c1c:	9211      	str	r2, [sp, #68]	; 0x44
  407c1e:	e88e 0060 	stmia.w	lr, {r5, r6}
  407c22:	9310      	str	r3, [sp, #64]	; 0x40
  407c24:	ddf0      	ble.n	407c08 <_vfiprintf_r+0x76c>
  407c26:	2a00      	cmp	r2, #0
  407c28:	d165      	bne.n	407cf6 <_vfiprintf_r+0x85a>
  407c2a:	3c10      	subs	r4, #16
  407c2c:	2c10      	cmp	r4, #16
  407c2e:	f04f 0001 	mov.w	r0, #1
  407c32:	4611      	mov	r1, r2
  407c34:	46ce      	mov	lr, r9
  407c36:	dcee      	bgt.n	407c16 <_vfiprintf_r+0x77a>
  407c38:	46f2      	mov	sl, lr
  407c3a:	4422      	add	r2, r4
  407c3c:	2807      	cmp	r0, #7
  407c3e:	9211      	str	r2, [sp, #68]	; 0x44
  407c40:	f8ca 5000 	str.w	r5, [sl]
  407c44:	f8ca 4004 	str.w	r4, [sl, #4]
  407c48:	9010      	str	r0, [sp, #64]	; 0x40
  407c4a:	f300 8085 	bgt.w	407d58 <_vfiprintf_r+0x8bc>
  407c4e:	f10a 0a08 	add.w	sl, sl, #8
  407c52:	3001      	adds	r0, #1
  407c54:	9905      	ldr	r1, [sp, #20]
  407c56:	f8ca b000 	str.w	fp, [sl]
  407c5a:	440a      	add	r2, r1
  407c5c:	2807      	cmp	r0, #7
  407c5e:	9211      	str	r2, [sp, #68]	; 0x44
  407c60:	f8ca 1004 	str.w	r1, [sl, #4]
  407c64:	9010      	str	r0, [sp, #64]	; 0x40
  407c66:	f340 8082 	ble.w	407d6e <_vfiprintf_r+0x8d2>
  407c6a:	2a00      	cmp	r2, #0
  407c6c:	f040 8118 	bne.w	407ea0 <_vfiprintf_r+0xa04>
  407c70:	9b02      	ldr	r3, [sp, #8]
  407c72:	9210      	str	r2, [sp, #64]	; 0x40
  407c74:	0758      	lsls	r0, r3, #29
  407c76:	d535      	bpl.n	407ce4 <_vfiprintf_r+0x848>
  407c78:	9b08      	ldr	r3, [sp, #32]
  407c7a:	9901      	ldr	r1, [sp, #4]
  407c7c:	1a5c      	subs	r4, r3, r1
  407c7e:	2c00      	cmp	r4, #0
  407c80:	f340 80e7 	ble.w	407e52 <_vfiprintf_r+0x9b6>
  407c84:	46ca      	mov	sl, r9
  407c86:	2c10      	cmp	r4, #16
  407c88:	f340 8218 	ble.w	4080bc <_vfiprintf_r+0xc20>
  407c8c:	9910      	ldr	r1, [sp, #64]	; 0x40
  407c8e:	4e8f      	ldr	r6, [pc, #572]	; (407ecc <_vfiprintf_r+0xa30>)
  407c90:	9f06      	ldr	r7, [sp, #24]
  407c92:	f8dd b010 	ldr.w	fp, [sp, #16]
  407c96:	2510      	movs	r5, #16
  407c98:	e006      	b.n	407ca8 <_vfiprintf_r+0x80c>
  407c9a:	1c88      	adds	r0, r1, #2
  407c9c:	f10a 0a08 	add.w	sl, sl, #8
  407ca0:	4619      	mov	r1, r3
  407ca2:	3c10      	subs	r4, #16
  407ca4:	2c10      	cmp	r4, #16
  407ca6:	dd11      	ble.n	407ccc <_vfiprintf_r+0x830>
  407ca8:	1c4b      	adds	r3, r1, #1
  407caa:	3210      	adds	r2, #16
  407cac:	2b07      	cmp	r3, #7
  407cae:	9211      	str	r2, [sp, #68]	; 0x44
  407cb0:	f8ca 6000 	str.w	r6, [sl]
  407cb4:	f8ca 5004 	str.w	r5, [sl, #4]
  407cb8:	9310      	str	r3, [sp, #64]	; 0x40
  407cba:	ddee      	ble.n	407c9a <_vfiprintf_r+0x7fe>
  407cbc:	bb42      	cbnz	r2, 407d10 <_vfiprintf_r+0x874>
  407cbe:	3c10      	subs	r4, #16
  407cc0:	2c10      	cmp	r4, #16
  407cc2:	f04f 0001 	mov.w	r0, #1
  407cc6:	4611      	mov	r1, r2
  407cc8:	46ca      	mov	sl, r9
  407cca:	dced      	bgt.n	407ca8 <_vfiprintf_r+0x80c>
  407ccc:	4422      	add	r2, r4
  407cce:	2807      	cmp	r0, #7
  407cd0:	9211      	str	r2, [sp, #68]	; 0x44
  407cd2:	f8ca 6000 	str.w	r6, [sl]
  407cd6:	f8ca 4004 	str.w	r4, [sl, #4]
  407cda:	9010      	str	r0, [sp, #64]	; 0x40
  407cdc:	dd51      	ble.n	407d82 <_vfiprintf_r+0x8e6>
  407cde:	2a00      	cmp	r2, #0
  407ce0:	f040 819b 	bne.w	40801a <_vfiprintf_r+0xb7e>
  407ce4:	9b03      	ldr	r3, [sp, #12]
  407ce6:	9a08      	ldr	r2, [sp, #32]
  407ce8:	9901      	ldr	r1, [sp, #4]
  407cea:	428a      	cmp	r2, r1
  407cec:	bfac      	ite	ge
  407cee:	189b      	addge	r3, r3, r2
  407cf0:	185b      	addlt	r3, r3, r1
  407cf2:	9303      	str	r3, [sp, #12]
  407cf4:	e04e      	b.n	407d94 <_vfiprintf_r+0x8f8>
  407cf6:	aa0f      	add	r2, sp, #60	; 0x3c
  407cf8:	4651      	mov	r1, sl
  407cfa:	4638      	mov	r0, r7
  407cfc:	f7ff fb8e 	bl	40741c <__sprint_r.part.0>
  407d00:	2800      	cmp	r0, #0
  407d02:	f040 813f 	bne.w	407f84 <_vfiprintf_r+0xae8>
  407d06:	9910      	ldr	r1, [sp, #64]	; 0x40
  407d08:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407d0a:	1c48      	adds	r0, r1, #1
  407d0c:	46ce      	mov	lr, r9
  407d0e:	e77f      	b.n	407c10 <_vfiprintf_r+0x774>
  407d10:	aa0f      	add	r2, sp, #60	; 0x3c
  407d12:	4659      	mov	r1, fp
  407d14:	4638      	mov	r0, r7
  407d16:	f7ff fb81 	bl	40741c <__sprint_r.part.0>
  407d1a:	b960      	cbnz	r0, 407d36 <_vfiprintf_r+0x89a>
  407d1c:	9910      	ldr	r1, [sp, #64]	; 0x40
  407d1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407d20:	1c48      	adds	r0, r1, #1
  407d22:	46ca      	mov	sl, r9
  407d24:	e7bd      	b.n	407ca2 <_vfiprintf_r+0x806>
  407d26:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407d28:	f8dd b010 	ldr.w	fp, [sp, #16]
  407d2c:	2b00      	cmp	r3, #0
  407d2e:	f040 81d4 	bne.w	4080da <_vfiprintf_r+0xc3e>
  407d32:	2300      	movs	r3, #0
  407d34:	9310      	str	r3, [sp, #64]	; 0x40
  407d36:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  407d3a:	f013 0f01 	tst.w	r3, #1
  407d3e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  407d42:	d102      	bne.n	407d4a <_vfiprintf_r+0x8ae>
  407d44:	059a      	lsls	r2, r3, #22
  407d46:	f140 80de 	bpl.w	407f06 <_vfiprintf_r+0xa6a>
  407d4a:	065b      	lsls	r3, r3, #25
  407d4c:	f53f acb2 	bmi.w	4076b4 <_vfiprintf_r+0x218>
  407d50:	9803      	ldr	r0, [sp, #12]
  407d52:	b02d      	add	sp, #180	; 0xb4
  407d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d58:	2a00      	cmp	r2, #0
  407d5a:	f040 8106 	bne.w	407f6a <_vfiprintf_r+0xace>
  407d5e:	9a05      	ldr	r2, [sp, #20]
  407d60:	921d      	str	r2, [sp, #116]	; 0x74
  407d62:	2301      	movs	r3, #1
  407d64:	9211      	str	r2, [sp, #68]	; 0x44
  407d66:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  407d6a:	9310      	str	r3, [sp, #64]	; 0x40
  407d6c:	46ca      	mov	sl, r9
  407d6e:	f10a 0a08 	add.w	sl, sl, #8
  407d72:	9b02      	ldr	r3, [sp, #8]
  407d74:	0759      	lsls	r1, r3, #29
  407d76:	d504      	bpl.n	407d82 <_vfiprintf_r+0x8e6>
  407d78:	9b08      	ldr	r3, [sp, #32]
  407d7a:	9901      	ldr	r1, [sp, #4]
  407d7c:	1a5c      	subs	r4, r3, r1
  407d7e:	2c00      	cmp	r4, #0
  407d80:	dc81      	bgt.n	407c86 <_vfiprintf_r+0x7ea>
  407d82:	9b03      	ldr	r3, [sp, #12]
  407d84:	9908      	ldr	r1, [sp, #32]
  407d86:	9801      	ldr	r0, [sp, #4]
  407d88:	4281      	cmp	r1, r0
  407d8a:	bfac      	ite	ge
  407d8c:	185b      	addge	r3, r3, r1
  407d8e:	181b      	addlt	r3, r3, r0
  407d90:	9303      	str	r3, [sp, #12]
  407d92:	bb72      	cbnz	r2, 407df2 <_vfiprintf_r+0x956>
  407d94:	2300      	movs	r3, #0
  407d96:	9310      	str	r3, [sp, #64]	; 0x40
  407d98:	46ca      	mov	sl, r9
  407d9a:	f7ff bbbc 	b.w	407516 <_vfiprintf_r+0x7a>
  407d9e:	aa0f      	add	r2, sp, #60	; 0x3c
  407da0:	9904      	ldr	r1, [sp, #16]
  407da2:	4620      	mov	r0, r4
  407da4:	f7ff fb3a 	bl	40741c <__sprint_r.part.0>
  407da8:	bb50      	cbnz	r0, 407e00 <_vfiprintf_r+0x964>
  407daa:	9910      	ldr	r1, [sp, #64]	; 0x40
  407dac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407dae:	f101 0e01 	add.w	lr, r1, #1
  407db2:	46cc      	mov	ip, r9
  407db4:	e548      	b.n	407848 <_vfiprintf_r+0x3ac>
  407db6:	2a00      	cmp	r2, #0
  407db8:	f040 8140 	bne.w	40803c <_vfiprintf_r+0xba0>
  407dbc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  407dc0:	2900      	cmp	r1, #0
  407dc2:	f000 811b 	beq.w	407ffc <_vfiprintf_r+0xb60>
  407dc6:	2201      	movs	r2, #1
  407dc8:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  407dcc:	4610      	mov	r0, r2
  407dce:	921d      	str	r2, [sp, #116]	; 0x74
  407dd0:	911c      	str	r1, [sp, #112]	; 0x70
  407dd2:	46ca      	mov	sl, r9
  407dd4:	4601      	mov	r1, r0
  407dd6:	f10a 0a08 	add.w	sl, sl, #8
  407dda:	3001      	adds	r0, #1
  407ddc:	e507      	b.n	4077ee <_vfiprintf_r+0x352>
  407dde:	9b02      	ldr	r3, [sp, #8]
  407de0:	2a01      	cmp	r2, #1
  407de2:	f000 8098 	beq.w	407f16 <_vfiprintf_r+0xa7a>
  407de6:	2a02      	cmp	r2, #2
  407de8:	d10d      	bne.n	407e06 <_vfiprintf_r+0x96a>
  407dea:	9302      	str	r3, [sp, #8]
  407dec:	2600      	movs	r6, #0
  407dee:	2700      	movs	r7, #0
  407df0:	e5b0      	b.n	407954 <_vfiprintf_r+0x4b8>
  407df2:	aa0f      	add	r2, sp, #60	; 0x3c
  407df4:	9904      	ldr	r1, [sp, #16]
  407df6:	9806      	ldr	r0, [sp, #24]
  407df8:	f7ff fb10 	bl	40741c <__sprint_r.part.0>
  407dfc:	2800      	cmp	r0, #0
  407dfe:	d0c9      	beq.n	407d94 <_vfiprintf_r+0x8f8>
  407e00:	f8dd b010 	ldr.w	fp, [sp, #16]
  407e04:	e797      	b.n	407d36 <_vfiprintf_r+0x89a>
  407e06:	9302      	str	r3, [sp, #8]
  407e08:	2600      	movs	r6, #0
  407e0a:	2700      	movs	r7, #0
  407e0c:	4649      	mov	r1, r9
  407e0e:	e000      	b.n	407e12 <_vfiprintf_r+0x976>
  407e10:	4659      	mov	r1, fp
  407e12:	08f2      	lsrs	r2, r6, #3
  407e14:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  407e18:	08f8      	lsrs	r0, r7, #3
  407e1a:	f006 0307 	and.w	r3, r6, #7
  407e1e:	4607      	mov	r7, r0
  407e20:	4616      	mov	r6, r2
  407e22:	3330      	adds	r3, #48	; 0x30
  407e24:	ea56 0207 	orrs.w	r2, r6, r7
  407e28:	f801 3c01 	strb.w	r3, [r1, #-1]
  407e2c:	f101 3bff 	add.w	fp, r1, #4294967295
  407e30:	d1ee      	bne.n	407e10 <_vfiprintf_r+0x974>
  407e32:	9a02      	ldr	r2, [sp, #8]
  407e34:	07d6      	lsls	r6, r2, #31
  407e36:	f57f ad9d 	bpl.w	407974 <_vfiprintf_r+0x4d8>
  407e3a:	2b30      	cmp	r3, #48	; 0x30
  407e3c:	f43f ad9a 	beq.w	407974 <_vfiprintf_r+0x4d8>
  407e40:	3902      	subs	r1, #2
  407e42:	2330      	movs	r3, #48	; 0x30
  407e44:	f80b 3c01 	strb.w	r3, [fp, #-1]
  407e48:	eba9 0301 	sub.w	r3, r9, r1
  407e4c:	9305      	str	r3, [sp, #20]
  407e4e:	468b      	mov	fp, r1
  407e50:	e476      	b.n	407740 <_vfiprintf_r+0x2a4>
  407e52:	9b03      	ldr	r3, [sp, #12]
  407e54:	9a08      	ldr	r2, [sp, #32]
  407e56:	428a      	cmp	r2, r1
  407e58:	bfac      	ite	ge
  407e5a:	189b      	addge	r3, r3, r2
  407e5c:	185b      	addlt	r3, r3, r1
  407e5e:	9303      	str	r3, [sp, #12]
  407e60:	e798      	b.n	407d94 <_vfiprintf_r+0x8f8>
  407e62:	2202      	movs	r2, #2
  407e64:	e44d      	b.n	407702 <_vfiprintf_r+0x266>
  407e66:	2f00      	cmp	r7, #0
  407e68:	bf08      	it	eq
  407e6a:	2e0a      	cmpeq	r6, #10
  407e6c:	d352      	bcc.n	407f14 <_vfiprintf_r+0xa78>
  407e6e:	46cb      	mov	fp, r9
  407e70:	4630      	mov	r0, r6
  407e72:	4639      	mov	r1, r7
  407e74:	220a      	movs	r2, #10
  407e76:	2300      	movs	r3, #0
  407e78:	f001 fbc6 	bl	409608 <__aeabi_uldivmod>
  407e7c:	3230      	adds	r2, #48	; 0x30
  407e7e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  407e82:	4630      	mov	r0, r6
  407e84:	4639      	mov	r1, r7
  407e86:	2300      	movs	r3, #0
  407e88:	220a      	movs	r2, #10
  407e8a:	f001 fbbd 	bl	409608 <__aeabi_uldivmod>
  407e8e:	4606      	mov	r6, r0
  407e90:	460f      	mov	r7, r1
  407e92:	ea56 0307 	orrs.w	r3, r6, r7
  407e96:	d1eb      	bne.n	407e70 <_vfiprintf_r+0x9d4>
  407e98:	e56c      	b.n	407974 <_vfiprintf_r+0x4d8>
  407e9a:	9405      	str	r4, [sp, #20]
  407e9c:	46cb      	mov	fp, r9
  407e9e:	e44f      	b.n	407740 <_vfiprintf_r+0x2a4>
  407ea0:	aa0f      	add	r2, sp, #60	; 0x3c
  407ea2:	9904      	ldr	r1, [sp, #16]
  407ea4:	9806      	ldr	r0, [sp, #24]
  407ea6:	f7ff fab9 	bl	40741c <__sprint_r.part.0>
  407eaa:	2800      	cmp	r0, #0
  407eac:	d1a8      	bne.n	407e00 <_vfiprintf_r+0x964>
  407eae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407eb0:	46ca      	mov	sl, r9
  407eb2:	e75e      	b.n	407d72 <_vfiprintf_r+0x8d6>
  407eb4:	aa0f      	add	r2, sp, #60	; 0x3c
  407eb6:	9904      	ldr	r1, [sp, #16]
  407eb8:	9806      	ldr	r0, [sp, #24]
  407eba:	f7ff faaf 	bl	40741c <__sprint_r.part.0>
  407ebe:	2800      	cmp	r0, #0
  407ec0:	d19e      	bne.n	407e00 <_vfiprintf_r+0x964>
  407ec2:	46ca      	mov	sl, r9
  407ec4:	f7ff bbc0 	b.w	407648 <_vfiprintf_r+0x1ac>
  407ec8:	00409c4c 	.word	0x00409c4c
  407ecc:	00409c3c 	.word	0x00409c3c
  407ed0:	3104      	adds	r1, #4
  407ed2:	6816      	ldr	r6, [r2, #0]
  407ed4:	9107      	str	r1, [sp, #28]
  407ed6:	2201      	movs	r2, #1
  407ed8:	2700      	movs	r7, #0
  407eda:	e412      	b.n	407702 <_vfiprintf_r+0x266>
  407edc:	9807      	ldr	r0, [sp, #28]
  407ede:	4601      	mov	r1, r0
  407ee0:	3104      	adds	r1, #4
  407ee2:	6806      	ldr	r6, [r0, #0]
  407ee4:	9107      	str	r1, [sp, #28]
  407ee6:	2700      	movs	r7, #0
  407ee8:	e40b      	b.n	407702 <_vfiprintf_r+0x266>
  407eea:	680e      	ldr	r6, [r1, #0]
  407eec:	3104      	adds	r1, #4
  407eee:	9107      	str	r1, [sp, #28]
  407ef0:	2700      	movs	r7, #0
  407ef2:	e591      	b.n	407a18 <_vfiprintf_r+0x57c>
  407ef4:	9907      	ldr	r1, [sp, #28]
  407ef6:	680e      	ldr	r6, [r1, #0]
  407ef8:	460a      	mov	r2, r1
  407efa:	17f7      	asrs	r7, r6, #31
  407efc:	3204      	adds	r2, #4
  407efe:	9207      	str	r2, [sp, #28]
  407f00:	4630      	mov	r0, r6
  407f02:	4639      	mov	r1, r7
  407f04:	e50f      	b.n	407926 <_vfiprintf_r+0x48a>
  407f06:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  407f0a:	f000 fe7f 	bl	408c0c <__retarget_lock_release_recursive>
  407f0e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  407f12:	e71a      	b.n	407d4a <_vfiprintf_r+0x8ae>
  407f14:	9b02      	ldr	r3, [sp, #8]
  407f16:	9302      	str	r3, [sp, #8]
  407f18:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  407f1c:	3630      	adds	r6, #48	; 0x30
  407f1e:	2301      	movs	r3, #1
  407f20:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  407f24:	9305      	str	r3, [sp, #20]
  407f26:	e40b      	b.n	407740 <_vfiprintf_r+0x2a4>
  407f28:	aa0f      	add	r2, sp, #60	; 0x3c
  407f2a:	9904      	ldr	r1, [sp, #16]
  407f2c:	9806      	ldr	r0, [sp, #24]
  407f2e:	f7ff fa75 	bl	40741c <__sprint_r.part.0>
  407f32:	2800      	cmp	r0, #0
  407f34:	f47f af64 	bne.w	407e00 <_vfiprintf_r+0x964>
  407f38:	9910      	ldr	r1, [sp, #64]	; 0x40
  407f3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407f3c:	1c48      	adds	r0, r1, #1
  407f3e:	46ca      	mov	sl, r9
  407f40:	e651      	b.n	407be6 <_vfiprintf_r+0x74a>
  407f42:	aa0f      	add	r2, sp, #60	; 0x3c
  407f44:	9904      	ldr	r1, [sp, #16]
  407f46:	9806      	ldr	r0, [sp, #24]
  407f48:	f7ff fa68 	bl	40741c <__sprint_r.part.0>
  407f4c:	2800      	cmp	r0, #0
  407f4e:	f47f af57 	bne.w	407e00 <_vfiprintf_r+0x964>
  407f52:	9910      	ldr	r1, [sp, #64]	; 0x40
  407f54:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407f56:	1c48      	adds	r0, r1, #1
  407f58:	46ca      	mov	sl, r9
  407f5a:	e448      	b.n	4077ee <_vfiprintf_r+0x352>
  407f5c:	2a00      	cmp	r2, #0
  407f5e:	f040 8091 	bne.w	408084 <_vfiprintf_r+0xbe8>
  407f62:	2001      	movs	r0, #1
  407f64:	4611      	mov	r1, r2
  407f66:	46ca      	mov	sl, r9
  407f68:	e641      	b.n	407bee <_vfiprintf_r+0x752>
  407f6a:	aa0f      	add	r2, sp, #60	; 0x3c
  407f6c:	9904      	ldr	r1, [sp, #16]
  407f6e:	9806      	ldr	r0, [sp, #24]
  407f70:	f7ff fa54 	bl	40741c <__sprint_r.part.0>
  407f74:	2800      	cmp	r0, #0
  407f76:	f47f af43 	bne.w	407e00 <_vfiprintf_r+0x964>
  407f7a:	9810      	ldr	r0, [sp, #64]	; 0x40
  407f7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407f7e:	3001      	adds	r0, #1
  407f80:	46ca      	mov	sl, r9
  407f82:	e667      	b.n	407c54 <_vfiprintf_r+0x7b8>
  407f84:	46d3      	mov	fp, sl
  407f86:	e6d6      	b.n	407d36 <_vfiprintf_r+0x89a>
  407f88:	9e07      	ldr	r6, [sp, #28]
  407f8a:	3607      	adds	r6, #7
  407f8c:	f026 0207 	bic.w	r2, r6, #7
  407f90:	f102 0108 	add.w	r1, r2, #8
  407f94:	e9d2 6700 	ldrd	r6, r7, [r2]
  407f98:	9107      	str	r1, [sp, #28]
  407f9a:	2201      	movs	r2, #1
  407f9c:	f7ff bbb1 	b.w	407702 <_vfiprintf_r+0x266>
  407fa0:	9e07      	ldr	r6, [sp, #28]
  407fa2:	3607      	adds	r6, #7
  407fa4:	f026 0607 	bic.w	r6, r6, #7
  407fa8:	e9d6 0100 	ldrd	r0, r1, [r6]
  407fac:	f106 0208 	add.w	r2, r6, #8
  407fb0:	9207      	str	r2, [sp, #28]
  407fb2:	4606      	mov	r6, r0
  407fb4:	460f      	mov	r7, r1
  407fb6:	e4b6      	b.n	407926 <_vfiprintf_r+0x48a>
  407fb8:	9e07      	ldr	r6, [sp, #28]
  407fba:	3607      	adds	r6, #7
  407fbc:	f026 0207 	bic.w	r2, r6, #7
  407fc0:	f102 0108 	add.w	r1, r2, #8
  407fc4:	e9d2 6700 	ldrd	r6, r7, [r2]
  407fc8:	9107      	str	r1, [sp, #28]
  407fca:	2200      	movs	r2, #0
  407fcc:	f7ff bb99 	b.w	407702 <_vfiprintf_r+0x266>
  407fd0:	9e07      	ldr	r6, [sp, #28]
  407fd2:	3607      	adds	r6, #7
  407fd4:	f026 0107 	bic.w	r1, r6, #7
  407fd8:	f101 0008 	add.w	r0, r1, #8
  407fdc:	9007      	str	r0, [sp, #28]
  407fde:	e9d1 6700 	ldrd	r6, r7, [r1]
  407fe2:	e519      	b.n	407a18 <_vfiprintf_r+0x57c>
  407fe4:	46cb      	mov	fp, r9
  407fe6:	f7ff bbab 	b.w	407740 <_vfiprintf_r+0x2a4>
  407fea:	252d      	movs	r5, #45	; 0x2d
  407fec:	4276      	negs	r6, r6
  407fee:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  407ff2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407ff6:	2201      	movs	r2, #1
  407ff8:	f7ff bb88 	b.w	40770c <_vfiprintf_r+0x270>
  407ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407ffe:	b9b3      	cbnz	r3, 40802e <_vfiprintf_r+0xb92>
  408000:	4611      	mov	r1, r2
  408002:	2001      	movs	r0, #1
  408004:	46ca      	mov	sl, r9
  408006:	e5f2      	b.n	407bee <_vfiprintf_r+0x752>
  408008:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40800c:	f000 fdfe 	bl	408c0c <__retarget_lock_release_recursive>
  408010:	f04f 33ff 	mov.w	r3, #4294967295
  408014:	9303      	str	r3, [sp, #12]
  408016:	f7ff bb50 	b.w	4076ba <_vfiprintf_r+0x21e>
  40801a:	aa0f      	add	r2, sp, #60	; 0x3c
  40801c:	9904      	ldr	r1, [sp, #16]
  40801e:	9806      	ldr	r0, [sp, #24]
  408020:	f7ff f9fc 	bl	40741c <__sprint_r.part.0>
  408024:	2800      	cmp	r0, #0
  408026:	f47f aeeb 	bne.w	407e00 <_vfiprintf_r+0x964>
  40802a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40802c:	e6a9      	b.n	407d82 <_vfiprintf_r+0x8e6>
  40802e:	ab0e      	add	r3, sp, #56	; 0x38
  408030:	2202      	movs	r2, #2
  408032:	931c      	str	r3, [sp, #112]	; 0x70
  408034:	921d      	str	r2, [sp, #116]	; 0x74
  408036:	2001      	movs	r0, #1
  408038:	46ca      	mov	sl, r9
  40803a:	e5d0      	b.n	407bde <_vfiprintf_r+0x742>
  40803c:	aa0f      	add	r2, sp, #60	; 0x3c
  40803e:	9904      	ldr	r1, [sp, #16]
  408040:	9806      	ldr	r0, [sp, #24]
  408042:	f7ff f9eb 	bl	40741c <__sprint_r.part.0>
  408046:	2800      	cmp	r0, #0
  408048:	f47f aeda 	bne.w	407e00 <_vfiprintf_r+0x964>
  40804c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40804e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408050:	1c48      	adds	r0, r1, #1
  408052:	46ca      	mov	sl, r9
  408054:	e5a4      	b.n	407ba0 <_vfiprintf_r+0x704>
  408056:	9a07      	ldr	r2, [sp, #28]
  408058:	9903      	ldr	r1, [sp, #12]
  40805a:	6813      	ldr	r3, [r2, #0]
  40805c:	17cd      	asrs	r5, r1, #31
  40805e:	4608      	mov	r0, r1
  408060:	3204      	adds	r2, #4
  408062:	4629      	mov	r1, r5
  408064:	9207      	str	r2, [sp, #28]
  408066:	e9c3 0100 	strd	r0, r1, [r3]
  40806a:	f7ff ba54 	b.w	407516 <_vfiprintf_r+0x7a>
  40806e:	4658      	mov	r0, fp
  408070:	9607      	str	r6, [sp, #28]
  408072:	9302      	str	r3, [sp, #8]
  408074:	f7ff f964 	bl	407340 <strlen>
  408078:	2400      	movs	r4, #0
  40807a:	9005      	str	r0, [sp, #20]
  40807c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408080:	f7ff bb5e 	b.w	407740 <_vfiprintf_r+0x2a4>
  408084:	aa0f      	add	r2, sp, #60	; 0x3c
  408086:	9904      	ldr	r1, [sp, #16]
  408088:	9806      	ldr	r0, [sp, #24]
  40808a:	f7ff f9c7 	bl	40741c <__sprint_r.part.0>
  40808e:	2800      	cmp	r0, #0
  408090:	f47f aeb6 	bne.w	407e00 <_vfiprintf_r+0x964>
  408094:	9910      	ldr	r1, [sp, #64]	; 0x40
  408096:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408098:	1c48      	adds	r0, r1, #1
  40809a:	46ca      	mov	sl, r9
  40809c:	e5a7      	b.n	407bee <_vfiprintf_r+0x752>
  40809e:	9910      	ldr	r1, [sp, #64]	; 0x40
  4080a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4080a2:	4e20      	ldr	r6, [pc, #128]	; (408124 <_vfiprintf_r+0xc88>)
  4080a4:	3101      	adds	r1, #1
  4080a6:	f7ff bb90 	b.w	4077ca <_vfiprintf_r+0x32e>
  4080aa:	2c06      	cmp	r4, #6
  4080ac:	bf28      	it	cs
  4080ae:	2406      	movcs	r4, #6
  4080b0:	9405      	str	r4, [sp, #20]
  4080b2:	9607      	str	r6, [sp, #28]
  4080b4:	9401      	str	r4, [sp, #4]
  4080b6:	f8df b070 	ldr.w	fp, [pc, #112]	; 408128 <_vfiprintf_r+0xc8c>
  4080ba:	e4d5      	b.n	407a68 <_vfiprintf_r+0x5cc>
  4080bc:	9810      	ldr	r0, [sp, #64]	; 0x40
  4080be:	4e19      	ldr	r6, [pc, #100]	; (408124 <_vfiprintf_r+0xc88>)
  4080c0:	3001      	adds	r0, #1
  4080c2:	e603      	b.n	407ccc <_vfiprintf_r+0x830>
  4080c4:	9405      	str	r4, [sp, #20]
  4080c6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4080ca:	9607      	str	r6, [sp, #28]
  4080cc:	9302      	str	r3, [sp, #8]
  4080ce:	4604      	mov	r4, r0
  4080d0:	f7ff bb36 	b.w	407740 <_vfiprintf_r+0x2a4>
  4080d4:	4686      	mov	lr, r0
  4080d6:	f7ff bbce 	b.w	407876 <_vfiprintf_r+0x3da>
  4080da:	9806      	ldr	r0, [sp, #24]
  4080dc:	aa0f      	add	r2, sp, #60	; 0x3c
  4080de:	4659      	mov	r1, fp
  4080e0:	f7ff f99c 	bl	40741c <__sprint_r.part.0>
  4080e4:	2800      	cmp	r0, #0
  4080e6:	f43f ae24 	beq.w	407d32 <_vfiprintf_r+0x896>
  4080ea:	e624      	b.n	407d36 <_vfiprintf_r+0x89a>
  4080ec:	9907      	ldr	r1, [sp, #28]
  4080ee:	f898 2001 	ldrb.w	r2, [r8, #1]
  4080f2:	680c      	ldr	r4, [r1, #0]
  4080f4:	3104      	adds	r1, #4
  4080f6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4080fa:	46b8      	mov	r8, r7
  4080fc:	9107      	str	r1, [sp, #28]
  4080fe:	f7ff ba3f 	b.w	407580 <_vfiprintf_r+0xe4>
  408102:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408106:	e43c      	b.n	407982 <_vfiprintf_r+0x4e6>
  408108:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40810c:	e521      	b.n	407b52 <_vfiprintf_r+0x6b6>
  40810e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408112:	f7ff bbf4 	b.w	4078fe <_vfiprintf_r+0x462>
  408116:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40811a:	e491      	b.n	407a40 <_vfiprintf_r+0x5a4>
  40811c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408120:	e469      	b.n	4079f6 <_vfiprintf_r+0x55a>
  408122:	bf00      	nop
  408124:	00409c3c 	.word	0x00409c3c
  408128:	00409c34 	.word	0x00409c34

0040812c <__sbprintf>:
  40812c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408130:	460c      	mov	r4, r1
  408132:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  408136:	8989      	ldrh	r1, [r1, #12]
  408138:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40813a:	89e5      	ldrh	r5, [r4, #14]
  40813c:	9619      	str	r6, [sp, #100]	; 0x64
  40813e:	f021 0102 	bic.w	r1, r1, #2
  408142:	4606      	mov	r6, r0
  408144:	69e0      	ldr	r0, [r4, #28]
  408146:	f8ad 100c 	strh.w	r1, [sp, #12]
  40814a:	4617      	mov	r7, r2
  40814c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  408150:	6a62      	ldr	r2, [r4, #36]	; 0x24
  408152:	f8ad 500e 	strh.w	r5, [sp, #14]
  408156:	4698      	mov	r8, r3
  408158:	ad1a      	add	r5, sp, #104	; 0x68
  40815a:	2300      	movs	r3, #0
  40815c:	9007      	str	r0, [sp, #28]
  40815e:	a816      	add	r0, sp, #88	; 0x58
  408160:	9209      	str	r2, [sp, #36]	; 0x24
  408162:	9306      	str	r3, [sp, #24]
  408164:	9500      	str	r5, [sp, #0]
  408166:	9504      	str	r5, [sp, #16]
  408168:	9102      	str	r1, [sp, #8]
  40816a:	9105      	str	r1, [sp, #20]
  40816c:	f000 fd48 	bl	408c00 <__retarget_lock_init_recursive>
  408170:	4643      	mov	r3, r8
  408172:	463a      	mov	r2, r7
  408174:	4669      	mov	r1, sp
  408176:	4630      	mov	r0, r6
  408178:	f7ff f990 	bl	40749c <_vfiprintf_r>
  40817c:	1e05      	subs	r5, r0, #0
  40817e:	db07      	blt.n	408190 <__sbprintf+0x64>
  408180:	4630      	mov	r0, r6
  408182:	4669      	mov	r1, sp
  408184:	f000 f928 	bl	4083d8 <_fflush_r>
  408188:	2800      	cmp	r0, #0
  40818a:	bf18      	it	ne
  40818c:	f04f 35ff 	movne.w	r5, #4294967295
  408190:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  408194:	065b      	lsls	r3, r3, #25
  408196:	d503      	bpl.n	4081a0 <__sbprintf+0x74>
  408198:	89a3      	ldrh	r3, [r4, #12]
  40819a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40819e:	81a3      	strh	r3, [r4, #12]
  4081a0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4081a2:	f000 fd2f 	bl	408c04 <__retarget_lock_close_recursive>
  4081a6:	4628      	mov	r0, r5
  4081a8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4081ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004081b0 <__swsetup_r>:
  4081b0:	b538      	push	{r3, r4, r5, lr}
  4081b2:	4b30      	ldr	r3, [pc, #192]	; (408274 <__swsetup_r+0xc4>)
  4081b4:	681b      	ldr	r3, [r3, #0]
  4081b6:	4605      	mov	r5, r0
  4081b8:	460c      	mov	r4, r1
  4081ba:	b113      	cbz	r3, 4081c2 <__swsetup_r+0x12>
  4081bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4081be:	2a00      	cmp	r2, #0
  4081c0:	d038      	beq.n	408234 <__swsetup_r+0x84>
  4081c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4081c6:	b293      	uxth	r3, r2
  4081c8:	0718      	lsls	r0, r3, #28
  4081ca:	d50c      	bpl.n	4081e6 <__swsetup_r+0x36>
  4081cc:	6920      	ldr	r0, [r4, #16]
  4081ce:	b1a8      	cbz	r0, 4081fc <__swsetup_r+0x4c>
  4081d0:	f013 0201 	ands.w	r2, r3, #1
  4081d4:	d01e      	beq.n	408214 <__swsetup_r+0x64>
  4081d6:	6963      	ldr	r3, [r4, #20]
  4081d8:	2200      	movs	r2, #0
  4081da:	425b      	negs	r3, r3
  4081dc:	61a3      	str	r3, [r4, #24]
  4081de:	60a2      	str	r2, [r4, #8]
  4081e0:	b1f0      	cbz	r0, 408220 <__swsetup_r+0x70>
  4081e2:	2000      	movs	r0, #0
  4081e4:	bd38      	pop	{r3, r4, r5, pc}
  4081e6:	06d9      	lsls	r1, r3, #27
  4081e8:	d53c      	bpl.n	408264 <__swsetup_r+0xb4>
  4081ea:	0758      	lsls	r0, r3, #29
  4081ec:	d426      	bmi.n	40823c <__swsetup_r+0x8c>
  4081ee:	6920      	ldr	r0, [r4, #16]
  4081f0:	f042 0308 	orr.w	r3, r2, #8
  4081f4:	81a3      	strh	r3, [r4, #12]
  4081f6:	b29b      	uxth	r3, r3
  4081f8:	2800      	cmp	r0, #0
  4081fa:	d1e9      	bne.n	4081d0 <__swsetup_r+0x20>
  4081fc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  408200:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  408204:	d0e4      	beq.n	4081d0 <__swsetup_r+0x20>
  408206:	4628      	mov	r0, r5
  408208:	4621      	mov	r1, r4
  40820a:	f000 fd2f 	bl	408c6c <__smakebuf_r>
  40820e:	89a3      	ldrh	r3, [r4, #12]
  408210:	6920      	ldr	r0, [r4, #16]
  408212:	e7dd      	b.n	4081d0 <__swsetup_r+0x20>
  408214:	0799      	lsls	r1, r3, #30
  408216:	bf58      	it	pl
  408218:	6962      	ldrpl	r2, [r4, #20]
  40821a:	60a2      	str	r2, [r4, #8]
  40821c:	2800      	cmp	r0, #0
  40821e:	d1e0      	bne.n	4081e2 <__swsetup_r+0x32>
  408220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408224:	061a      	lsls	r2, r3, #24
  408226:	d5dd      	bpl.n	4081e4 <__swsetup_r+0x34>
  408228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40822c:	81a3      	strh	r3, [r4, #12]
  40822e:	f04f 30ff 	mov.w	r0, #4294967295
  408232:	bd38      	pop	{r3, r4, r5, pc}
  408234:	4618      	mov	r0, r3
  408236:	f000 f927 	bl	408488 <__sinit>
  40823a:	e7c2      	b.n	4081c2 <__swsetup_r+0x12>
  40823c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40823e:	b151      	cbz	r1, 408256 <__swsetup_r+0xa6>
  408240:	f104 0340 	add.w	r3, r4, #64	; 0x40
  408244:	4299      	cmp	r1, r3
  408246:	d004      	beq.n	408252 <__swsetup_r+0xa2>
  408248:	4628      	mov	r0, r5
  40824a:	f000 fa43 	bl	4086d4 <_free_r>
  40824e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408252:	2300      	movs	r3, #0
  408254:	6323      	str	r3, [r4, #48]	; 0x30
  408256:	2300      	movs	r3, #0
  408258:	6920      	ldr	r0, [r4, #16]
  40825a:	6063      	str	r3, [r4, #4]
  40825c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  408260:	6020      	str	r0, [r4, #0]
  408262:	e7c5      	b.n	4081f0 <__swsetup_r+0x40>
  408264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  408268:	2309      	movs	r3, #9
  40826a:	602b      	str	r3, [r5, #0]
  40826c:	f04f 30ff 	mov.w	r0, #4294967295
  408270:	81a2      	strh	r2, [r4, #12]
  408272:	bd38      	pop	{r3, r4, r5, pc}
  408274:	20400014 	.word	0x20400014

00408278 <register_fini>:
  408278:	4b02      	ldr	r3, [pc, #8]	; (408284 <register_fini+0xc>)
  40827a:	b113      	cbz	r3, 408282 <register_fini+0xa>
  40827c:	4802      	ldr	r0, [pc, #8]	; (408288 <register_fini+0x10>)
  40827e:	f000 b805 	b.w	40828c <atexit>
  408282:	4770      	bx	lr
  408284:	00000000 	.word	0x00000000
  408288:	004084f9 	.word	0x004084f9

0040828c <atexit>:
  40828c:	2300      	movs	r3, #0
  40828e:	4601      	mov	r1, r0
  408290:	461a      	mov	r2, r3
  408292:	4618      	mov	r0, r3
  408294:	f001 b890 	b.w	4093b8 <__register_exitproc>

00408298 <__sflush_r>:
  408298:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40829c:	b29a      	uxth	r2, r3
  40829e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4082a2:	460d      	mov	r5, r1
  4082a4:	0711      	lsls	r1, r2, #28
  4082a6:	4680      	mov	r8, r0
  4082a8:	d43a      	bmi.n	408320 <__sflush_r+0x88>
  4082aa:	686a      	ldr	r2, [r5, #4]
  4082ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4082b0:	2a00      	cmp	r2, #0
  4082b2:	81ab      	strh	r3, [r5, #12]
  4082b4:	dd6f      	ble.n	408396 <__sflush_r+0xfe>
  4082b6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4082b8:	2c00      	cmp	r4, #0
  4082ba:	d049      	beq.n	408350 <__sflush_r+0xb8>
  4082bc:	2200      	movs	r2, #0
  4082be:	b29b      	uxth	r3, r3
  4082c0:	f8d8 6000 	ldr.w	r6, [r8]
  4082c4:	f8c8 2000 	str.w	r2, [r8]
  4082c8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4082cc:	d067      	beq.n	40839e <__sflush_r+0x106>
  4082ce:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4082d0:	075f      	lsls	r7, r3, #29
  4082d2:	d505      	bpl.n	4082e0 <__sflush_r+0x48>
  4082d4:	6869      	ldr	r1, [r5, #4]
  4082d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4082d8:	1a52      	subs	r2, r2, r1
  4082da:	b10b      	cbz	r3, 4082e0 <__sflush_r+0x48>
  4082dc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4082de:	1ad2      	subs	r2, r2, r3
  4082e0:	2300      	movs	r3, #0
  4082e2:	69e9      	ldr	r1, [r5, #28]
  4082e4:	4640      	mov	r0, r8
  4082e6:	47a0      	blx	r4
  4082e8:	1c44      	adds	r4, r0, #1
  4082ea:	d03c      	beq.n	408366 <__sflush_r+0xce>
  4082ec:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4082f0:	692a      	ldr	r2, [r5, #16]
  4082f2:	602a      	str	r2, [r5, #0]
  4082f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4082f8:	2200      	movs	r2, #0
  4082fa:	81ab      	strh	r3, [r5, #12]
  4082fc:	04db      	lsls	r3, r3, #19
  4082fe:	606a      	str	r2, [r5, #4]
  408300:	d447      	bmi.n	408392 <__sflush_r+0xfa>
  408302:	6b29      	ldr	r1, [r5, #48]	; 0x30
  408304:	f8c8 6000 	str.w	r6, [r8]
  408308:	b311      	cbz	r1, 408350 <__sflush_r+0xb8>
  40830a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40830e:	4299      	cmp	r1, r3
  408310:	d002      	beq.n	408318 <__sflush_r+0x80>
  408312:	4640      	mov	r0, r8
  408314:	f000 f9de 	bl	4086d4 <_free_r>
  408318:	2000      	movs	r0, #0
  40831a:	6328      	str	r0, [r5, #48]	; 0x30
  40831c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408320:	692e      	ldr	r6, [r5, #16]
  408322:	b1ae      	cbz	r6, 408350 <__sflush_r+0xb8>
  408324:	682c      	ldr	r4, [r5, #0]
  408326:	602e      	str	r6, [r5, #0]
  408328:	0791      	lsls	r1, r2, #30
  40832a:	bf0c      	ite	eq
  40832c:	696b      	ldreq	r3, [r5, #20]
  40832e:	2300      	movne	r3, #0
  408330:	1ba4      	subs	r4, r4, r6
  408332:	60ab      	str	r3, [r5, #8]
  408334:	e00a      	b.n	40834c <__sflush_r+0xb4>
  408336:	4623      	mov	r3, r4
  408338:	4632      	mov	r2, r6
  40833a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40833c:	69e9      	ldr	r1, [r5, #28]
  40833e:	4640      	mov	r0, r8
  408340:	47b8      	blx	r7
  408342:	2800      	cmp	r0, #0
  408344:	eba4 0400 	sub.w	r4, r4, r0
  408348:	4406      	add	r6, r0
  40834a:	dd04      	ble.n	408356 <__sflush_r+0xbe>
  40834c:	2c00      	cmp	r4, #0
  40834e:	dcf2      	bgt.n	408336 <__sflush_r+0x9e>
  408350:	2000      	movs	r0, #0
  408352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408356:	89ab      	ldrh	r3, [r5, #12]
  408358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40835c:	81ab      	strh	r3, [r5, #12]
  40835e:	f04f 30ff 	mov.w	r0, #4294967295
  408362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408366:	f8d8 4000 	ldr.w	r4, [r8]
  40836a:	2c1d      	cmp	r4, #29
  40836c:	d8f3      	bhi.n	408356 <__sflush_r+0xbe>
  40836e:	4b19      	ldr	r3, [pc, #100]	; (4083d4 <__sflush_r+0x13c>)
  408370:	40e3      	lsrs	r3, r4
  408372:	43db      	mvns	r3, r3
  408374:	f013 0301 	ands.w	r3, r3, #1
  408378:	d1ed      	bne.n	408356 <__sflush_r+0xbe>
  40837a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40837e:	606b      	str	r3, [r5, #4]
  408380:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  408384:	6929      	ldr	r1, [r5, #16]
  408386:	81ab      	strh	r3, [r5, #12]
  408388:	04da      	lsls	r2, r3, #19
  40838a:	6029      	str	r1, [r5, #0]
  40838c:	d5b9      	bpl.n	408302 <__sflush_r+0x6a>
  40838e:	2c00      	cmp	r4, #0
  408390:	d1b7      	bne.n	408302 <__sflush_r+0x6a>
  408392:	6528      	str	r0, [r5, #80]	; 0x50
  408394:	e7b5      	b.n	408302 <__sflush_r+0x6a>
  408396:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  408398:	2a00      	cmp	r2, #0
  40839a:	dc8c      	bgt.n	4082b6 <__sflush_r+0x1e>
  40839c:	e7d8      	b.n	408350 <__sflush_r+0xb8>
  40839e:	2301      	movs	r3, #1
  4083a0:	69e9      	ldr	r1, [r5, #28]
  4083a2:	4640      	mov	r0, r8
  4083a4:	47a0      	blx	r4
  4083a6:	1c43      	adds	r3, r0, #1
  4083a8:	4602      	mov	r2, r0
  4083aa:	d002      	beq.n	4083b2 <__sflush_r+0x11a>
  4083ac:	89ab      	ldrh	r3, [r5, #12]
  4083ae:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4083b0:	e78e      	b.n	4082d0 <__sflush_r+0x38>
  4083b2:	f8d8 3000 	ldr.w	r3, [r8]
  4083b6:	2b00      	cmp	r3, #0
  4083b8:	d0f8      	beq.n	4083ac <__sflush_r+0x114>
  4083ba:	2b1d      	cmp	r3, #29
  4083bc:	d001      	beq.n	4083c2 <__sflush_r+0x12a>
  4083be:	2b16      	cmp	r3, #22
  4083c0:	d102      	bne.n	4083c8 <__sflush_r+0x130>
  4083c2:	f8c8 6000 	str.w	r6, [r8]
  4083c6:	e7c3      	b.n	408350 <__sflush_r+0xb8>
  4083c8:	89ab      	ldrh	r3, [r5, #12]
  4083ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4083ce:	81ab      	strh	r3, [r5, #12]
  4083d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4083d4:	20400001 	.word	0x20400001

004083d8 <_fflush_r>:
  4083d8:	b538      	push	{r3, r4, r5, lr}
  4083da:	460d      	mov	r5, r1
  4083dc:	4604      	mov	r4, r0
  4083de:	b108      	cbz	r0, 4083e4 <_fflush_r+0xc>
  4083e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4083e2:	b1bb      	cbz	r3, 408414 <_fflush_r+0x3c>
  4083e4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4083e8:	b188      	cbz	r0, 40840e <_fflush_r+0x36>
  4083ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4083ec:	07db      	lsls	r3, r3, #31
  4083ee:	d401      	bmi.n	4083f4 <_fflush_r+0x1c>
  4083f0:	0581      	lsls	r1, r0, #22
  4083f2:	d517      	bpl.n	408424 <_fflush_r+0x4c>
  4083f4:	4620      	mov	r0, r4
  4083f6:	4629      	mov	r1, r5
  4083f8:	f7ff ff4e 	bl	408298 <__sflush_r>
  4083fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4083fe:	07da      	lsls	r2, r3, #31
  408400:	4604      	mov	r4, r0
  408402:	d402      	bmi.n	40840a <_fflush_r+0x32>
  408404:	89ab      	ldrh	r3, [r5, #12]
  408406:	059b      	lsls	r3, r3, #22
  408408:	d507      	bpl.n	40841a <_fflush_r+0x42>
  40840a:	4620      	mov	r0, r4
  40840c:	bd38      	pop	{r3, r4, r5, pc}
  40840e:	4604      	mov	r4, r0
  408410:	4620      	mov	r0, r4
  408412:	bd38      	pop	{r3, r4, r5, pc}
  408414:	f000 f838 	bl	408488 <__sinit>
  408418:	e7e4      	b.n	4083e4 <_fflush_r+0xc>
  40841a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40841c:	f000 fbf6 	bl	408c0c <__retarget_lock_release_recursive>
  408420:	4620      	mov	r0, r4
  408422:	bd38      	pop	{r3, r4, r5, pc}
  408424:	6da8      	ldr	r0, [r5, #88]	; 0x58
  408426:	f000 fbef 	bl	408c08 <__retarget_lock_acquire_recursive>
  40842a:	e7e3      	b.n	4083f4 <_fflush_r+0x1c>

0040842c <_cleanup_r>:
  40842c:	4901      	ldr	r1, [pc, #4]	; (408434 <_cleanup_r+0x8>)
  40842e:	f000 bbaf 	b.w	408b90 <_fwalk_reent>
  408432:	bf00      	nop
  408434:	004094a1 	.word	0x004094a1

00408438 <std.isra.0>:
  408438:	b510      	push	{r4, lr}
  40843a:	2300      	movs	r3, #0
  40843c:	4604      	mov	r4, r0
  40843e:	8181      	strh	r1, [r0, #12]
  408440:	81c2      	strh	r2, [r0, #14]
  408442:	6003      	str	r3, [r0, #0]
  408444:	6043      	str	r3, [r0, #4]
  408446:	6083      	str	r3, [r0, #8]
  408448:	6643      	str	r3, [r0, #100]	; 0x64
  40844a:	6103      	str	r3, [r0, #16]
  40844c:	6143      	str	r3, [r0, #20]
  40844e:	6183      	str	r3, [r0, #24]
  408450:	4619      	mov	r1, r3
  408452:	2208      	movs	r2, #8
  408454:	305c      	adds	r0, #92	; 0x5c
  408456:	f7fe fe29 	bl	4070ac <memset>
  40845a:	4807      	ldr	r0, [pc, #28]	; (408478 <std.isra.0+0x40>)
  40845c:	4907      	ldr	r1, [pc, #28]	; (40847c <std.isra.0+0x44>)
  40845e:	4a08      	ldr	r2, [pc, #32]	; (408480 <std.isra.0+0x48>)
  408460:	4b08      	ldr	r3, [pc, #32]	; (408484 <std.isra.0+0x4c>)
  408462:	6220      	str	r0, [r4, #32]
  408464:	61e4      	str	r4, [r4, #28]
  408466:	6261      	str	r1, [r4, #36]	; 0x24
  408468:	62a2      	str	r2, [r4, #40]	; 0x28
  40846a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40846c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  408470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  408474:	f000 bbc4 	b.w	408c00 <__retarget_lock_init_recursive>
  408478:	004091e5 	.word	0x004091e5
  40847c:	00409209 	.word	0x00409209
  408480:	00409245 	.word	0x00409245
  408484:	00409265 	.word	0x00409265

00408488 <__sinit>:
  408488:	b510      	push	{r4, lr}
  40848a:	4604      	mov	r4, r0
  40848c:	4812      	ldr	r0, [pc, #72]	; (4084d8 <__sinit+0x50>)
  40848e:	f000 fbbb 	bl	408c08 <__retarget_lock_acquire_recursive>
  408492:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  408494:	b9d2      	cbnz	r2, 4084cc <__sinit+0x44>
  408496:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40849a:	4810      	ldr	r0, [pc, #64]	; (4084dc <__sinit+0x54>)
  40849c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4084a0:	2103      	movs	r1, #3
  4084a2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4084a6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4084a8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4084ac:	6860      	ldr	r0, [r4, #4]
  4084ae:	2104      	movs	r1, #4
  4084b0:	f7ff ffc2 	bl	408438 <std.isra.0>
  4084b4:	2201      	movs	r2, #1
  4084b6:	2109      	movs	r1, #9
  4084b8:	68a0      	ldr	r0, [r4, #8]
  4084ba:	f7ff ffbd 	bl	408438 <std.isra.0>
  4084be:	2202      	movs	r2, #2
  4084c0:	2112      	movs	r1, #18
  4084c2:	68e0      	ldr	r0, [r4, #12]
  4084c4:	f7ff ffb8 	bl	408438 <std.isra.0>
  4084c8:	2301      	movs	r3, #1
  4084ca:	63a3      	str	r3, [r4, #56]	; 0x38
  4084cc:	4802      	ldr	r0, [pc, #8]	; (4084d8 <__sinit+0x50>)
  4084ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4084d2:	f000 bb9b 	b.w	408c0c <__retarget_lock_release_recursive>
  4084d6:	bf00      	nop
  4084d8:	2040ca6c 	.word	0x2040ca6c
  4084dc:	0040842d 	.word	0x0040842d

004084e0 <__sfp_lock_acquire>:
  4084e0:	4801      	ldr	r0, [pc, #4]	; (4084e8 <__sfp_lock_acquire+0x8>)
  4084e2:	f000 bb91 	b.w	408c08 <__retarget_lock_acquire_recursive>
  4084e6:	bf00      	nop
  4084e8:	2040ca80 	.word	0x2040ca80

004084ec <__sfp_lock_release>:
  4084ec:	4801      	ldr	r0, [pc, #4]	; (4084f4 <__sfp_lock_release+0x8>)
  4084ee:	f000 bb8d 	b.w	408c0c <__retarget_lock_release_recursive>
  4084f2:	bf00      	nop
  4084f4:	2040ca80 	.word	0x2040ca80

004084f8 <__libc_fini_array>:
  4084f8:	b538      	push	{r3, r4, r5, lr}
  4084fa:	4c0a      	ldr	r4, [pc, #40]	; (408524 <__libc_fini_array+0x2c>)
  4084fc:	4d0a      	ldr	r5, [pc, #40]	; (408528 <__libc_fini_array+0x30>)
  4084fe:	1b64      	subs	r4, r4, r5
  408500:	10a4      	asrs	r4, r4, #2
  408502:	d00a      	beq.n	40851a <__libc_fini_array+0x22>
  408504:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  408508:	3b01      	subs	r3, #1
  40850a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40850e:	3c01      	subs	r4, #1
  408510:	f855 3904 	ldr.w	r3, [r5], #-4
  408514:	4798      	blx	r3
  408516:	2c00      	cmp	r4, #0
  408518:	d1f9      	bne.n	40850e <__libc_fini_array+0x16>
  40851a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40851e:	f001 bc31 	b.w	409d84 <_fini>
  408522:	bf00      	nop
  408524:	00409d94 	.word	0x00409d94
  408528:	00409d90 	.word	0x00409d90

0040852c <__fputwc>:
  40852c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408530:	b082      	sub	sp, #8
  408532:	4680      	mov	r8, r0
  408534:	4689      	mov	r9, r1
  408536:	4614      	mov	r4, r2
  408538:	f000 fb54 	bl	408be4 <__locale_mb_cur_max>
  40853c:	2801      	cmp	r0, #1
  40853e:	d036      	beq.n	4085ae <__fputwc+0x82>
  408540:	464a      	mov	r2, r9
  408542:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  408546:	a901      	add	r1, sp, #4
  408548:	4640      	mov	r0, r8
  40854a:	f000 fee7 	bl	40931c <_wcrtomb_r>
  40854e:	1c42      	adds	r2, r0, #1
  408550:	4606      	mov	r6, r0
  408552:	d025      	beq.n	4085a0 <__fputwc+0x74>
  408554:	b3a8      	cbz	r0, 4085c2 <__fputwc+0x96>
  408556:	f89d e004 	ldrb.w	lr, [sp, #4]
  40855a:	2500      	movs	r5, #0
  40855c:	f10d 0a04 	add.w	sl, sp, #4
  408560:	e009      	b.n	408576 <__fputwc+0x4a>
  408562:	6823      	ldr	r3, [r4, #0]
  408564:	1c5a      	adds	r2, r3, #1
  408566:	6022      	str	r2, [r4, #0]
  408568:	f883 e000 	strb.w	lr, [r3]
  40856c:	3501      	adds	r5, #1
  40856e:	42b5      	cmp	r5, r6
  408570:	d227      	bcs.n	4085c2 <__fputwc+0x96>
  408572:	f815 e00a 	ldrb.w	lr, [r5, sl]
  408576:	68a3      	ldr	r3, [r4, #8]
  408578:	3b01      	subs	r3, #1
  40857a:	2b00      	cmp	r3, #0
  40857c:	60a3      	str	r3, [r4, #8]
  40857e:	daf0      	bge.n	408562 <__fputwc+0x36>
  408580:	69a7      	ldr	r7, [r4, #24]
  408582:	42bb      	cmp	r3, r7
  408584:	4671      	mov	r1, lr
  408586:	4622      	mov	r2, r4
  408588:	4640      	mov	r0, r8
  40858a:	db02      	blt.n	408592 <__fputwc+0x66>
  40858c:	f1be 0f0a 	cmp.w	lr, #10
  408590:	d1e7      	bne.n	408562 <__fputwc+0x36>
  408592:	f000 fe6b 	bl	40926c <__swbuf_r>
  408596:	1c43      	adds	r3, r0, #1
  408598:	d1e8      	bne.n	40856c <__fputwc+0x40>
  40859a:	b002      	add	sp, #8
  40859c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4085a0:	89a3      	ldrh	r3, [r4, #12]
  4085a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4085a6:	81a3      	strh	r3, [r4, #12]
  4085a8:	b002      	add	sp, #8
  4085aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4085ae:	f109 33ff 	add.w	r3, r9, #4294967295
  4085b2:	2bfe      	cmp	r3, #254	; 0xfe
  4085b4:	d8c4      	bhi.n	408540 <__fputwc+0x14>
  4085b6:	fa5f fe89 	uxtb.w	lr, r9
  4085ba:	4606      	mov	r6, r0
  4085bc:	f88d e004 	strb.w	lr, [sp, #4]
  4085c0:	e7cb      	b.n	40855a <__fputwc+0x2e>
  4085c2:	4648      	mov	r0, r9
  4085c4:	b002      	add	sp, #8
  4085c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4085ca:	bf00      	nop

004085cc <_fputwc_r>:
  4085cc:	b530      	push	{r4, r5, lr}
  4085ce:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4085d0:	f013 0f01 	tst.w	r3, #1
  4085d4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4085d8:	4614      	mov	r4, r2
  4085da:	b083      	sub	sp, #12
  4085dc:	4605      	mov	r5, r0
  4085de:	b29a      	uxth	r2, r3
  4085e0:	d101      	bne.n	4085e6 <_fputwc_r+0x1a>
  4085e2:	0590      	lsls	r0, r2, #22
  4085e4:	d51c      	bpl.n	408620 <_fputwc_r+0x54>
  4085e6:	0490      	lsls	r0, r2, #18
  4085e8:	d406      	bmi.n	4085f8 <_fputwc_r+0x2c>
  4085ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4085ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4085f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4085f4:	81a3      	strh	r3, [r4, #12]
  4085f6:	6662      	str	r2, [r4, #100]	; 0x64
  4085f8:	4628      	mov	r0, r5
  4085fa:	4622      	mov	r2, r4
  4085fc:	f7ff ff96 	bl	40852c <__fputwc>
  408600:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408602:	07da      	lsls	r2, r3, #31
  408604:	4605      	mov	r5, r0
  408606:	d402      	bmi.n	40860e <_fputwc_r+0x42>
  408608:	89a3      	ldrh	r3, [r4, #12]
  40860a:	059b      	lsls	r3, r3, #22
  40860c:	d502      	bpl.n	408614 <_fputwc_r+0x48>
  40860e:	4628      	mov	r0, r5
  408610:	b003      	add	sp, #12
  408612:	bd30      	pop	{r4, r5, pc}
  408614:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408616:	f000 faf9 	bl	408c0c <__retarget_lock_release_recursive>
  40861a:	4628      	mov	r0, r5
  40861c:	b003      	add	sp, #12
  40861e:	bd30      	pop	{r4, r5, pc}
  408620:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408622:	9101      	str	r1, [sp, #4]
  408624:	f000 faf0 	bl	408c08 <__retarget_lock_acquire_recursive>
  408628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40862c:	9901      	ldr	r1, [sp, #4]
  40862e:	b29a      	uxth	r2, r3
  408630:	e7d9      	b.n	4085e6 <_fputwc_r+0x1a>
  408632:	bf00      	nop

00408634 <_malloc_trim_r>:
  408634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408636:	4f24      	ldr	r7, [pc, #144]	; (4086c8 <_malloc_trim_r+0x94>)
  408638:	460c      	mov	r4, r1
  40863a:	4606      	mov	r6, r0
  40863c:	f7fe fd84 	bl	407148 <__malloc_lock>
  408640:	68bb      	ldr	r3, [r7, #8]
  408642:	685d      	ldr	r5, [r3, #4]
  408644:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  408648:	310f      	adds	r1, #15
  40864a:	f025 0503 	bic.w	r5, r5, #3
  40864e:	4429      	add	r1, r5
  408650:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  408654:	f021 010f 	bic.w	r1, r1, #15
  408658:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40865c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  408660:	db07      	blt.n	408672 <_malloc_trim_r+0x3e>
  408662:	2100      	movs	r1, #0
  408664:	4630      	mov	r0, r6
  408666:	f7fe fd7b 	bl	407160 <_sbrk_r>
  40866a:	68bb      	ldr	r3, [r7, #8]
  40866c:	442b      	add	r3, r5
  40866e:	4298      	cmp	r0, r3
  408670:	d004      	beq.n	40867c <_malloc_trim_r+0x48>
  408672:	4630      	mov	r0, r6
  408674:	f7fe fd6e 	bl	407154 <__malloc_unlock>
  408678:	2000      	movs	r0, #0
  40867a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40867c:	4261      	negs	r1, r4
  40867e:	4630      	mov	r0, r6
  408680:	f7fe fd6e 	bl	407160 <_sbrk_r>
  408684:	3001      	adds	r0, #1
  408686:	d00d      	beq.n	4086a4 <_malloc_trim_r+0x70>
  408688:	4b10      	ldr	r3, [pc, #64]	; (4086cc <_malloc_trim_r+0x98>)
  40868a:	68ba      	ldr	r2, [r7, #8]
  40868c:	6819      	ldr	r1, [r3, #0]
  40868e:	1b2d      	subs	r5, r5, r4
  408690:	f045 0501 	orr.w	r5, r5, #1
  408694:	4630      	mov	r0, r6
  408696:	1b09      	subs	r1, r1, r4
  408698:	6055      	str	r5, [r2, #4]
  40869a:	6019      	str	r1, [r3, #0]
  40869c:	f7fe fd5a 	bl	407154 <__malloc_unlock>
  4086a0:	2001      	movs	r0, #1
  4086a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4086a4:	2100      	movs	r1, #0
  4086a6:	4630      	mov	r0, r6
  4086a8:	f7fe fd5a 	bl	407160 <_sbrk_r>
  4086ac:	68ba      	ldr	r2, [r7, #8]
  4086ae:	1a83      	subs	r3, r0, r2
  4086b0:	2b0f      	cmp	r3, #15
  4086b2:	ddde      	ble.n	408672 <_malloc_trim_r+0x3e>
  4086b4:	4c06      	ldr	r4, [pc, #24]	; (4086d0 <_malloc_trim_r+0x9c>)
  4086b6:	4905      	ldr	r1, [pc, #20]	; (4086cc <_malloc_trim_r+0x98>)
  4086b8:	6824      	ldr	r4, [r4, #0]
  4086ba:	f043 0301 	orr.w	r3, r3, #1
  4086be:	1b00      	subs	r0, r0, r4
  4086c0:	6053      	str	r3, [r2, #4]
  4086c2:	6008      	str	r0, [r1, #0]
  4086c4:	e7d5      	b.n	408672 <_malloc_trim_r+0x3e>
  4086c6:	bf00      	nop
  4086c8:	20400440 	.word	0x20400440
  4086cc:	2040c93c 	.word	0x2040c93c
  4086d0:	20400848 	.word	0x20400848

004086d4 <_free_r>:
  4086d4:	2900      	cmp	r1, #0
  4086d6:	d044      	beq.n	408762 <_free_r+0x8e>
  4086d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4086dc:	460d      	mov	r5, r1
  4086de:	4680      	mov	r8, r0
  4086e0:	f7fe fd32 	bl	407148 <__malloc_lock>
  4086e4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4086e8:	4969      	ldr	r1, [pc, #420]	; (408890 <_free_r+0x1bc>)
  4086ea:	f027 0301 	bic.w	r3, r7, #1
  4086ee:	f1a5 0408 	sub.w	r4, r5, #8
  4086f2:	18e2      	adds	r2, r4, r3
  4086f4:	688e      	ldr	r6, [r1, #8]
  4086f6:	6850      	ldr	r0, [r2, #4]
  4086f8:	42b2      	cmp	r2, r6
  4086fa:	f020 0003 	bic.w	r0, r0, #3
  4086fe:	d05e      	beq.n	4087be <_free_r+0xea>
  408700:	07fe      	lsls	r6, r7, #31
  408702:	6050      	str	r0, [r2, #4]
  408704:	d40b      	bmi.n	40871e <_free_r+0x4a>
  408706:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40870a:	1be4      	subs	r4, r4, r7
  40870c:	f101 0e08 	add.w	lr, r1, #8
  408710:	68a5      	ldr	r5, [r4, #8]
  408712:	4575      	cmp	r5, lr
  408714:	443b      	add	r3, r7
  408716:	d06d      	beq.n	4087f4 <_free_r+0x120>
  408718:	68e7      	ldr	r7, [r4, #12]
  40871a:	60ef      	str	r7, [r5, #12]
  40871c:	60bd      	str	r5, [r7, #8]
  40871e:	1815      	adds	r5, r2, r0
  408720:	686d      	ldr	r5, [r5, #4]
  408722:	07ed      	lsls	r5, r5, #31
  408724:	d53e      	bpl.n	4087a4 <_free_r+0xd0>
  408726:	f043 0201 	orr.w	r2, r3, #1
  40872a:	6062      	str	r2, [r4, #4]
  40872c:	50e3      	str	r3, [r4, r3]
  40872e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408732:	d217      	bcs.n	408764 <_free_r+0x90>
  408734:	08db      	lsrs	r3, r3, #3
  408736:	1c58      	adds	r0, r3, #1
  408738:	109a      	asrs	r2, r3, #2
  40873a:	684d      	ldr	r5, [r1, #4]
  40873c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  408740:	60a7      	str	r7, [r4, #8]
  408742:	2301      	movs	r3, #1
  408744:	4093      	lsls	r3, r2
  408746:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40874a:	432b      	orrs	r3, r5
  40874c:	3a08      	subs	r2, #8
  40874e:	60e2      	str	r2, [r4, #12]
  408750:	604b      	str	r3, [r1, #4]
  408752:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  408756:	60fc      	str	r4, [r7, #12]
  408758:	4640      	mov	r0, r8
  40875a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40875e:	f7fe bcf9 	b.w	407154 <__malloc_unlock>
  408762:	4770      	bx	lr
  408764:	0a5a      	lsrs	r2, r3, #9
  408766:	2a04      	cmp	r2, #4
  408768:	d852      	bhi.n	408810 <_free_r+0x13c>
  40876a:	099a      	lsrs	r2, r3, #6
  40876c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  408770:	00ff      	lsls	r7, r7, #3
  408772:	f102 0538 	add.w	r5, r2, #56	; 0x38
  408776:	19c8      	adds	r0, r1, r7
  408778:	59ca      	ldr	r2, [r1, r7]
  40877a:	3808      	subs	r0, #8
  40877c:	4290      	cmp	r0, r2
  40877e:	d04f      	beq.n	408820 <_free_r+0x14c>
  408780:	6851      	ldr	r1, [r2, #4]
  408782:	f021 0103 	bic.w	r1, r1, #3
  408786:	428b      	cmp	r3, r1
  408788:	d232      	bcs.n	4087f0 <_free_r+0x11c>
  40878a:	6892      	ldr	r2, [r2, #8]
  40878c:	4290      	cmp	r0, r2
  40878e:	d1f7      	bne.n	408780 <_free_r+0xac>
  408790:	68c3      	ldr	r3, [r0, #12]
  408792:	60a0      	str	r0, [r4, #8]
  408794:	60e3      	str	r3, [r4, #12]
  408796:	609c      	str	r4, [r3, #8]
  408798:	60c4      	str	r4, [r0, #12]
  40879a:	4640      	mov	r0, r8
  40879c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4087a0:	f7fe bcd8 	b.w	407154 <__malloc_unlock>
  4087a4:	6895      	ldr	r5, [r2, #8]
  4087a6:	4f3b      	ldr	r7, [pc, #236]	; (408894 <_free_r+0x1c0>)
  4087a8:	42bd      	cmp	r5, r7
  4087aa:	4403      	add	r3, r0
  4087ac:	d040      	beq.n	408830 <_free_r+0x15c>
  4087ae:	68d0      	ldr	r0, [r2, #12]
  4087b0:	60e8      	str	r0, [r5, #12]
  4087b2:	f043 0201 	orr.w	r2, r3, #1
  4087b6:	6085      	str	r5, [r0, #8]
  4087b8:	6062      	str	r2, [r4, #4]
  4087ba:	50e3      	str	r3, [r4, r3]
  4087bc:	e7b7      	b.n	40872e <_free_r+0x5a>
  4087be:	07ff      	lsls	r7, r7, #31
  4087c0:	4403      	add	r3, r0
  4087c2:	d407      	bmi.n	4087d4 <_free_r+0x100>
  4087c4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4087c8:	1aa4      	subs	r4, r4, r2
  4087ca:	4413      	add	r3, r2
  4087cc:	68a0      	ldr	r0, [r4, #8]
  4087ce:	68e2      	ldr	r2, [r4, #12]
  4087d0:	60c2      	str	r2, [r0, #12]
  4087d2:	6090      	str	r0, [r2, #8]
  4087d4:	4a30      	ldr	r2, [pc, #192]	; (408898 <_free_r+0x1c4>)
  4087d6:	6812      	ldr	r2, [r2, #0]
  4087d8:	f043 0001 	orr.w	r0, r3, #1
  4087dc:	4293      	cmp	r3, r2
  4087de:	6060      	str	r0, [r4, #4]
  4087e0:	608c      	str	r4, [r1, #8]
  4087e2:	d3b9      	bcc.n	408758 <_free_r+0x84>
  4087e4:	4b2d      	ldr	r3, [pc, #180]	; (40889c <_free_r+0x1c8>)
  4087e6:	4640      	mov	r0, r8
  4087e8:	6819      	ldr	r1, [r3, #0]
  4087ea:	f7ff ff23 	bl	408634 <_malloc_trim_r>
  4087ee:	e7b3      	b.n	408758 <_free_r+0x84>
  4087f0:	4610      	mov	r0, r2
  4087f2:	e7cd      	b.n	408790 <_free_r+0xbc>
  4087f4:	1811      	adds	r1, r2, r0
  4087f6:	6849      	ldr	r1, [r1, #4]
  4087f8:	07c9      	lsls	r1, r1, #31
  4087fa:	d444      	bmi.n	408886 <_free_r+0x1b2>
  4087fc:	6891      	ldr	r1, [r2, #8]
  4087fe:	68d2      	ldr	r2, [r2, #12]
  408800:	60ca      	str	r2, [r1, #12]
  408802:	4403      	add	r3, r0
  408804:	f043 0001 	orr.w	r0, r3, #1
  408808:	6091      	str	r1, [r2, #8]
  40880a:	6060      	str	r0, [r4, #4]
  40880c:	50e3      	str	r3, [r4, r3]
  40880e:	e7a3      	b.n	408758 <_free_r+0x84>
  408810:	2a14      	cmp	r2, #20
  408812:	d816      	bhi.n	408842 <_free_r+0x16e>
  408814:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  408818:	00ff      	lsls	r7, r7, #3
  40881a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40881e:	e7aa      	b.n	408776 <_free_r+0xa2>
  408820:	10aa      	asrs	r2, r5, #2
  408822:	2301      	movs	r3, #1
  408824:	684d      	ldr	r5, [r1, #4]
  408826:	4093      	lsls	r3, r2
  408828:	432b      	orrs	r3, r5
  40882a:	604b      	str	r3, [r1, #4]
  40882c:	4603      	mov	r3, r0
  40882e:	e7b0      	b.n	408792 <_free_r+0xbe>
  408830:	f043 0201 	orr.w	r2, r3, #1
  408834:	614c      	str	r4, [r1, #20]
  408836:	610c      	str	r4, [r1, #16]
  408838:	60e5      	str	r5, [r4, #12]
  40883a:	60a5      	str	r5, [r4, #8]
  40883c:	6062      	str	r2, [r4, #4]
  40883e:	50e3      	str	r3, [r4, r3]
  408840:	e78a      	b.n	408758 <_free_r+0x84>
  408842:	2a54      	cmp	r2, #84	; 0x54
  408844:	d806      	bhi.n	408854 <_free_r+0x180>
  408846:	0b1a      	lsrs	r2, r3, #12
  408848:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40884c:	00ff      	lsls	r7, r7, #3
  40884e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  408852:	e790      	b.n	408776 <_free_r+0xa2>
  408854:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  408858:	d806      	bhi.n	408868 <_free_r+0x194>
  40885a:	0bda      	lsrs	r2, r3, #15
  40885c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  408860:	00ff      	lsls	r7, r7, #3
  408862:	f102 0577 	add.w	r5, r2, #119	; 0x77
  408866:	e786      	b.n	408776 <_free_r+0xa2>
  408868:	f240 5054 	movw	r0, #1364	; 0x554
  40886c:	4282      	cmp	r2, r0
  40886e:	d806      	bhi.n	40887e <_free_r+0x1aa>
  408870:	0c9a      	lsrs	r2, r3, #18
  408872:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  408876:	00ff      	lsls	r7, r7, #3
  408878:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40887c:	e77b      	b.n	408776 <_free_r+0xa2>
  40887e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  408882:	257e      	movs	r5, #126	; 0x7e
  408884:	e777      	b.n	408776 <_free_r+0xa2>
  408886:	f043 0101 	orr.w	r1, r3, #1
  40888a:	6061      	str	r1, [r4, #4]
  40888c:	6013      	str	r3, [r2, #0]
  40888e:	e763      	b.n	408758 <_free_r+0x84>
  408890:	20400440 	.word	0x20400440
  408894:	20400448 	.word	0x20400448
  408898:	2040084c 	.word	0x2040084c
  40889c:	2040c96c 	.word	0x2040c96c

004088a0 <__sfvwrite_r>:
  4088a0:	6893      	ldr	r3, [r2, #8]
  4088a2:	2b00      	cmp	r3, #0
  4088a4:	d073      	beq.n	40898e <__sfvwrite_r+0xee>
  4088a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4088aa:	898b      	ldrh	r3, [r1, #12]
  4088ac:	b083      	sub	sp, #12
  4088ae:	460c      	mov	r4, r1
  4088b0:	0719      	lsls	r1, r3, #28
  4088b2:	9000      	str	r0, [sp, #0]
  4088b4:	4616      	mov	r6, r2
  4088b6:	d526      	bpl.n	408906 <__sfvwrite_r+0x66>
  4088b8:	6922      	ldr	r2, [r4, #16]
  4088ba:	b322      	cbz	r2, 408906 <__sfvwrite_r+0x66>
  4088bc:	f013 0002 	ands.w	r0, r3, #2
  4088c0:	6835      	ldr	r5, [r6, #0]
  4088c2:	d02c      	beq.n	40891e <__sfvwrite_r+0x7e>
  4088c4:	f04f 0900 	mov.w	r9, #0
  4088c8:	4fb0      	ldr	r7, [pc, #704]	; (408b8c <__sfvwrite_r+0x2ec>)
  4088ca:	46c8      	mov	r8, r9
  4088cc:	46b2      	mov	sl, r6
  4088ce:	45b8      	cmp	r8, r7
  4088d0:	4643      	mov	r3, r8
  4088d2:	464a      	mov	r2, r9
  4088d4:	bf28      	it	cs
  4088d6:	463b      	movcs	r3, r7
  4088d8:	9800      	ldr	r0, [sp, #0]
  4088da:	f1b8 0f00 	cmp.w	r8, #0
  4088de:	d050      	beq.n	408982 <__sfvwrite_r+0xe2>
  4088e0:	69e1      	ldr	r1, [r4, #28]
  4088e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4088e4:	47b0      	blx	r6
  4088e6:	2800      	cmp	r0, #0
  4088e8:	dd58      	ble.n	40899c <__sfvwrite_r+0xfc>
  4088ea:	f8da 3008 	ldr.w	r3, [sl, #8]
  4088ee:	1a1b      	subs	r3, r3, r0
  4088f0:	4481      	add	r9, r0
  4088f2:	eba8 0800 	sub.w	r8, r8, r0
  4088f6:	f8ca 3008 	str.w	r3, [sl, #8]
  4088fa:	2b00      	cmp	r3, #0
  4088fc:	d1e7      	bne.n	4088ce <__sfvwrite_r+0x2e>
  4088fe:	2000      	movs	r0, #0
  408900:	b003      	add	sp, #12
  408902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408906:	4621      	mov	r1, r4
  408908:	9800      	ldr	r0, [sp, #0]
  40890a:	f7ff fc51 	bl	4081b0 <__swsetup_r>
  40890e:	2800      	cmp	r0, #0
  408910:	f040 8133 	bne.w	408b7a <__sfvwrite_r+0x2da>
  408914:	89a3      	ldrh	r3, [r4, #12]
  408916:	6835      	ldr	r5, [r6, #0]
  408918:	f013 0002 	ands.w	r0, r3, #2
  40891c:	d1d2      	bne.n	4088c4 <__sfvwrite_r+0x24>
  40891e:	f013 0901 	ands.w	r9, r3, #1
  408922:	d145      	bne.n	4089b0 <__sfvwrite_r+0x110>
  408924:	464f      	mov	r7, r9
  408926:	9601      	str	r6, [sp, #4]
  408928:	b337      	cbz	r7, 408978 <__sfvwrite_r+0xd8>
  40892a:	059a      	lsls	r2, r3, #22
  40892c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  408930:	f140 8083 	bpl.w	408a3a <__sfvwrite_r+0x19a>
  408934:	4547      	cmp	r7, r8
  408936:	46c3      	mov	fp, r8
  408938:	f0c0 80ab 	bcc.w	408a92 <__sfvwrite_r+0x1f2>
  40893c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  408940:	f040 80ac 	bne.w	408a9c <__sfvwrite_r+0x1fc>
  408944:	6820      	ldr	r0, [r4, #0]
  408946:	46ba      	mov	sl, r7
  408948:	465a      	mov	r2, fp
  40894a:	4649      	mov	r1, r9
  40894c:	f000 fa40 	bl	408dd0 <memmove>
  408950:	68a2      	ldr	r2, [r4, #8]
  408952:	6823      	ldr	r3, [r4, #0]
  408954:	eba2 0208 	sub.w	r2, r2, r8
  408958:	445b      	add	r3, fp
  40895a:	60a2      	str	r2, [r4, #8]
  40895c:	6023      	str	r3, [r4, #0]
  40895e:	9a01      	ldr	r2, [sp, #4]
  408960:	6893      	ldr	r3, [r2, #8]
  408962:	eba3 030a 	sub.w	r3, r3, sl
  408966:	44d1      	add	r9, sl
  408968:	eba7 070a 	sub.w	r7, r7, sl
  40896c:	6093      	str	r3, [r2, #8]
  40896e:	2b00      	cmp	r3, #0
  408970:	d0c5      	beq.n	4088fe <__sfvwrite_r+0x5e>
  408972:	89a3      	ldrh	r3, [r4, #12]
  408974:	2f00      	cmp	r7, #0
  408976:	d1d8      	bne.n	40892a <__sfvwrite_r+0x8a>
  408978:	f8d5 9000 	ldr.w	r9, [r5]
  40897c:	686f      	ldr	r7, [r5, #4]
  40897e:	3508      	adds	r5, #8
  408980:	e7d2      	b.n	408928 <__sfvwrite_r+0x88>
  408982:	f8d5 9000 	ldr.w	r9, [r5]
  408986:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40898a:	3508      	adds	r5, #8
  40898c:	e79f      	b.n	4088ce <__sfvwrite_r+0x2e>
  40898e:	2000      	movs	r0, #0
  408990:	4770      	bx	lr
  408992:	4621      	mov	r1, r4
  408994:	9800      	ldr	r0, [sp, #0]
  408996:	f7ff fd1f 	bl	4083d8 <_fflush_r>
  40899a:	b370      	cbz	r0, 4089fa <__sfvwrite_r+0x15a>
  40899c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4089a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4089a4:	f04f 30ff 	mov.w	r0, #4294967295
  4089a8:	81a3      	strh	r3, [r4, #12]
  4089aa:	b003      	add	sp, #12
  4089ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4089b0:	4681      	mov	r9, r0
  4089b2:	4633      	mov	r3, r6
  4089b4:	464e      	mov	r6, r9
  4089b6:	46a8      	mov	r8, r5
  4089b8:	469a      	mov	sl, r3
  4089ba:	464d      	mov	r5, r9
  4089bc:	b34e      	cbz	r6, 408a12 <__sfvwrite_r+0x172>
  4089be:	b380      	cbz	r0, 408a22 <__sfvwrite_r+0x182>
  4089c0:	6820      	ldr	r0, [r4, #0]
  4089c2:	6923      	ldr	r3, [r4, #16]
  4089c4:	6962      	ldr	r2, [r4, #20]
  4089c6:	45b1      	cmp	r9, r6
  4089c8:	46cb      	mov	fp, r9
  4089ca:	bf28      	it	cs
  4089cc:	46b3      	movcs	fp, r6
  4089ce:	4298      	cmp	r0, r3
  4089d0:	465f      	mov	r7, fp
  4089d2:	d904      	bls.n	4089de <__sfvwrite_r+0x13e>
  4089d4:	68a3      	ldr	r3, [r4, #8]
  4089d6:	4413      	add	r3, r2
  4089d8:	459b      	cmp	fp, r3
  4089da:	f300 80a6 	bgt.w	408b2a <__sfvwrite_r+0x28a>
  4089de:	4593      	cmp	fp, r2
  4089e0:	db4b      	blt.n	408a7a <__sfvwrite_r+0x1da>
  4089e2:	4613      	mov	r3, r2
  4089e4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4089e6:	69e1      	ldr	r1, [r4, #28]
  4089e8:	9800      	ldr	r0, [sp, #0]
  4089ea:	462a      	mov	r2, r5
  4089ec:	47b8      	blx	r7
  4089ee:	1e07      	subs	r7, r0, #0
  4089f0:	ddd4      	ble.n	40899c <__sfvwrite_r+0xfc>
  4089f2:	ebb9 0907 	subs.w	r9, r9, r7
  4089f6:	d0cc      	beq.n	408992 <__sfvwrite_r+0xf2>
  4089f8:	2001      	movs	r0, #1
  4089fa:	f8da 3008 	ldr.w	r3, [sl, #8]
  4089fe:	1bdb      	subs	r3, r3, r7
  408a00:	443d      	add	r5, r7
  408a02:	1bf6      	subs	r6, r6, r7
  408a04:	f8ca 3008 	str.w	r3, [sl, #8]
  408a08:	2b00      	cmp	r3, #0
  408a0a:	f43f af78 	beq.w	4088fe <__sfvwrite_r+0x5e>
  408a0e:	2e00      	cmp	r6, #0
  408a10:	d1d5      	bne.n	4089be <__sfvwrite_r+0x11e>
  408a12:	f108 0308 	add.w	r3, r8, #8
  408a16:	e913 0060 	ldmdb	r3, {r5, r6}
  408a1a:	4698      	mov	r8, r3
  408a1c:	3308      	adds	r3, #8
  408a1e:	2e00      	cmp	r6, #0
  408a20:	d0f9      	beq.n	408a16 <__sfvwrite_r+0x176>
  408a22:	4632      	mov	r2, r6
  408a24:	210a      	movs	r1, #10
  408a26:	4628      	mov	r0, r5
  408a28:	f000 f982 	bl	408d30 <memchr>
  408a2c:	2800      	cmp	r0, #0
  408a2e:	f000 80a1 	beq.w	408b74 <__sfvwrite_r+0x2d4>
  408a32:	3001      	adds	r0, #1
  408a34:	eba0 0905 	sub.w	r9, r0, r5
  408a38:	e7c2      	b.n	4089c0 <__sfvwrite_r+0x120>
  408a3a:	6820      	ldr	r0, [r4, #0]
  408a3c:	6923      	ldr	r3, [r4, #16]
  408a3e:	4298      	cmp	r0, r3
  408a40:	d802      	bhi.n	408a48 <__sfvwrite_r+0x1a8>
  408a42:	6963      	ldr	r3, [r4, #20]
  408a44:	429f      	cmp	r7, r3
  408a46:	d25d      	bcs.n	408b04 <__sfvwrite_r+0x264>
  408a48:	45b8      	cmp	r8, r7
  408a4a:	bf28      	it	cs
  408a4c:	46b8      	movcs	r8, r7
  408a4e:	4642      	mov	r2, r8
  408a50:	4649      	mov	r1, r9
  408a52:	f000 f9bd 	bl	408dd0 <memmove>
  408a56:	68a3      	ldr	r3, [r4, #8]
  408a58:	6822      	ldr	r2, [r4, #0]
  408a5a:	eba3 0308 	sub.w	r3, r3, r8
  408a5e:	4442      	add	r2, r8
  408a60:	60a3      	str	r3, [r4, #8]
  408a62:	6022      	str	r2, [r4, #0]
  408a64:	b10b      	cbz	r3, 408a6a <__sfvwrite_r+0x1ca>
  408a66:	46c2      	mov	sl, r8
  408a68:	e779      	b.n	40895e <__sfvwrite_r+0xbe>
  408a6a:	4621      	mov	r1, r4
  408a6c:	9800      	ldr	r0, [sp, #0]
  408a6e:	f7ff fcb3 	bl	4083d8 <_fflush_r>
  408a72:	2800      	cmp	r0, #0
  408a74:	d192      	bne.n	40899c <__sfvwrite_r+0xfc>
  408a76:	46c2      	mov	sl, r8
  408a78:	e771      	b.n	40895e <__sfvwrite_r+0xbe>
  408a7a:	465a      	mov	r2, fp
  408a7c:	4629      	mov	r1, r5
  408a7e:	f000 f9a7 	bl	408dd0 <memmove>
  408a82:	68a2      	ldr	r2, [r4, #8]
  408a84:	6823      	ldr	r3, [r4, #0]
  408a86:	eba2 020b 	sub.w	r2, r2, fp
  408a8a:	445b      	add	r3, fp
  408a8c:	60a2      	str	r2, [r4, #8]
  408a8e:	6023      	str	r3, [r4, #0]
  408a90:	e7af      	b.n	4089f2 <__sfvwrite_r+0x152>
  408a92:	6820      	ldr	r0, [r4, #0]
  408a94:	46b8      	mov	r8, r7
  408a96:	46ba      	mov	sl, r7
  408a98:	46bb      	mov	fp, r7
  408a9a:	e755      	b.n	408948 <__sfvwrite_r+0xa8>
  408a9c:	6962      	ldr	r2, [r4, #20]
  408a9e:	6820      	ldr	r0, [r4, #0]
  408aa0:	6921      	ldr	r1, [r4, #16]
  408aa2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  408aa6:	eba0 0a01 	sub.w	sl, r0, r1
  408aaa:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  408aae:	f10a 0001 	add.w	r0, sl, #1
  408ab2:	ea4f 0868 	mov.w	r8, r8, asr #1
  408ab6:	4438      	add	r0, r7
  408ab8:	4540      	cmp	r0, r8
  408aba:	4642      	mov	r2, r8
  408abc:	bf84      	itt	hi
  408abe:	4680      	movhi	r8, r0
  408ac0:	4642      	movhi	r2, r8
  408ac2:	055b      	lsls	r3, r3, #21
  408ac4:	d544      	bpl.n	408b50 <__sfvwrite_r+0x2b0>
  408ac6:	4611      	mov	r1, r2
  408ac8:	9800      	ldr	r0, [sp, #0]
  408aca:	f7fd ffa5 	bl	406a18 <_malloc_r>
  408ace:	4683      	mov	fp, r0
  408ad0:	2800      	cmp	r0, #0
  408ad2:	d055      	beq.n	408b80 <__sfvwrite_r+0x2e0>
  408ad4:	4652      	mov	r2, sl
  408ad6:	6921      	ldr	r1, [r4, #16]
  408ad8:	f7fe fa4e 	bl	406f78 <memcpy>
  408adc:	89a3      	ldrh	r3, [r4, #12]
  408ade:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  408ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408ae6:	81a3      	strh	r3, [r4, #12]
  408ae8:	eb0b 000a 	add.w	r0, fp, sl
  408aec:	eba8 030a 	sub.w	r3, r8, sl
  408af0:	f8c4 b010 	str.w	fp, [r4, #16]
  408af4:	f8c4 8014 	str.w	r8, [r4, #20]
  408af8:	6020      	str	r0, [r4, #0]
  408afa:	60a3      	str	r3, [r4, #8]
  408afc:	46b8      	mov	r8, r7
  408afe:	46ba      	mov	sl, r7
  408b00:	46bb      	mov	fp, r7
  408b02:	e721      	b.n	408948 <__sfvwrite_r+0xa8>
  408b04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  408b08:	42b9      	cmp	r1, r7
  408b0a:	bf28      	it	cs
  408b0c:	4639      	movcs	r1, r7
  408b0e:	464a      	mov	r2, r9
  408b10:	fb91 f1f3 	sdiv	r1, r1, r3
  408b14:	9800      	ldr	r0, [sp, #0]
  408b16:	6a66      	ldr	r6, [r4, #36]	; 0x24
  408b18:	fb03 f301 	mul.w	r3, r3, r1
  408b1c:	69e1      	ldr	r1, [r4, #28]
  408b1e:	47b0      	blx	r6
  408b20:	f1b0 0a00 	subs.w	sl, r0, #0
  408b24:	f73f af1b 	bgt.w	40895e <__sfvwrite_r+0xbe>
  408b28:	e738      	b.n	40899c <__sfvwrite_r+0xfc>
  408b2a:	461a      	mov	r2, r3
  408b2c:	4629      	mov	r1, r5
  408b2e:	9301      	str	r3, [sp, #4]
  408b30:	f000 f94e 	bl	408dd0 <memmove>
  408b34:	6822      	ldr	r2, [r4, #0]
  408b36:	9b01      	ldr	r3, [sp, #4]
  408b38:	9800      	ldr	r0, [sp, #0]
  408b3a:	441a      	add	r2, r3
  408b3c:	6022      	str	r2, [r4, #0]
  408b3e:	4621      	mov	r1, r4
  408b40:	f7ff fc4a 	bl	4083d8 <_fflush_r>
  408b44:	9b01      	ldr	r3, [sp, #4]
  408b46:	2800      	cmp	r0, #0
  408b48:	f47f af28 	bne.w	40899c <__sfvwrite_r+0xfc>
  408b4c:	461f      	mov	r7, r3
  408b4e:	e750      	b.n	4089f2 <__sfvwrite_r+0x152>
  408b50:	9800      	ldr	r0, [sp, #0]
  408b52:	f000 f9a1 	bl	408e98 <_realloc_r>
  408b56:	4683      	mov	fp, r0
  408b58:	2800      	cmp	r0, #0
  408b5a:	d1c5      	bne.n	408ae8 <__sfvwrite_r+0x248>
  408b5c:	9d00      	ldr	r5, [sp, #0]
  408b5e:	6921      	ldr	r1, [r4, #16]
  408b60:	4628      	mov	r0, r5
  408b62:	f7ff fdb7 	bl	4086d4 <_free_r>
  408b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408b6a:	220c      	movs	r2, #12
  408b6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  408b70:	602a      	str	r2, [r5, #0]
  408b72:	e715      	b.n	4089a0 <__sfvwrite_r+0x100>
  408b74:	f106 0901 	add.w	r9, r6, #1
  408b78:	e722      	b.n	4089c0 <__sfvwrite_r+0x120>
  408b7a:	f04f 30ff 	mov.w	r0, #4294967295
  408b7e:	e6bf      	b.n	408900 <__sfvwrite_r+0x60>
  408b80:	9a00      	ldr	r2, [sp, #0]
  408b82:	230c      	movs	r3, #12
  408b84:	6013      	str	r3, [r2, #0]
  408b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408b8a:	e709      	b.n	4089a0 <__sfvwrite_r+0x100>
  408b8c:	7ffffc00 	.word	0x7ffffc00

00408b90 <_fwalk_reent>:
  408b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408b94:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  408b98:	d01f      	beq.n	408bda <_fwalk_reent+0x4a>
  408b9a:	4688      	mov	r8, r1
  408b9c:	4606      	mov	r6, r0
  408b9e:	f04f 0900 	mov.w	r9, #0
  408ba2:	687d      	ldr	r5, [r7, #4]
  408ba4:	68bc      	ldr	r4, [r7, #8]
  408ba6:	3d01      	subs	r5, #1
  408ba8:	d411      	bmi.n	408bce <_fwalk_reent+0x3e>
  408baa:	89a3      	ldrh	r3, [r4, #12]
  408bac:	2b01      	cmp	r3, #1
  408bae:	f105 35ff 	add.w	r5, r5, #4294967295
  408bb2:	d908      	bls.n	408bc6 <_fwalk_reent+0x36>
  408bb4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  408bb8:	3301      	adds	r3, #1
  408bba:	4621      	mov	r1, r4
  408bbc:	4630      	mov	r0, r6
  408bbe:	d002      	beq.n	408bc6 <_fwalk_reent+0x36>
  408bc0:	47c0      	blx	r8
  408bc2:	ea49 0900 	orr.w	r9, r9, r0
  408bc6:	1c6b      	adds	r3, r5, #1
  408bc8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  408bcc:	d1ed      	bne.n	408baa <_fwalk_reent+0x1a>
  408bce:	683f      	ldr	r7, [r7, #0]
  408bd0:	2f00      	cmp	r7, #0
  408bd2:	d1e6      	bne.n	408ba2 <_fwalk_reent+0x12>
  408bd4:	4648      	mov	r0, r9
  408bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408bda:	46b9      	mov	r9, r7
  408bdc:	4648      	mov	r0, r9
  408bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408be2:	bf00      	nop

00408be4 <__locale_mb_cur_max>:
  408be4:	4b04      	ldr	r3, [pc, #16]	; (408bf8 <__locale_mb_cur_max+0x14>)
  408be6:	4a05      	ldr	r2, [pc, #20]	; (408bfc <__locale_mb_cur_max+0x18>)
  408be8:	681b      	ldr	r3, [r3, #0]
  408bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  408bec:	2b00      	cmp	r3, #0
  408bee:	bf08      	it	eq
  408bf0:	4613      	moveq	r3, r2
  408bf2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  408bf6:	4770      	bx	lr
  408bf8:	20400014 	.word	0x20400014
  408bfc:	20400854 	.word	0x20400854

00408c00 <__retarget_lock_init_recursive>:
  408c00:	4770      	bx	lr
  408c02:	bf00      	nop

00408c04 <__retarget_lock_close_recursive>:
  408c04:	4770      	bx	lr
  408c06:	bf00      	nop

00408c08 <__retarget_lock_acquire_recursive>:
  408c08:	4770      	bx	lr
  408c0a:	bf00      	nop

00408c0c <__retarget_lock_release_recursive>:
  408c0c:	4770      	bx	lr
  408c0e:	bf00      	nop

00408c10 <__swhatbuf_r>:
  408c10:	b570      	push	{r4, r5, r6, lr}
  408c12:	460c      	mov	r4, r1
  408c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408c18:	2900      	cmp	r1, #0
  408c1a:	b090      	sub	sp, #64	; 0x40
  408c1c:	4615      	mov	r5, r2
  408c1e:	461e      	mov	r6, r3
  408c20:	db14      	blt.n	408c4c <__swhatbuf_r+0x3c>
  408c22:	aa01      	add	r2, sp, #4
  408c24:	f000 fc9e 	bl	409564 <_fstat_r>
  408c28:	2800      	cmp	r0, #0
  408c2a:	db0f      	blt.n	408c4c <__swhatbuf_r+0x3c>
  408c2c:	9a02      	ldr	r2, [sp, #8]
  408c2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  408c32:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  408c36:	fab2 f282 	clz	r2, r2
  408c3a:	0952      	lsrs	r2, r2, #5
  408c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  408c40:	f44f 6000 	mov.w	r0, #2048	; 0x800
  408c44:	6032      	str	r2, [r6, #0]
  408c46:	602b      	str	r3, [r5, #0]
  408c48:	b010      	add	sp, #64	; 0x40
  408c4a:	bd70      	pop	{r4, r5, r6, pc}
  408c4c:	89a2      	ldrh	r2, [r4, #12]
  408c4e:	2300      	movs	r3, #0
  408c50:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  408c54:	6033      	str	r3, [r6, #0]
  408c56:	d004      	beq.n	408c62 <__swhatbuf_r+0x52>
  408c58:	2240      	movs	r2, #64	; 0x40
  408c5a:	4618      	mov	r0, r3
  408c5c:	602a      	str	r2, [r5, #0]
  408c5e:	b010      	add	sp, #64	; 0x40
  408c60:	bd70      	pop	{r4, r5, r6, pc}
  408c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
  408c66:	602b      	str	r3, [r5, #0]
  408c68:	b010      	add	sp, #64	; 0x40
  408c6a:	bd70      	pop	{r4, r5, r6, pc}

00408c6c <__smakebuf_r>:
  408c6c:	898a      	ldrh	r2, [r1, #12]
  408c6e:	0792      	lsls	r2, r2, #30
  408c70:	460b      	mov	r3, r1
  408c72:	d506      	bpl.n	408c82 <__smakebuf_r+0x16>
  408c74:	f101 0243 	add.w	r2, r1, #67	; 0x43
  408c78:	2101      	movs	r1, #1
  408c7a:	601a      	str	r2, [r3, #0]
  408c7c:	611a      	str	r2, [r3, #16]
  408c7e:	6159      	str	r1, [r3, #20]
  408c80:	4770      	bx	lr
  408c82:	b5f0      	push	{r4, r5, r6, r7, lr}
  408c84:	b083      	sub	sp, #12
  408c86:	ab01      	add	r3, sp, #4
  408c88:	466a      	mov	r2, sp
  408c8a:	460c      	mov	r4, r1
  408c8c:	4606      	mov	r6, r0
  408c8e:	f7ff ffbf 	bl	408c10 <__swhatbuf_r>
  408c92:	9900      	ldr	r1, [sp, #0]
  408c94:	4605      	mov	r5, r0
  408c96:	4630      	mov	r0, r6
  408c98:	f7fd febe 	bl	406a18 <_malloc_r>
  408c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408ca0:	b1d8      	cbz	r0, 408cda <__smakebuf_r+0x6e>
  408ca2:	9a01      	ldr	r2, [sp, #4]
  408ca4:	4f15      	ldr	r7, [pc, #84]	; (408cfc <__smakebuf_r+0x90>)
  408ca6:	9900      	ldr	r1, [sp, #0]
  408ca8:	63f7      	str	r7, [r6, #60]	; 0x3c
  408caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408cae:	81a3      	strh	r3, [r4, #12]
  408cb0:	6020      	str	r0, [r4, #0]
  408cb2:	6120      	str	r0, [r4, #16]
  408cb4:	6161      	str	r1, [r4, #20]
  408cb6:	b91a      	cbnz	r2, 408cc0 <__smakebuf_r+0x54>
  408cb8:	432b      	orrs	r3, r5
  408cba:	81a3      	strh	r3, [r4, #12]
  408cbc:	b003      	add	sp, #12
  408cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408cc0:	4630      	mov	r0, r6
  408cc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408cc6:	f000 fc61 	bl	40958c <_isatty_r>
  408cca:	b1a0      	cbz	r0, 408cf6 <__smakebuf_r+0x8a>
  408ccc:	89a3      	ldrh	r3, [r4, #12]
  408cce:	f023 0303 	bic.w	r3, r3, #3
  408cd2:	f043 0301 	orr.w	r3, r3, #1
  408cd6:	b21b      	sxth	r3, r3
  408cd8:	e7ee      	b.n	408cb8 <__smakebuf_r+0x4c>
  408cda:	059a      	lsls	r2, r3, #22
  408cdc:	d4ee      	bmi.n	408cbc <__smakebuf_r+0x50>
  408cde:	f023 0303 	bic.w	r3, r3, #3
  408ce2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  408ce6:	f043 0302 	orr.w	r3, r3, #2
  408cea:	2101      	movs	r1, #1
  408cec:	81a3      	strh	r3, [r4, #12]
  408cee:	6022      	str	r2, [r4, #0]
  408cf0:	6122      	str	r2, [r4, #16]
  408cf2:	6161      	str	r1, [r4, #20]
  408cf4:	e7e2      	b.n	408cbc <__smakebuf_r+0x50>
  408cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408cfa:	e7dd      	b.n	408cb8 <__smakebuf_r+0x4c>
  408cfc:	0040842d 	.word	0x0040842d

00408d00 <__ascii_mbtowc>:
  408d00:	b082      	sub	sp, #8
  408d02:	b149      	cbz	r1, 408d18 <__ascii_mbtowc+0x18>
  408d04:	b15a      	cbz	r2, 408d1e <__ascii_mbtowc+0x1e>
  408d06:	b16b      	cbz	r3, 408d24 <__ascii_mbtowc+0x24>
  408d08:	7813      	ldrb	r3, [r2, #0]
  408d0a:	600b      	str	r3, [r1, #0]
  408d0c:	7812      	ldrb	r2, [r2, #0]
  408d0e:	1c10      	adds	r0, r2, #0
  408d10:	bf18      	it	ne
  408d12:	2001      	movne	r0, #1
  408d14:	b002      	add	sp, #8
  408d16:	4770      	bx	lr
  408d18:	a901      	add	r1, sp, #4
  408d1a:	2a00      	cmp	r2, #0
  408d1c:	d1f3      	bne.n	408d06 <__ascii_mbtowc+0x6>
  408d1e:	4610      	mov	r0, r2
  408d20:	b002      	add	sp, #8
  408d22:	4770      	bx	lr
  408d24:	f06f 0001 	mvn.w	r0, #1
  408d28:	e7f4      	b.n	408d14 <__ascii_mbtowc+0x14>
  408d2a:	bf00      	nop
  408d2c:	0000      	movs	r0, r0
	...

00408d30 <memchr>:
  408d30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  408d34:	2a10      	cmp	r2, #16
  408d36:	db2b      	blt.n	408d90 <memchr+0x60>
  408d38:	f010 0f07 	tst.w	r0, #7
  408d3c:	d008      	beq.n	408d50 <memchr+0x20>
  408d3e:	f810 3b01 	ldrb.w	r3, [r0], #1
  408d42:	3a01      	subs	r2, #1
  408d44:	428b      	cmp	r3, r1
  408d46:	d02d      	beq.n	408da4 <memchr+0x74>
  408d48:	f010 0f07 	tst.w	r0, #7
  408d4c:	b342      	cbz	r2, 408da0 <memchr+0x70>
  408d4e:	d1f6      	bne.n	408d3e <memchr+0xe>
  408d50:	b4f0      	push	{r4, r5, r6, r7}
  408d52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  408d56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  408d5a:	f022 0407 	bic.w	r4, r2, #7
  408d5e:	f07f 0700 	mvns.w	r7, #0
  408d62:	2300      	movs	r3, #0
  408d64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  408d68:	3c08      	subs	r4, #8
  408d6a:	ea85 0501 	eor.w	r5, r5, r1
  408d6e:	ea86 0601 	eor.w	r6, r6, r1
  408d72:	fa85 f547 	uadd8	r5, r5, r7
  408d76:	faa3 f587 	sel	r5, r3, r7
  408d7a:	fa86 f647 	uadd8	r6, r6, r7
  408d7e:	faa5 f687 	sel	r6, r5, r7
  408d82:	b98e      	cbnz	r6, 408da8 <memchr+0x78>
  408d84:	d1ee      	bne.n	408d64 <memchr+0x34>
  408d86:	bcf0      	pop	{r4, r5, r6, r7}
  408d88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  408d8c:	f002 0207 	and.w	r2, r2, #7
  408d90:	b132      	cbz	r2, 408da0 <memchr+0x70>
  408d92:	f810 3b01 	ldrb.w	r3, [r0], #1
  408d96:	3a01      	subs	r2, #1
  408d98:	ea83 0301 	eor.w	r3, r3, r1
  408d9c:	b113      	cbz	r3, 408da4 <memchr+0x74>
  408d9e:	d1f8      	bne.n	408d92 <memchr+0x62>
  408da0:	2000      	movs	r0, #0
  408da2:	4770      	bx	lr
  408da4:	3801      	subs	r0, #1
  408da6:	4770      	bx	lr
  408da8:	2d00      	cmp	r5, #0
  408daa:	bf06      	itte	eq
  408dac:	4635      	moveq	r5, r6
  408dae:	3803      	subeq	r0, #3
  408db0:	3807      	subne	r0, #7
  408db2:	f015 0f01 	tst.w	r5, #1
  408db6:	d107      	bne.n	408dc8 <memchr+0x98>
  408db8:	3001      	adds	r0, #1
  408dba:	f415 7f80 	tst.w	r5, #256	; 0x100
  408dbe:	bf02      	ittt	eq
  408dc0:	3001      	addeq	r0, #1
  408dc2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  408dc6:	3001      	addeq	r0, #1
  408dc8:	bcf0      	pop	{r4, r5, r6, r7}
  408dca:	3801      	subs	r0, #1
  408dcc:	4770      	bx	lr
  408dce:	bf00      	nop

00408dd0 <memmove>:
  408dd0:	4288      	cmp	r0, r1
  408dd2:	b5f0      	push	{r4, r5, r6, r7, lr}
  408dd4:	d90d      	bls.n	408df2 <memmove+0x22>
  408dd6:	188b      	adds	r3, r1, r2
  408dd8:	4298      	cmp	r0, r3
  408dda:	d20a      	bcs.n	408df2 <memmove+0x22>
  408ddc:	1884      	adds	r4, r0, r2
  408dde:	2a00      	cmp	r2, #0
  408de0:	d051      	beq.n	408e86 <memmove+0xb6>
  408de2:	4622      	mov	r2, r4
  408de4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  408de8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  408dec:	4299      	cmp	r1, r3
  408dee:	d1f9      	bne.n	408de4 <memmove+0x14>
  408df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408df2:	2a0f      	cmp	r2, #15
  408df4:	d948      	bls.n	408e88 <memmove+0xb8>
  408df6:	ea41 0300 	orr.w	r3, r1, r0
  408dfa:	079b      	lsls	r3, r3, #30
  408dfc:	d146      	bne.n	408e8c <memmove+0xbc>
  408dfe:	f100 0410 	add.w	r4, r0, #16
  408e02:	f101 0310 	add.w	r3, r1, #16
  408e06:	4615      	mov	r5, r2
  408e08:	f853 6c10 	ldr.w	r6, [r3, #-16]
  408e0c:	f844 6c10 	str.w	r6, [r4, #-16]
  408e10:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  408e14:	f844 6c0c 	str.w	r6, [r4, #-12]
  408e18:	f853 6c08 	ldr.w	r6, [r3, #-8]
  408e1c:	f844 6c08 	str.w	r6, [r4, #-8]
  408e20:	3d10      	subs	r5, #16
  408e22:	f853 6c04 	ldr.w	r6, [r3, #-4]
  408e26:	f844 6c04 	str.w	r6, [r4, #-4]
  408e2a:	2d0f      	cmp	r5, #15
  408e2c:	f103 0310 	add.w	r3, r3, #16
  408e30:	f104 0410 	add.w	r4, r4, #16
  408e34:	d8e8      	bhi.n	408e08 <memmove+0x38>
  408e36:	f1a2 0310 	sub.w	r3, r2, #16
  408e3a:	f023 030f 	bic.w	r3, r3, #15
  408e3e:	f002 0e0f 	and.w	lr, r2, #15
  408e42:	3310      	adds	r3, #16
  408e44:	f1be 0f03 	cmp.w	lr, #3
  408e48:	4419      	add	r1, r3
  408e4a:	4403      	add	r3, r0
  408e4c:	d921      	bls.n	408e92 <memmove+0xc2>
  408e4e:	1f1e      	subs	r6, r3, #4
  408e50:	460d      	mov	r5, r1
  408e52:	4674      	mov	r4, lr
  408e54:	3c04      	subs	r4, #4
  408e56:	f855 7b04 	ldr.w	r7, [r5], #4
  408e5a:	f846 7f04 	str.w	r7, [r6, #4]!
  408e5e:	2c03      	cmp	r4, #3
  408e60:	d8f8      	bhi.n	408e54 <memmove+0x84>
  408e62:	f1ae 0404 	sub.w	r4, lr, #4
  408e66:	f024 0403 	bic.w	r4, r4, #3
  408e6a:	3404      	adds	r4, #4
  408e6c:	4421      	add	r1, r4
  408e6e:	4423      	add	r3, r4
  408e70:	f002 0203 	and.w	r2, r2, #3
  408e74:	b162      	cbz	r2, 408e90 <memmove+0xc0>
  408e76:	3b01      	subs	r3, #1
  408e78:	440a      	add	r2, r1
  408e7a:	f811 4b01 	ldrb.w	r4, [r1], #1
  408e7e:	f803 4f01 	strb.w	r4, [r3, #1]!
  408e82:	428a      	cmp	r2, r1
  408e84:	d1f9      	bne.n	408e7a <memmove+0xaa>
  408e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408e88:	4603      	mov	r3, r0
  408e8a:	e7f3      	b.n	408e74 <memmove+0xa4>
  408e8c:	4603      	mov	r3, r0
  408e8e:	e7f2      	b.n	408e76 <memmove+0xa6>
  408e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408e92:	4672      	mov	r2, lr
  408e94:	e7ee      	b.n	408e74 <memmove+0xa4>
  408e96:	bf00      	nop

00408e98 <_realloc_r>:
  408e98:	2900      	cmp	r1, #0
  408e9a:	f000 8095 	beq.w	408fc8 <_realloc_r+0x130>
  408e9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408ea2:	460d      	mov	r5, r1
  408ea4:	4616      	mov	r6, r2
  408ea6:	b083      	sub	sp, #12
  408ea8:	4680      	mov	r8, r0
  408eaa:	f106 070b 	add.w	r7, r6, #11
  408eae:	f7fe f94b 	bl	407148 <__malloc_lock>
  408eb2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  408eb6:	2f16      	cmp	r7, #22
  408eb8:	f02e 0403 	bic.w	r4, lr, #3
  408ebc:	f1a5 0908 	sub.w	r9, r5, #8
  408ec0:	d83c      	bhi.n	408f3c <_realloc_r+0xa4>
  408ec2:	2210      	movs	r2, #16
  408ec4:	4617      	mov	r7, r2
  408ec6:	42be      	cmp	r6, r7
  408ec8:	d83d      	bhi.n	408f46 <_realloc_r+0xae>
  408eca:	4294      	cmp	r4, r2
  408ecc:	da43      	bge.n	408f56 <_realloc_r+0xbe>
  408ece:	4bc4      	ldr	r3, [pc, #784]	; (4091e0 <_realloc_r+0x348>)
  408ed0:	6899      	ldr	r1, [r3, #8]
  408ed2:	eb09 0004 	add.w	r0, r9, r4
  408ed6:	4288      	cmp	r0, r1
  408ed8:	f000 80b4 	beq.w	409044 <_realloc_r+0x1ac>
  408edc:	6843      	ldr	r3, [r0, #4]
  408ede:	f023 0101 	bic.w	r1, r3, #1
  408ee2:	4401      	add	r1, r0
  408ee4:	6849      	ldr	r1, [r1, #4]
  408ee6:	07c9      	lsls	r1, r1, #31
  408ee8:	d54c      	bpl.n	408f84 <_realloc_r+0xec>
  408eea:	f01e 0f01 	tst.w	lr, #1
  408eee:	f000 809b 	beq.w	409028 <_realloc_r+0x190>
  408ef2:	4631      	mov	r1, r6
  408ef4:	4640      	mov	r0, r8
  408ef6:	f7fd fd8f 	bl	406a18 <_malloc_r>
  408efa:	4606      	mov	r6, r0
  408efc:	2800      	cmp	r0, #0
  408efe:	d03a      	beq.n	408f76 <_realloc_r+0xde>
  408f00:	f855 3c04 	ldr.w	r3, [r5, #-4]
  408f04:	f023 0301 	bic.w	r3, r3, #1
  408f08:	444b      	add	r3, r9
  408f0a:	f1a0 0208 	sub.w	r2, r0, #8
  408f0e:	429a      	cmp	r2, r3
  408f10:	f000 8121 	beq.w	409156 <_realloc_r+0x2be>
  408f14:	1f22      	subs	r2, r4, #4
  408f16:	2a24      	cmp	r2, #36	; 0x24
  408f18:	f200 8107 	bhi.w	40912a <_realloc_r+0x292>
  408f1c:	2a13      	cmp	r2, #19
  408f1e:	f200 80db 	bhi.w	4090d8 <_realloc_r+0x240>
  408f22:	4603      	mov	r3, r0
  408f24:	462a      	mov	r2, r5
  408f26:	6811      	ldr	r1, [r2, #0]
  408f28:	6019      	str	r1, [r3, #0]
  408f2a:	6851      	ldr	r1, [r2, #4]
  408f2c:	6059      	str	r1, [r3, #4]
  408f2e:	6892      	ldr	r2, [r2, #8]
  408f30:	609a      	str	r2, [r3, #8]
  408f32:	4629      	mov	r1, r5
  408f34:	4640      	mov	r0, r8
  408f36:	f7ff fbcd 	bl	4086d4 <_free_r>
  408f3a:	e01c      	b.n	408f76 <_realloc_r+0xde>
  408f3c:	f027 0707 	bic.w	r7, r7, #7
  408f40:	2f00      	cmp	r7, #0
  408f42:	463a      	mov	r2, r7
  408f44:	dabf      	bge.n	408ec6 <_realloc_r+0x2e>
  408f46:	2600      	movs	r6, #0
  408f48:	230c      	movs	r3, #12
  408f4a:	4630      	mov	r0, r6
  408f4c:	f8c8 3000 	str.w	r3, [r8]
  408f50:	b003      	add	sp, #12
  408f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408f56:	462e      	mov	r6, r5
  408f58:	1be3      	subs	r3, r4, r7
  408f5a:	2b0f      	cmp	r3, #15
  408f5c:	d81e      	bhi.n	408f9c <_realloc_r+0x104>
  408f5e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  408f62:	f003 0301 	and.w	r3, r3, #1
  408f66:	4323      	orrs	r3, r4
  408f68:	444c      	add	r4, r9
  408f6a:	f8c9 3004 	str.w	r3, [r9, #4]
  408f6e:	6863      	ldr	r3, [r4, #4]
  408f70:	f043 0301 	orr.w	r3, r3, #1
  408f74:	6063      	str	r3, [r4, #4]
  408f76:	4640      	mov	r0, r8
  408f78:	f7fe f8ec 	bl	407154 <__malloc_unlock>
  408f7c:	4630      	mov	r0, r6
  408f7e:	b003      	add	sp, #12
  408f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408f84:	f023 0303 	bic.w	r3, r3, #3
  408f88:	18e1      	adds	r1, r4, r3
  408f8a:	4291      	cmp	r1, r2
  408f8c:	db1f      	blt.n	408fce <_realloc_r+0x136>
  408f8e:	68c3      	ldr	r3, [r0, #12]
  408f90:	6882      	ldr	r2, [r0, #8]
  408f92:	462e      	mov	r6, r5
  408f94:	60d3      	str	r3, [r2, #12]
  408f96:	460c      	mov	r4, r1
  408f98:	609a      	str	r2, [r3, #8]
  408f9a:	e7dd      	b.n	408f58 <_realloc_r+0xc0>
  408f9c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  408fa0:	eb09 0107 	add.w	r1, r9, r7
  408fa4:	f002 0201 	and.w	r2, r2, #1
  408fa8:	444c      	add	r4, r9
  408faa:	f043 0301 	orr.w	r3, r3, #1
  408fae:	4317      	orrs	r7, r2
  408fb0:	f8c9 7004 	str.w	r7, [r9, #4]
  408fb4:	604b      	str	r3, [r1, #4]
  408fb6:	6863      	ldr	r3, [r4, #4]
  408fb8:	f043 0301 	orr.w	r3, r3, #1
  408fbc:	3108      	adds	r1, #8
  408fbe:	6063      	str	r3, [r4, #4]
  408fc0:	4640      	mov	r0, r8
  408fc2:	f7ff fb87 	bl	4086d4 <_free_r>
  408fc6:	e7d6      	b.n	408f76 <_realloc_r+0xde>
  408fc8:	4611      	mov	r1, r2
  408fca:	f7fd bd25 	b.w	406a18 <_malloc_r>
  408fce:	f01e 0f01 	tst.w	lr, #1
  408fd2:	d18e      	bne.n	408ef2 <_realloc_r+0x5a>
  408fd4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408fd8:	eba9 0a01 	sub.w	sl, r9, r1
  408fdc:	f8da 1004 	ldr.w	r1, [sl, #4]
  408fe0:	f021 0103 	bic.w	r1, r1, #3
  408fe4:	440b      	add	r3, r1
  408fe6:	4423      	add	r3, r4
  408fe8:	4293      	cmp	r3, r2
  408fea:	db25      	blt.n	409038 <_realloc_r+0x1a0>
  408fec:	68c2      	ldr	r2, [r0, #12]
  408fee:	6881      	ldr	r1, [r0, #8]
  408ff0:	4656      	mov	r6, sl
  408ff2:	60ca      	str	r2, [r1, #12]
  408ff4:	6091      	str	r1, [r2, #8]
  408ff6:	f8da 100c 	ldr.w	r1, [sl, #12]
  408ffa:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408ffe:	1f22      	subs	r2, r4, #4
  409000:	2a24      	cmp	r2, #36	; 0x24
  409002:	60c1      	str	r1, [r0, #12]
  409004:	6088      	str	r0, [r1, #8]
  409006:	f200 8094 	bhi.w	409132 <_realloc_r+0x29a>
  40900a:	2a13      	cmp	r2, #19
  40900c:	d96f      	bls.n	4090ee <_realloc_r+0x256>
  40900e:	6829      	ldr	r1, [r5, #0]
  409010:	f8ca 1008 	str.w	r1, [sl, #8]
  409014:	6869      	ldr	r1, [r5, #4]
  409016:	f8ca 100c 	str.w	r1, [sl, #12]
  40901a:	2a1b      	cmp	r2, #27
  40901c:	f200 80a2 	bhi.w	409164 <_realloc_r+0x2cc>
  409020:	3508      	adds	r5, #8
  409022:	f10a 0210 	add.w	r2, sl, #16
  409026:	e063      	b.n	4090f0 <_realloc_r+0x258>
  409028:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40902c:	eba9 0a03 	sub.w	sl, r9, r3
  409030:	f8da 1004 	ldr.w	r1, [sl, #4]
  409034:	f021 0103 	bic.w	r1, r1, #3
  409038:	1863      	adds	r3, r4, r1
  40903a:	4293      	cmp	r3, r2
  40903c:	f6ff af59 	blt.w	408ef2 <_realloc_r+0x5a>
  409040:	4656      	mov	r6, sl
  409042:	e7d8      	b.n	408ff6 <_realloc_r+0x15e>
  409044:	6841      	ldr	r1, [r0, #4]
  409046:	f021 0b03 	bic.w	fp, r1, #3
  40904a:	44a3      	add	fp, r4
  40904c:	f107 0010 	add.w	r0, r7, #16
  409050:	4583      	cmp	fp, r0
  409052:	da56      	bge.n	409102 <_realloc_r+0x26a>
  409054:	f01e 0f01 	tst.w	lr, #1
  409058:	f47f af4b 	bne.w	408ef2 <_realloc_r+0x5a>
  40905c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  409060:	eba9 0a01 	sub.w	sl, r9, r1
  409064:	f8da 1004 	ldr.w	r1, [sl, #4]
  409068:	f021 0103 	bic.w	r1, r1, #3
  40906c:	448b      	add	fp, r1
  40906e:	4558      	cmp	r0, fp
  409070:	dce2      	bgt.n	409038 <_realloc_r+0x1a0>
  409072:	4656      	mov	r6, sl
  409074:	f8da 100c 	ldr.w	r1, [sl, #12]
  409078:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40907c:	1f22      	subs	r2, r4, #4
  40907e:	2a24      	cmp	r2, #36	; 0x24
  409080:	60c1      	str	r1, [r0, #12]
  409082:	6088      	str	r0, [r1, #8]
  409084:	f200 808f 	bhi.w	4091a6 <_realloc_r+0x30e>
  409088:	2a13      	cmp	r2, #19
  40908a:	f240 808a 	bls.w	4091a2 <_realloc_r+0x30a>
  40908e:	6829      	ldr	r1, [r5, #0]
  409090:	f8ca 1008 	str.w	r1, [sl, #8]
  409094:	6869      	ldr	r1, [r5, #4]
  409096:	f8ca 100c 	str.w	r1, [sl, #12]
  40909a:	2a1b      	cmp	r2, #27
  40909c:	f200 808a 	bhi.w	4091b4 <_realloc_r+0x31c>
  4090a0:	3508      	adds	r5, #8
  4090a2:	f10a 0210 	add.w	r2, sl, #16
  4090a6:	6829      	ldr	r1, [r5, #0]
  4090a8:	6011      	str	r1, [r2, #0]
  4090aa:	6869      	ldr	r1, [r5, #4]
  4090ac:	6051      	str	r1, [r2, #4]
  4090ae:	68a9      	ldr	r1, [r5, #8]
  4090b0:	6091      	str	r1, [r2, #8]
  4090b2:	eb0a 0107 	add.w	r1, sl, r7
  4090b6:	ebab 0207 	sub.w	r2, fp, r7
  4090ba:	f042 0201 	orr.w	r2, r2, #1
  4090be:	6099      	str	r1, [r3, #8]
  4090c0:	604a      	str	r2, [r1, #4]
  4090c2:	f8da 3004 	ldr.w	r3, [sl, #4]
  4090c6:	f003 0301 	and.w	r3, r3, #1
  4090ca:	431f      	orrs	r7, r3
  4090cc:	4640      	mov	r0, r8
  4090ce:	f8ca 7004 	str.w	r7, [sl, #4]
  4090d2:	f7fe f83f 	bl	407154 <__malloc_unlock>
  4090d6:	e751      	b.n	408f7c <_realloc_r+0xe4>
  4090d8:	682b      	ldr	r3, [r5, #0]
  4090da:	6003      	str	r3, [r0, #0]
  4090dc:	686b      	ldr	r3, [r5, #4]
  4090de:	6043      	str	r3, [r0, #4]
  4090e0:	2a1b      	cmp	r2, #27
  4090e2:	d82d      	bhi.n	409140 <_realloc_r+0x2a8>
  4090e4:	f100 0308 	add.w	r3, r0, #8
  4090e8:	f105 0208 	add.w	r2, r5, #8
  4090ec:	e71b      	b.n	408f26 <_realloc_r+0x8e>
  4090ee:	4632      	mov	r2, r6
  4090f0:	6829      	ldr	r1, [r5, #0]
  4090f2:	6011      	str	r1, [r2, #0]
  4090f4:	6869      	ldr	r1, [r5, #4]
  4090f6:	6051      	str	r1, [r2, #4]
  4090f8:	68a9      	ldr	r1, [r5, #8]
  4090fa:	6091      	str	r1, [r2, #8]
  4090fc:	461c      	mov	r4, r3
  4090fe:	46d1      	mov	r9, sl
  409100:	e72a      	b.n	408f58 <_realloc_r+0xc0>
  409102:	eb09 0107 	add.w	r1, r9, r7
  409106:	ebab 0b07 	sub.w	fp, fp, r7
  40910a:	f04b 0201 	orr.w	r2, fp, #1
  40910e:	6099      	str	r1, [r3, #8]
  409110:	604a      	str	r2, [r1, #4]
  409112:	f855 3c04 	ldr.w	r3, [r5, #-4]
  409116:	f003 0301 	and.w	r3, r3, #1
  40911a:	431f      	orrs	r7, r3
  40911c:	4640      	mov	r0, r8
  40911e:	f845 7c04 	str.w	r7, [r5, #-4]
  409122:	f7fe f817 	bl	407154 <__malloc_unlock>
  409126:	462e      	mov	r6, r5
  409128:	e728      	b.n	408f7c <_realloc_r+0xe4>
  40912a:	4629      	mov	r1, r5
  40912c:	f7ff fe50 	bl	408dd0 <memmove>
  409130:	e6ff      	b.n	408f32 <_realloc_r+0x9a>
  409132:	4629      	mov	r1, r5
  409134:	4630      	mov	r0, r6
  409136:	461c      	mov	r4, r3
  409138:	46d1      	mov	r9, sl
  40913a:	f7ff fe49 	bl	408dd0 <memmove>
  40913e:	e70b      	b.n	408f58 <_realloc_r+0xc0>
  409140:	68ab      	ldr	r3, [r5, #8]
  409142:	6083      	str	r3, [r0, #8]
  409144:	68eb      	ldr	r3, [r5, #12]
  409146:	60c3      	str	r3, [r0, #12]
  409148:	2a24      	cmp	r2, #36	; 0x24
  40914a:	d017      	beq.n	40917c <_realloc_r+0x2e4>
  40914c:	f100 0310 	add.w	r3, r0, #16
  409150:	f105 0210 	add.w	r2, r5, #16
  409154:	e6e7      	b.n	408f26 <_realloc_r+0x8e>
  409156:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40915a:	f023 0303 	bic.w	r3, r3, #3
  40915e:	441c      	add	r4, r3
  409160:	462e      	mov	r6, r5
  409162:	e6f9      	b.n	408f58 <_realloc_r+0xc0>
  409164:	68a9      	ldr	r1, [r5, #8]
  409166:	f8ca 1010 	str.w	r1, [sl, #16]
  40916a:	68e9      	ldr	r1, [r5, #12]
  40916c:	f8ca 1014 	str.w	r1, [sl, #20]
  409170:	2a24      	cmp	r2, #36	; 0x24
  409172:	d00c      	beq.n	40918e <_realloc_r+0x2f6>
  409174:	3510      	adds	r5, #16
  409176:	f10a 0218 	add.w	r2, sl, #24
  40917a:	e7b9      	b.n	4090f0 <_realloc_r+0x258>
  40917c:	692b      	ldr	r3, [r5, #16]
  40917e:	6103      	str	r3, [r0, #16]
  409180:	696b      	ldr	r3, [r5, #20]
  409182:	6143      	str	r3, [r0, #20]
  409184:	f105 0218 	add.w	r2, r5, #24
  409188:	f100 0318 	add.w	r3, r0, #24
  40918c:	e6cb      	b.n	408f26 <_realloc_r+0x8e>
  40918e:	692a      	ldr	r2, [r5, #16]
  409190:	f8ca 2018 	str.w	r2, [sl, #24]
  409194:	696a      	ldr	r2, [r5, #20]
  409196:	f8ca 201c 	str.w	r2, [sl, #28]
  40919a:	3518      	adds	r5, #24
  40919c:	f10a 0220 	add.w	r2, sl, #32
  4091a0:	e7a6      	b.n	4090f0 <_realloc_r+0x258>
  4091a2:	4632      	mov	r2, r6
  4091a4:	e77f      	b.n	4090a6 <_realloc_r+0x20e>
  4091a6:	4629      	mov	r1, r5
  4091a8:	4630      	mov	r0, r6
  4091aa:	9301      	str	r3, [sp, #4]
  4091ac:	f7ff fe10 	bl	408dd0 <memmove>
  4091b0:	9b01      	ldr	r3, [sp, #4]
  4091b2:	e77e      	b.n	4090b2 <_realloc_r+0x21a>
  4091b4:	68a9      	ldr	r1, [r5, #8]
  4091b6:	f8ca 1010 	str.w	r1, [sl, #16]
  4091ba:	68e9      	ldr	r1, [r5, #12]
  4091bc:	f8ca 1014 	str.w	r1, [sl, #20]
  4091c0:	2a24      	cmp	r2, #36	; 0x24
  4091c2:	d003      	beq.n	4091cc <_realloc_r+0x334>
  4091c4:	3510      	adds	r5, #16
  4091c6:	f10a 0218 	add.w	r2, sl, #24
  4091ca:	e76c      	b.n	4090a6 <_realloc_r+0x20e>
  4091cc:	692a      	ldr	r2, [r5, #16]
  4091ce:	f8ca 2018 	str.w	r2, [sl, #24]
  4091d2:	696a      	ldr	r2, [r5, #20]
  4091d4:	f8ca 201c 	str.w	r2, [sl, #28]
  4091d8:	3518      	adds	r5, #24
  4091da:	f10a 0220 	add.w	r2, sl, #32
  4091de:	e762      	b.n	4090a6 <_realloc_r+0x20e>
  4091e0:	20400440 	.word	0x20400440

004091e4 <__sread>:
  4091e4:	b510      	push	{r4, lr}
  4091e6:	460c      	mov	r4, r1
  4091e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4091ec:	f000 f9f6 	bl	4095dc <_read_r>
  4091f0:	2800      	cmp	r0, #0
  4091f2:	db03      	blt.n	4091fc <__sread+0x18>
  4091f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4091f6:	4403      	add	r3, r0
  4091f8:	6523      	str	r3, [r4, #80]	; 0x50
  4091fa:	bd10      	pop	{r4, pc}
  4091fc:	89a3      	ldrh	r3, [r4, #12]
  4091fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  409202:	81a3      	strh	r3, [r4, #12]
  409204:	bd10      	pop	{r4, pc}
  409206:	bf00      	nop

00409208 <__swrite>:
  409208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40920c:	4616      	mov	r6, r2
  40920e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  409212:	461f      	mov	r7, r3
  409214:	05d3      	lsls	r3, r2, #23
  409216:	460c      	mov	r4, r1
  409218:	4605      	mov	r5, r0
  40921a:	d507      	bpl.n	40922c <__swrite+0x24>
  40921c:	2200      	movs	r2, #0
  40921e:	2302      	movs	r3, #2
  409220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409224:	f000 f9c4 	bl	4095b0 <_lseek_r>
  409228:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40922c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  409230:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  409234:	81a2      	strh	r2, [r4, #12]
  409236:	463b      	mov	r3, r7
  409238:	4632      	mov	r2, r6
  40923a:	4628      	mov	r0, r5
  40923c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  409240:	f000 b8a4 	b.w	40938c <_write_r>

00409244 <__sseek>:
  409244:	b510      	push	{r4, lr}
  409246:	460c      	mov	r4, r1
  409248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40924c:	f000 f9b0 	bl	4095b0 <_lseek_r>
  409250:	89a3      	ldrh	r3, [r4, #12]
  409252:	1c42      	adds	r2, r0, #1
  409254:	bf0e      	itee	eq
  409256:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40925a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40925e:	6520      	strne	r0, [r4, #80]	; 0x50
  409260:	81a3      	strh	r3, [r4, #12]
  409262:	bd10      	pop	{r4, pc}

00409264 <__sclose>:
  409264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  409268:	f000 b908 	b.w	40947c <_close_r>

0040926c <__swbuf_r>:
  40926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40926e:	460d      	mov	r5, r1
  409270:	4614      	mov	r4, r2
  409272:	4606      	mov	r6, r0
  409274:	b110      	cbz	r0, 40927c <__swbuf_r+0x10>
  409276:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409278:	2b00      	cmp	r3, #0
  40927a:	d04b      	beq.n	409314 <__swbuf_r+0xa8>
  40927c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409280:	69a3      	ldr	r3, [r4, #24]
  409282:	60a3      	str	r3, [r4, #8]
  409284:	b291      	uxth	r1, r2
  409286:	0708      	lsls	r0, r1, #28
  409288:	d539      	bpl.n	4092fe <__swbuf_r+0x92>
  40928a:	6923      	ldr	r3, [r4, #16]
  40928c:	2b00      	cmp	r3, #0
  40928e:	d036      	beq.n	4092fe <__swbuf_r+0x92>
  409290:	b2ed      	uxtb	r5, r5
  409292:	0489      	lsls	r1, r1, #18
  409294:	462f      	mov	r7, r5
  409296:	d515      	bpl.n	4092c4 <__swbuf_r+0x58>
  409298:	6822      	ldr	r2, [r4, #0]
  40929a:	6961      	ldr	r1, [r4, #20]
  40929c:	1ad3      	subs	r3, r2, r3
  40929e:	428b      	cmp	r3, r1
  4092a0:	da1c      	bge.n	4092dc <__swbuf_r+0x70>
  4092a2:	3301      	adds	r3, #1
  4092a4:	68a1      	ldr	r1, [r4, #8]
  4092a6:	1c50      	adds	r0, r2, #1
  4092a8:	3901      	subs	r1, #1
  4092aa:	60a1      	str	r1, [r4, #8]
  4092ac:	6020      	str	r0, [r4, #0]
  4092ae:	7015      	strb	r5, [r2, #0]
  4092b0:	6962      	ldr	r2, [r4, #20]
  4092b2:	429a      	cmp	r2, r3
  4092b4:	d01a      	beq.n	4092ec <__swbuf_r+0x80>
  4092b6:	89a3      	ldrh	r3, [r4, #12]
  4092b8:	07db      	lsls	r3, r3, #31
  4092ba:	d501      	bpl.n	4092c0 <__swbuf_r+0x54>
  4092bc:	2d0a      	cmp	r5, #10
  4092be:	d015      	beq.n	4092ec <__swbuf_r+0x80>
  4092c0:	4638      	mov	r0, r7
  4092c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4092c4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4092c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4092ca:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4092ce:	81a2      	strh	r2, [r4, #12]
  4092d0:	6822      	ldr	r2, [r4, #0]
  4092d2:	6661      	str	r1, [r4, #100]	; 0x64
  4092d4:	6961      	ldr	r1, [r4, #20]
  4092d6:	1ad3      	subs	r3, r2, r3
  4092d8:	428b      	cmp	r3, r1
  4092da:	dbe2      	blt.n	4092a2 <__swbuf_r+0x36>
  4092dc:	4621      	mov	r1, r4
  4092de:	4630      	mov	r0, r6
  4092e0:	f7ff f87a 	bl	4083d8 <_fflush_r>
  4092e4:	b940      	cbnz	r0, 4092f8 <__swbuf_r+0x8c>
  4092e6:	6822      	ldr	r2, [r4, #0]
  4092e8:	2301      	movs	r3, #1
  4092ea:	e7db      	b.n	4092a4 <__swbuf_r+0x38>
  4092ec:	4621      	mov	r1, r4
  4092ee:	4630      	mov	r0, r6
  4092f0:	f7ff f872 	bl	4083d8 <_fflush_r>
  4092f4:	2800      	cmp	r0, #0
  4092f6:	d0e3      	beq.n	4092c0 <__swbuf_r+0x54>
  4092f8:	f04f 37ff 	mov.w	r7, #4294967295
  4092fc:	e7e0      	b.n	4092c0 <__swbuf_r+0x54>
  4092fe:	4621      	mov	r1, r4
  409300:	4630      	mov	r0, r6
  409302:	f7fe ff55 	bl	4081b0 <__swsetup_r>
  409306:	2800      	cmp	r0, #0
  409308:	d1f6      	bne.n	4092f8 <__swbuf_r+0x8c>
  40930a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40930e:	6923      	ldr	r3, [r4, #16]
  409310:	b291      	uxth	r1, r2
  409312:	e7bd      	b.n	409290 <__swbuf_r+0x24>
  409314:	f7ff f8b8 	bl	408488 <__sinit>
  409318:	e7b0      	b.n	40927c <__swbuf_r+0x10>
  40931a:	bf00      	nop

0040931c <_wcrtomb_r>:
  40931c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40931e:	4606      	mov	r6, r0
  409320:	b085      	sub	sp, #20
  409322:	461f      	mov	r7, r3
  409324:	b189      	cbz	r1, 40934a <_wcrtomb_r+0x2e>
  409326:	4c10      	ldr	r4, [pc, #64]	; (409368 <_wcrtomb_r+0x4c>)
  409328:	4d10      	ldr	r5, [pc, #64]	; (40936c <_wcrtomb_r+0x50>)
  40932a:	6824      	ldr	r4, [r4, #0]
  40932c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40932e:	2c00      	cmp	r4, #0
  409330:	bf08      	it	eq
  409332:	462c      	moveq	r4, r5
  409334:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  409338:	47a0      	blx	r4
  40933a:	1c43      	adds	r3, r0, #1
  40933c:	d103      	bne.n	409346 <_wcrtomb_r+0x2a>
  40933e:	2200      	movs	r2, #0
  409340:	238a      	movs	r3, #138	; 0x8a
  409342:	603a      	str	r2, [r7, #0]
  409344:	6033      	str	r3, [r6, #0]
  409346:	b005      	add	sp, #20
  409348:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40934a:	460c      	mov	r4, r1
  40934c:	4906      	ldr	r1, [pc, #24]	; (409368 <_wcrtomb_r+0x4c>)
  40934e:	4a07      	ldr	r2, [pc, #28]	; (40936c <_wcrtomb_r+0x50>)
  409350:	6809      	ldr	r1, [r1, #0]
  409352:	6b49      	ldr	r1, [r1, #52]	; 0x34
  409354:	2900      	cmp	r1, #0
  409356:	bf08      	it	eq
  409358:	4611      	moveq	r1, r2
  40935a:	4622      	mov	r2, r4
  40935c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  409360:	a901      	add	r1, sp, #4
  409362:	47a0      	blx	r4
  409364:	e7e9      	b.n	40933a <_wcrtomb_r+0x1e>
  409366:	bf00      	nop
  409368:	20400014 	.word	0x20400014
  40936c:	20400854 	.word	0x20400854

00409370 <__ascii_wctomb>:
  409370:	b121      	cbz	r1, 40937c <__ascii_wctomb+0xc>
  409372:	2aff      	cmp	r2, #255	; 0xff
  409374:	d804      	bhi.n	409380 <__ascii_wctomb+0x10>
  409376:	700a      	strb	r2, [r1, #0]
  409378:	2001      	movs	r0, #1
  40937a:	4770      	bx	lr
  40937c:	4608      	mov	r0, r1
  40937e:	4770      	bx	lr
  409380:	238a      	movs	r3, #138	; 0x8a
  409382:	6003      	str	r3, [r0, #0]
  409384:	f04f 30ff 	mov.w	r0, #4294967295
  409388:	4770      	bx	lr
  40938a:	bf00      	nop

0040938c <_write_r>:
  40938c:	b570      	push	{r4, r5, r6, lr}
  40938e:	460d      	mov	r5, r1
  409390:	4c08      	ldr	r4, [pc, #32]	; (4093b4 <_write_r+0x28>)
  409392:	4611      	mov	r1, r2
  409394:	4606      	mov	r6, r0
  409396:	461a      	mov	r2, r3
  409398:	4628      	mov	r0, r5
  40939a:	2300      	movs	r3, #0
  40939c:	6023      	str	r3, [r4, #0]
  40939e:	f7f7 fcf9 	bl	400d94 <_write>
  4093a2:	1c43      	adds	r3, r0, #1
  4093a4:	d000      	beq.n	4093a8 <_write_r+0x1c>
  4093a6:	bd70      	pop	{r4, r5, r6, pc}
  4093a8:	6823      	ldr	r3, [r4, #0]
  4093aa:	2b00      	cmp	r3, #0
  4093ac:	d0fb      	beq.n	4093a6 <_write_r+0x1a>
  4093ae:	6033      	str	r3, [r6, #0]
  4093b0:	bd70      	pop	{r4, r5, r6, pc}
  4093b2:	bf00      	nop
  4093b4:	2040ca84 	.word	0x2040ca84

004093b8 <__register_exitproc>:
  4093b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4093bc:	4d2c      	ldr	r5, [pc, #176]	; (409470 <__register_exitproc+0xb8>)
  4093be:	4606      	mov	r6, r0
  4093c0:	6828      	ldr	r0, [r5, #0]
  4093c2:	4698      	mov	r8, r3
  4093c4:	460f      	mov	r7, r1
  4093c6:	4691      	mov	r9, r2
  4093c8:	f7ff fc1e 	bl	408c08 <__retarget_lock_acquire_recursive>
  4093cc:	4b29      	ldr	r3, [pc, #164]	; (409474 <__register_exitproc+0xbc>)
  4093ce:	681c      	ldr	r4, [r3, #0]
  4093d0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4093d4:	2b00      	cmp	r3, #0
  4093d6:	d03e      	beq.n	409456 <__register_exitproc+0x9e>
  4093d8:	685a      	ldr	r2, [r3, #4]
  4093da:	2a1f      	cmp	r2, #31
  4093dc:	dc1c      	bgt.n	409418 <__register_exitproc+0x60>
  4093de:	f102 0e01 	add.w	lr, r2, #1
  4093e2:	b176      	cbz	r6, 409402 <__register_exitproc+0x4a>
  4093e4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4093e8:	2401      	movs	r4, #1
  4093ea:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4093ee:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4093f2:	4094      	lsls	r4, r2
  4093f4:	4320      	orrs	r0, r4
  4093f6:	2e02      	cmp	r6, #2
  4093f8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4093fc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  409400:	d023      	beq.n	40944a <__register_exitproc+0x92>
  409402:	3202      	adds	r2, #2
  409404:	f8c3 e004 	str.w	lr, [r3, #4]
  409408:	6828      	ldr	r0, [r5, #0]
  40940a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40940e:	f7ff fbfd 	bl	408c0c <__retarget_lock_release_recursive>
  409412:	2000      	movs	r0, #0
  409414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409418:	4b17      	ldr	r3, [pc, #92]	; (409478 <__register_exitproc+0xc0>)
  40941a:	b30b      	cbz	r3, 409460 <__register_exitproc+0xa8>
  40941c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  409420:	f7fd faf2 	bl	406a08 <malloc>
  409424:	4603      	mov	r3, r0
  409426:	b1d8      	cbz	r0, 409460 <__register_exitproc+0xa8>
  409428:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40942c:	6002      	str	r2, [r0, #0]
  40942e:	2100      	movs	r1, #0
  409430:	6041      	str	r1, [r0, #4]
  409432:	460a      	mov	r2, r1
  409434:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  409438:	f04f 0e01 	mov.w	lr, #1
  40943c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  409440:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  409444:	2e00      	cmp	r6, #0
  409446:	d0dc      	beq.n	409402 <__register_exitproc+0x4a>
  409448:	e7cc      	b.n	4093e4 <__register_exitproc+0x2c>
  40944a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40944e:	430c      	orrs	r4, r1
  409450:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  409454:	e7d5      	b.n	409402 <__register_exitproc+0x4a>
  409456:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40945a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40945e:	e7bb      	b.n	4093d8 <__register_exitproc+0x20>
  409460:	6828      	ldr	r0, [r5, #0]
  409462:	f7ff fbd3 	bl	408c0c <__retarget_lock_release_recursive>
  409466:	f04f 30ff 	mov.w	r0, #4294967295
  40946a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40946e:	bf00      	nop
  409470:	20400850 	.word	0x20400850
  409474:	00409c08 	.word	0x00409c08
  409478:	00406a09 	.word	0x00406a09

0040947c <_close_r>:
  40947c:	b538      	push	{r3, r4, r5, lr}
  40947e:	4c07      	ldr	r4, [pc, #28]	; (40949c <_close_r+0x20>)
  409480:	2300      	movs	r3, #0
  409482:	4605      	mov	r5, r0
  409484:	4608      	mov	r0, r1
  409486:	6023      	str	r3, [r4, #0]
  409488:	f7f8 ff26 	bl	4022d8 <_close>
  40948c:	1c43      	adds	r3, r0, #1
  40948e:	d000      	beq.n	409492 <_close_r+0x16>
  409490:	bd38      	pop	{r3, r4, r5, pc}
  409492:	6823      	ldr	r3, [r4, #0]
  409494:	2b00      	cmp	r3, #0
  409496:	d0fb      	beq.n	409490 <_close_r+0x14>
  409498:	602b      	str	r3, [r5, #0]
  40949a:	bd38      	pop	{r3, r4, r5, pc}
  40949c:	2040ca84 	.word	0x2040ca84

004094a0 <_fclose_r>:
  4094a0:	b570      	push	{r4, r5, r6, lr}
  4094a2:	b159      	cbz	r1, 4094bc <_fclose_r+0x1c>
  4094a4:	4605      	mov	r5, r0
  4094a6:	460c      	mov	r4, r1
  4094a8:	b110      	cbz	r0, 4094b0 <_fclose_r+0x10>
  4094aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4094ac:	2b00      	cmp	r3, #0
  4094ae:	d03c      	beq.n	40952a <_fclose_r+0x8a>
  4094b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4094b2:	07d8      	lsls	r0, r3, #31
  4094b4:	d505      	bpl.n	4094c2 <_fclose_r+0x22>
  4094b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4094ba:	b92b      	cbnz	r3, 4094c8 <_fclose_r+0x28>
  4094bc:	2600      	movs	r6, #0
  4094be:	4630      	mov	r0, r6
  4094c0:	bd70      	pop	{r4, r5, r6, pc}
  4094c2:	89a3      	ldrh	r3, [r4, #12]
  4094c4:	0599      	lsls	r1, r3, #22
  4094c6:	d53c      	bpl.n	409542 <_fclose_r+0xa2>
  4094c8:	4621      	mov	r1, r4
  4094ca:	4628      	mov	r0, r5
  4094cc:	f7fe fee4 	bl	408298 <__sflush_r>
  4094d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4094d2:	4606      	mov	r6, r0
  4094d4:	b133      	cbz	r3, 4094e4 <_fclose_r+0x44>
  4094d6:	69e1      	ldr	r1, [r4, #28]
  4094d8:	4628      	mov	r0, r5
  4094da:	4798      	blx	r3
  4094dc:	2800      	cmp	r0, #0
  4094de:	bfb8      	it	lt
  4094e0:	f04f 36ff 	movlt.w	r6, #4294967295
  4094e4:	89a3      	ldrh	r3, [r4, #12]
  4094e6:	061a      	lsls	r2, r3, #24
  4094e8:	d422      	bmi.n	409530 <_fclose_r+0x90>
  4094ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4094ec:	b141      	cbz	r1, 409500 <_fclose_r+0x60>
  4094ee:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4094f2:	4299      	cmp	r1, r3
  4094f4:	d002      	beq.n	4094fc <_fclose_r+0x5c>
  4094f6:	4628      	mov	r0, r5
  4094f8:	f7ff f8ec 	bl	4086d4 <_free_r>
  4094fc:	2300      	movs	r3, #0
  4094fe:	6323      	str	r3, [r4, #48]	; 0x30
  409500:	6c61      	ldr	r1, [r4, #68]	; 0x44
  409502:	b121      	cbz	r1, 40950e <_fclose_r+0x6e>
  409504:	4628      	mov	r0, r5
  409506:	f7ff f8e5 	bl	4086d4 <_free_r>
  40950a:	2300      	movs	r3, #0
  40950c:	6463      	str	r3, [r4, #68]	; 0x44
  40950e:	f7fe ffe7 	bl	4084e0 <__sfp_lock_acquire>
  409512:	6e63      	ldr	r3, [r4, #100]	; 0x64
  409514:	2200      	movs	r2, #0
  409516:	07db      	lsls	r3, r3, #31
  409518:	81a2      	strh	r2, [r4, #12]
  40951a:	d50e      	bpl.n	40953a <_fclose_r+0x9a>
  40951c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40951e:	f7ff fb71 	bl	408c04 <__retarget_lock_close_recursive>
  409522:	f7fe ffe3 	bl	4084ec <__sfp_lock_release>
  409526:	4630      	mov	r0, r6
  409528:	bd70      	pop	{r4, r5, r6, pc}
  40952a:	f7fe ffad 	bl	408488 <__sinit>
  40952e:	e7bf      	b.n	4094b0 <_fclose_r+0x10>
  409530:	6921      	ldr	r1, [r4, #16]
  409532:	4628      	mov	r0, r5
  409534:	f7ff f8ce 	bl	4086d4 <_free_r>
  409538:	e7d7      	b.n	4094ea <_fclose_r+0x4a>
  40953a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40953c:	f7ff fb66 	bl	408c0c <__retarget_lock_release_recursive>
  409540:	e7ec      	b.n	40951c <_fclose_r+0x7c>
  409542:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409544:	f7ff fb60 	bl	408c08 <__retarget_lock_acquire_recursive>
  409548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40954c:	2b00      	cmp	r3, #0
  40954e:	d1bb      	bne.n	4094c8 <_fclose_r+0x28>
  409550:	6e66      	ldr	r6, [r4, #100]	; 0x64
  409552:	f016 0601 	ands.w	r6, r6, #1
  409556:	d1b1      	bne.n	4094bc <_fclose_r+0x1c>
  409558:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40955a:	f7ff fb57 	bl	408c0c <__retarget_lock_release_recursive>
  40955e:	4630      	mov	r0, r6
  409560:	bd70      	pop	{r4, r5, r6, pc}
  409562:	bf00      	nop

00409564 <_fstat_r>:
  409564:	b538      	push	{r3, r4, r5, lr}
  409566:	460b      	mov	r3, r1
  409568:	4c07      	ldr	r4, [pc, #28]	; (409588 <_fstat_r+0x24>)
  40956a:	4605      	mov	r5, r0
  40956c:	4611      	mov	r1, r2
  40956e:	4618      	mov	r0, r3
  409570:	2300      	movs	r3, #0
  409572:	6023      	str	r3, [r4, #0]
  409574:	f7f8 feb3 	bl	4022de <_fstat>
  409578:	1c43      	adds	r3, r0, #1
  40957a:	d000      	beq.n	40957e <_fstat_r+0x1a>
  40957c:	bd38      	pop	{r3, r4, r5, pc}
  40957e:	6823      	ldr	r3, [r4, #0]
  409580:	2b00      	cmp	r3, #0
  409582:	d0fb      	beq.n	40957c <_fstat_r+0x18>
  409584:	602b      	str	r3, [r5, #0]
  409586:	bd38      	pop	{r3, r4, r5, pc}
  409588:	2040ca84 	.word	0x2040ca84

0040958c <_isatty_r>:
  40958c:	b538      	push	{r3, r4, r5, lr}
  40958e:	4c07      	ldr	r4, [pc, #28]	; (4095ac <_isatty_r+0x20>)
  409590:	2300      	movs	r3, #0
  409592:	4605      	mov	r5, r0
  409594:	4608      	mov	r0, r1
  409596:	6023      	str	r3, [r4, #0]
  409598:	f7f8 fea6 	bl	4022e8 <_isatty>
  40959c:	1c43      	adds	r3, r0, #1
  40959e:	d000      	beq.n	4095a2 <_isatty_r+0x16>
  4095a0:	bd38      	pop	{r3, r4, r5, pc}
  4095a2:	6823      	ldr	r3, [r4, #0]
  4095a4:	2b00      	cmp	r3, #0
  4095a6:	d0fb      	beq.n	4095a0 <_isatty_r+0x14>
  4095a8:	602b      	str	r3, [r5, #0]
  4095aa:	bd38      	pop	{r3, r4, r5, pc}
  4095ac:	2040ca84 	.word	0x2040ca84

004095b0 <_lseek_r>:
  4095b0:	b570      	push	{r4, r5, r6, lr}
  4095b2:	460d      	mov	r5, r1
  4095b4:	4c08      	ldr	r4, [pc, #32]	; (4095d8 <_lseek_r+0x28>)
  4095b6:	4611      	mov	r1, r2
  4095b8:	4606      	mov	r6, r0
  4095ba:	461a      	mov	r2, r3
  4095bc:	4628      	mov	r0, r5
  4095be:	2300      	movs	r3, #0
  4095c0:	6023      	str	r3, [r4, #0]
  4095c2:	f7f8 fe93 	bl	4022ec <_lseek>
  4095c6:	1c43      	adds	r3, r0, #1
  4095c8:	d000      	beq.n	4095cc <_lseek_r+0x1c>
  4095ca:	bd70      	pop	{r4, r5, r6, pc}
  4095cc:	6823      	ldr	r3, [r4, #0]
  4095ce:	2b00      	cmp	r3, #0
  4095d0:	d0fb      	beq.n	4095ca <_lseek_r+0x1a>
  4095d2:	6033      	str	r3, [r6, #0]
  4095d4:	bd70      	pop	{r4, r5, r6, pc}
  4095d6:	bf00      	nop
  4095d8:	2040ca84 	.word	0x2040ca84

004095dc <_read_r>:
  4095dc:	b570      	push	{r4, r5, r6, lr}
  4095de:	460d      	mov	r5, r1
  4095e0:	4c08      	ldr	r4, [pc, #32]	; (409604 <_read_r+0x28>)
  4095e2:	4611      	mov	r1, r2
  4095e4:	4606      	mov	r6, r0
  4095e6:	461a      	mov	r2, r3
  4095e8:	4628      	mov	r0, r5
  4095ea:	2300      	movs	r3, #0
  4095ec:	6023      	str	r3, [r4, #0]
  4095ee:	f7f7 fbb3 	bl	400d58 <_read>
  4095f2:	1c43      	adds	r3, r0, #1
  4095f4:	d000      	beq.n	4095f8 <_read_r+0x1c>
  4095f6:	bd70      	pop	{r4, r5, r6, pc}
  4095f8:	6823      	ldr	r3, [r4, #0]
  4095fa:	2b00      	cmp	r3, #0
  4095fc:	d0fb      	beq.n	4095f6 <_read_r+0x1a>
  4095fe:	6033      	str	r3, [r6, #0]
  409600:	bd70      	pop	{r4, r5, r6, pc}
  409602:	bf00      	nop
  409604:	2040ca84 	.word	0x2040ca84

00409608 <__aeabi_uldivmod>:
  409608:	b953      	cbnz	r3, 409620 <__aeabi_uldivmod+0x18>
  40960a:	b94a      	cbnz	r2, 409620 <__aeabi_uldivmod+0x18>
  40960c:	2900      	cmp	r1, #0
  40960e:	bf08      	it	eq
  409610:	2800      	cmpeq	r0, #0
  409612:	bf1c      	itt	ne
  409614:	f04f 31ff 	movne.w	r1, #4294967295
  409618:	f04f 30ff 	movne.w	r0, #4294967295
  40961c:	f000 b97a 	b.w	409914 <__aeabi_idiv0>
  409620:	f1ad 0c08 	sub.w	ip, sp, #8
  409624:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  409628:	f000 f806 	bl	409638 <__udivmoddi4>
  40962c:	f8dd e004 	ldr.w	lr, [sp, #4]
  409630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409634:	b004      	add	sp, #16
  409636:	4770      	bx	lr

00409638 <__udivmoddi4>:
  409638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40963c:	468c      	mov	ip, r1
  40963e:	460d      	mov	r5, r1
  409640:	4604      	mov	r4, r0
  409642:	9e08      	ldr	r6, [sp, #32]
  409644:	2b00      	cmp	r3, #0
  409646:	d151      	bne.n	4096ec <__udivmoddi4+0xb4>
  409648:	428a      	cmp	r2, r1
  40964a:	4617      	mov	r7, r2
  40964c:	d96d      	bls.n	40972a <__udivmoddi4+0xf2>
  40964e:	fab2 fe82 	clz	lr, r2
  409652:	f1be 0f00 	cmp.w	lr, #0
  409656:	d00b      	beq.n	409670 <__udivmoddi4+0x38>
  409658:	f1ce 0c20 	rsb	ip, lr, #32
  40965c:	fa01 f50e 	lsl.w	r5, r1, lr
  409660:	fa20 fc0c 	lsr.w	ip, r0, ip
  409664:	fa02 f70e 	lsl.w	r7, r2, lr
  409668:	ea4c 0c05 	orr.w	ip, ip, r5
  40966c:	fa00 f40e 	lsl.w	r4, r0, lr
  409670:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  409674:	0c25      	lsrs	r5, r4, #16
  409676:	fbbc f8fa 	udiv	r8, ip, sl
  40967a:	fa1f f987 	uxth.w	r9, r7
  40967e:	fb0a cc18 	mls	ip, sl, r8, ip
  409682:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  409686:	fb08 f309 	mul.w	r3, r8, r9
  40968a:	42ab      	cmp	r3, r5
  40968c:	d90a      	bls.n	4096a4 <__udivmoddi4+0x6c>
  40968e:	19ed      	adds	r5, r5, r7
  409690:	f108 32ff 	add.w	r2, r8, #4294967295
  409694:	f080 8123 	bcs.w	4098de <__udivmoddi4+0x2a6>
  409698:	42ab      	cmp	r3, r5
  40969a:	f240 8120 	bls.w	4098de <__udivmoddi4+0x2a6>
  40969e:	f1a8 0802 	sub.w	r8, r8, #2
  4096a2:	443d      	add	r5, r7
  4096a4:	1aed      	subs	r5, r5, r3
  4096a6:	b2a4      	uxth	r4, r4
  4096a8:	fbb5 f0fa 	udiv	r0, r5, sl
  4096ac:	fb0a 5510 	mls	r5, sl, r0, r5
  4096b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4096b4:	fb00 f909 	mul.w	r9, r0, r9
  4096b8:	45a1      	cmp	r9, r4
  4096ba:	d909      	bls.n	4096d0 <__udivmoddi4+0x98>
  4096bc:	19e4      	adds	r4, r4, r7
  4096be:	f100 33ff 	add.w	r3, r0, #4294967295
  4096c2:	f080 810a 	bcs.w	4098da <__udivmoddi4+0x2a2>
  4096c6:	45a1      	cmp	r9, r4
  4096c8:	f240 8107 	bls.w	4098da <__udivmoddi4+0x2a2>
  4096cc:	3802      	subs	r0, #2
  4096ce:	443c      	add	r4, r7
  4096d0:	eba4 0409 	sub.w	r4, r4, r9
  4096d4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4096d8:	2100      	movs	r1, #0
  4096da:	2e00      	cmp	r6, #0
  4096dc:	d061      	beq.n	4097a2 <__udivmoddi4+0x16a>
  4096de:	fa24 f40e 	lsr.w	r4, r4, lr
  4096e2:	2300      	movs	r3, #0
  4096e4:	6034      	str	r4, [r6, #0]
  4096e6:	6073      	str	r3, [r6, #4]
  4096e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4096ec:	428b      	cmp	r3, r1
  4096ee:	d907      	bls.n	409700 <__udivmoddi4+0xc8>
  4096f0:	2e00      	cmp	r6, #0
  4096f2:	d054      	beq.n	40979e <__udivmoddi4+0x166>
  4096f4:	2100      	movs	r1, #0
  4096f6:	e886 0021 	stmia.w	r6, {r0, r5}
  4096fa:	4608      	mov	r0, r1
  4096fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409700:	fab3 f183 	clz	r1, r3
  409704:	2900      	cmp	r1, #0
  409706:	f040 808e 	bne.w	409826 <__udivmoddi4+0x1ee>
  40970a:	42ab      	cmp	r3, r5
  40970c:	d302      	bcc.n	409714 <__udivmoddi4+0xdc>
  40970e:	4282      	cmp	r2, r0
  409710:	f200 80fa 	bhi.w	409908 <__udivmoddi4+0x2d0>
  409714:	1a84      	subs	r4, r0, r2
  409716:	eb65 0503 	sbc.w	r5, r5, r3
  40971a:	2001      	movs	r0, #1
  40971c:	46ac      	mov	ip, r5
  40971e:	2e00      	cmp	r6, #0
  409720:	d03f      	beq.n	4097a2 <__udivmoddi4+0x16a>
  409722:	e886 1010 	stmia.w	r6, {r4, ip}
  409726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40972a:	b912      	cbnz	r2, 409732 <__udivmoddi4+0xfa>
  40972c:	2701      	movs	r7, #1
  40972e:	fbb7 f7f2 	udiv	r7, r7, r2
  409732:	fab7 fe87 	clz	lr, r7
  409736:	f1be 0f00 	cmp.w	lr, #0
  40973a:	d134      	bne.n	4097a6 <__udivmoddi4+0x16e>
  40973c:	1beb      	subs	r3, r5, r7
  40973e:	0c3a      	lsrs	r2, r7, #16
  409740:	fa1f fc87 	uxth.w	ip, r7
  409744:	2101      	movs	r1, #1
  409746:	fbb3 f8f2 	udiv	r8, r3, r2
  40974a:	0c25      	lsrs	r5, r4, #16
  40974c:	fb02 3318 	mls	r3, r2, r8, r3
  409750:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  409754:	fb0c f308 	mul.w	r3, ip, r8
  409758:	42ab      	cmp	r3, r5
  40975a:	d907      	bls.n	40976c <__udivmoddi4+0x134>
  40975c:	19ed      	adds	r5, r5, r7
  40975e:	f108 30ff 	add.w	r0, r8, #4294967295
  409762:	d202      	bcs.n	40976a <__udivmoddi4+0x132>
  409764:	42ab      	cmp	r3, r5
  409766:	f200 80d1 	bhi.w	40990c <__udivmoddi4+0x2d4>
  40976a:	4680      	mov	r8, r0
  40976c:	1aed      	subs	r5, r5, r3
  40976e:	b2a3      	uxth	r3, r4
  409770:	fbb5 f0f2 	udiv	r0, r5, r2
  409774:	fb02 5510 	mls	r5, r2, r0, r5
  409778:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40977c:	fb0c fc00 	mul.w	ip, ip, r0
  409780:	45a4      	cmp	ip, r4
  409782:	d907      	bls.n	409794 <__udivmoddi4+0x15c>
  409784:	19e4      	adds	r4, r4, r7
  409786:	f100 33ff 	add.w	r3, r0, #4294967295
  40978a:	d202      	bcs.n	409792 <__udivmoddi4+0x15a>
  40978c:	45a4      	cmp	ip, r4
  40978e:	f200 80b8 	bhi.w	409902 <__udivmoddi4+0x2ca>
  409792:	4618      	mov	r0, r3
  409794:	eba4 040c 	sub.w	r4, r4, ip
  409798:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40979c:	e79d      	b.n	4096da <__udivmoddi4+0xa2>
  40979e:	4631      	mov	r1, r6
  4097a0:	4630      	mov	r0, r6
  4097a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4097a6:	f1ce 0420 	rsb	r4, lr, #32
  4097aa:	fa05 f30e 	lsl.w	r3, r5, lr
  4097ae:	fa07 f70e 	lsl.w	r7, r7, lr
  4097b2:	fa20 f804 	lsr.w	r8, r0, r4
  4097b6:	0c3a      	lsrs	r2, r7, #16
  4097b8:	fa25 f404 	lsr.w	r4, r5, r4
  4097bc:	ea48 0803 	orr.w	r8, r8, r3
  4097c0:	fbb4 f1f2 	udiv	r1, r4, r2
  4097c4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4097c8:	fb02 4411 	mls	r4, r2, r1, r4
  4097cc:	fa1f fc87 	uxth.w	ip, r7
  4097d0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4097d4:	fb01 f30c 	mul.w	r3, r1, ip
  4097d8:	42ab      	cmp	r3, r5
  4097da:	fa00 f40e 	lsl.w	r4, r0, lr
  4097de:	d909      	bls.n	4097f4 <__udivmoddi4+0x1bc>
  4097e0:	19ed      	adds	r5, r5, r7
  4097e2:	f101 30ff 	add.w	r0, r1, #4294967295
  4097e6:	f080 808a 	bcs.w	4098fe <__udivmoddi4+0x2c6>
  4097ea:	42ab      	cmp	r3, r5
  4097ec:	f240 8087 	bls.w	4098fe <__udivmoddi4+0x2c6>
  4097f0:	3902      	subs	r1, #2
  4097f2:	443d      	add	r5, r7
  4097f4:	1aeb      	subs	r3, r5, r3
  4097f6:	fa1f f588 	uxth.w	r5, r8
  4097fa:	fbb3 f0f2 	udiv	r0, r3, r2
  4097fe:	fb02 3310 	mls	r3, r2, r0, r3
  409802:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  409806:	fb00 f30c 	mul.w	r3, r0, ip
  40980a:	42ab      	cmp	r3, r5
  40980c:	d907      	bls.n	40981e <__udivmoddi4+0x1e6>
  40980e:	19ed      	adds	r5, r5, r7
  409810:	f100 38ff 	add.w	r8, r0, #4294967295
  409814:	d26f      	bcs.n	4098f6 <__udivmoddi4+0x2be>
  409816:	42ab      	cmp	r3, r5
  409818:	d96d      	bls.n	4098f6 <__udivmoddi4+0x2be>
  40981a:	3802      	subs	r0, #2
  40981c:	443d      	add	r5, r7
  40981e:	1aeb      	subs	r3, r5, r3
  409820:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  409824:	e78f      	b.n	409746 <__udivmoddi4+0x10e>
  409826:	f1c1 0720 	rsb	r7, r1, #32
  40982a:	fa22 f807 	lsr.w	r8, r2, r7
  40982e:	408b      	lsls	r3, r1
  409830:	fa05 f401 	lsl.w	r4, r5, r1
  409834:	ea48 0303 	orr.w	r3, r8, r3
  409838:	fa20 fe07 	lsr.w	lr, r0, r7
  40983c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  409840:	40fd      	lsrs	r5, r7
  409842:	ea4e 0e04 	orr.w	lr, lr, r4
  409846:	fbb5 f9fc 	udiv	r9, r5, ip
  40984a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40984e:	fb0c 5519 	mls	r5, ip, r9, r5
  409852:	fa1f f883 	uxth.w	r8, r3
  409856:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40985a:	fb09 f408 	mul.w	r4, r9, r8
  40985e:	42ac      	cmp	r4, r5
  409860:	fa02 f201 	lsl.w	r2, r2, r1
  409864:	fa00 fa01 	lsl.w	sl, r0, r1
  409868:	d908      	bls.n	40987c <__udivmoddi4+0x244>
  40986a:	18ed      	adds	r5, r5, r3
  40986c:	f109 30ff 	add.w	r0, r9, #4294967295
  409870:	d243      	bcs.n	4098fa <__udivmoddi4+0x2c2>
  409872:	42ac      	cmp	r4, r5
  409874:	d941      	bls.n	4098fa <__udivmoddi4+0x2c2>
  409876:	f1a9 0902 	sub.w	r9, r9, #2
  40987a:	441d      	add	r5, r3
  40987c:	1b2d      	subs	r5, r5, r4
  40987e:	fa1f fe8e 	uxth.w	lr, lr
  409882:	fbb5 f0fc 	udiv	r0, r5, ip
  409886:	fb0c 5510 	mls	r5, ip, r0, r5
  40988a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40988e:	fb00 f808 	mul.w	r8, r0, r8
  409892:	45a0      	cmp	r8, r4
  409894:	d907      	bls.n	4098a6 <__udivmoddi4+0x26e>
  409896:	18e4      	adds	r4, r4, r3
  409898:	f100 35ff 	add.w	r5, r0, #4294967295
  40989c:	d229      	bcs.n	4098f2 <__udivmoddi4+0x2ba>
  40989e:	45a0      	cmp	r8, r4
  4098a0:	d927      	bls.n	4098f2 <__udivmoddi4+0x2ba>
  4098a2:	3802      	subs	r0, #2
  4098a4:	441c      	add	r4, r3
  4098a6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4098aa:	eba4 0408 	sub.w	r4, r4, r8
  4098ae:	fba0 8902 	umull	r8, r9, r0, r2
  4098b2:	454c      	cmp	r4, r9
  4098b4:	46c6      	mov	lr, r8
  4098b6:	464d      	mov	r5, r9
  4098b8:	d315      	bcc.n	4098e6 <__udivmoddi4+0x2ae>
  4098ba:	d012      	beq.n	4098e2 <__udivmoddi4+0x2aa>
  4098bc:	b156      	cbz	r6, 4098d4 <__udivmoddi4+0x29c>
  4098be:	ebba 030e 	subs.w	r3, sl, lr
  4098c2:	eb64 0405 	sbc.w	r4, r4, r5
  4098c6:	fa04 f707 	lsl.w	r7, r4, r7
  4098ca:	40cb      	lsrs	r3, r1
  4098cc:	431f      	orrs	r7, r3
  4098ce:	40cc      	lsrs	r4, r1
  4098d0:	6037      	str	r7, [r6, #0]
  4098d2:	6074      	str	r4, [r6, #4]
  4098d4:	2100      	movs	r1, #0
  4098d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4098da:	4618      	mov	r0, r3
  4098dc:	e6f8      	b.n	4096d0 <__udivmoddi4+0x98>
  4098de:	4690      	mov	r8, r2
  4098e0:	e6e0      	b.n	4096a4 <__udivmoddi4+0x6c>
  4098e2:	45c2      	cmp	sl, r8
  4098e4:	d2ea      	bcs.n	4098bc <__udivmoddi4+0x284>
  4098e6:	ebb8 0e02 	subs.w	lr, r8, r2
  4098ea:	eb69 0503 	sbc.w	r5, r9, r3
  4098ee:	3801      	subs	r0, #1
  4098f0:	e7e4      	b.n	4098bc <__udivmoddi4+0x284>
  4098f2:	4628      	mov	r0, r5
  4098f4:	e7d7      	b.n	4098a6 <__udivmoddi4+0x26e>
  4098f6:	4640      	mov	r0, r8
  4098f8:	e791      	b.n	40981e <__udivmoddi4+0x1e6>
  4098fa:	4681      	mov	r9, r0
  4098fc:	e7be      	b.n	40987c <__udivmoddi4+0x244>
  4098fe:	4601      	mov	r1, r0
  409900:	e778      	b.n	4097f4 <__udivmoddi4+0x1bc>
  409902:	3802      	subs	r0, #2
  409904:	443c      	add	r4, r7
  409906:	e745      	b.n	409794 <__udivmoddi4+0x15c>
  409908:	4608      	mov	r0, r1
  40990a:	e708      	b.n	40971e <__udivmoddi4+0xe6>
  40990c:	f1a8 0802 	sub.w	r8, r8, #2
  409910:	443d      	add	r5, r7
  409912:	e72b      	b.n	40976c <__udivmoddi4+0x134>

00409914 <__aeabi_idiv0>:
  409914:	4770      	bx	lr
  409916:	bf00      	nop
  409918:	0a05000d 	.word	0x0a05000d
  40991c:	0000004b 	.word	0x0000004b
  409920:	00001932 	.word	0x00001932
  409924:	0e00008b 	.word	0x0e00008b
  409928:	32800008 	.word	0x32800008
  40992c:	030a0205 	.word	0x030a0205
  409930:	0f022003 	.word	0x0f022003
  409934:	00000a0f 	.word	0x00000a0f
  409938:	18180000 	.word	0x18180000
  40993c:	00002020 	.word	0x00002020
  409940:	0a000000 	.word	0x0a000000
  409944:	02020000 	.word	0x02020000
  409948:	18180000 	.word	0x18180000
  40994c:	00030000 	.word	0x00030000
  409950:	00000000 	.word	0x00000000
  409954:	18010002 	.word	0x18010002
  409958:	1e1e1e1e 	.word	0x1e1e1e1e
  40995c:	1e1e1e1e 	.word	0x1e1e1e1e
  409960:	1e1e1e1e 	.word	0x1e1e1e1e
  409964:	00001e1e 	.word	0x00001e1e
	...
  409978:	454c4449 	.word	0x454c4449
  40997c:	00000000 	.word	0x00000000
  409980:	51726d54 	.word	0x51726d54
  409984:	00000000 	.word	0x00000000
  409988:	20726d54 	.word	0x20726d54
  40998c:	00637653 	.word	0x00637653

00409990 <firCoeffs32>:
  409990:	3da268b3 3da6dc8d 3daa799c 3dad3729     .h.=...=.y.=)7.=
  4099a0:	3daf0e94 3daffb68 3daffb68 3daf0e94     ...=h..=h..=...=
  4099b0:	3dad3729 3daa799c 3da6dc8d 3da268b3     )7.=.y.=...=.h.=
  4099c0:	0074786d 6c696146 74206465 7263206f     mxt.Failed to cr
  4099d0:	65746165 73657420 656c2074 61742064     eate test led ta
  4099e0:	0a0d6b73 00000000 0064636c 00636461     sk......lcd.adc.
  4099f0:	6c696146 74206465 7263206f 65746165     Failed to create
  409a00:	73657420 64612074 61742063 0a0d6b73      test adc task..
  409a10:	00000000 63617473 766f206b 6c667265     ....stack overfl
  409a20:	2520776f 73252078 00000a0d              ow %x %s....

00409a2c <npio2_hw>:
  409a2c:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
  409a3c:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
  409a4c:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
  409a5c:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
  409a6c:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
  409a7c:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
  409a8c:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
  409a9c:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

00409aac <two_over_pi>:
  409aac:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
  409abc:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
  409acc:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
  409adc:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
  409aec:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
  409afc:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
  409b0c:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
  409b1c:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
  409b2c:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
  409b3c:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
  409b4c:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
  409b5c:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
  409b6c:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
  409b7c:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
  409b8c:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
  409b9c:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
  409bac:	0060e27b 00c08c6b 00000000              {.`.k.......

00409bb8 <PIo2>:
  409bb8:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
  409bc8:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
  409bd8:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
  409be8:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

00409bf8 <init_jk>:
  409bf8:	00000002 00000003 00000004 00000006     ................

00409c08 <_global_impure_ptr>:
  409c08:	20400018 33323130 37363534 42413938     ..@ 0123456789AB
  409c18:	46454443 00000000 33323130 37363534     CDEF....01234567
  409c28:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  409c38:	0000296c                                l)..

00409c3c <blanks.7217>:
  409c3c:	20202020 20202020 20202020 20202020                     

00409c4c <zeroes.7218>:
  409c4c:	30303030 30303030 30303030 30303030     0000000000000000
  409c5c:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00409c6c <_ctype_>:
  409c6c:	20202000 20202020 28282020 20282828     .         ((((( 
  409c7c:	20202020 20202020 20202020 20202020                     
  409c8c:	10108820 10101010 10101010 10101010      ...............
  409c9c:	04040410 04040404 10040404 10101010     ................
  409cac:	41411010 41414141 01010101 01010101     ..AAAAAA........
  409cbc:	01010101 01010101 01010101 10101010     ................
  409ccc:	42421010 42424242 02020202 02020202     ..BBBBBB........
  409cdc:	02020202 02020202 02020202 10101010     ................
  409cec:	00000020 00000000 00000000 00000000      ...............
	...

00409d70 <_init>:
  409d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409d72:	bf00      	nop
  409d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409d76:	bc08      	pop	{r3}
  409d78:	469e      	mov	lr, r3
  409d7a:	4770      	bx	lr

00409d7c <__init_array_start>:
  409d7c:	00408279 	.word	0x00408279

00409d80 <__frame_dummy_init_array_entry>:
  409d80:	0040018d                                ..@.

00409d84 <_fini>:
  409d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409d86:	bf00      	nop
  409d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409d8a:	bc08      	pop	{r3}
  409d8c:	469e      	mov	lr, r3
  409d8e:	4770      	bx	lr

00409d90 <__fini_array_start>:
  409d90:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <uxCriticalNesting>:
20400010:	aaaa aaaa                                   ....

20400014 <_impure_ptr>:
20400014:	0018 2040                                   ..@ 

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__malloc_av_>:
	...
20400448:	0440 2040 0440 2040 0448 2040 0448 2040     @.@ @.@ H.@ H.@ 
20400458:	0450 2040 0450 2040 0458 2040 0458 2040     P.@ P.@ X.@ X.@ 
20400468:	0460 2040 0460 2040 0468 2040 0468 2040     `.@ `.@ h.@ h.@ 
20400478:	0470 2040 0470 2040 0478 2040 0478 2040     p.@ p.@ x.@ x.@ 
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 

20400848 <__malloc_sbrk_base>:
20400848:	ffff ffff                                   ....

2040084c <__malloc_trim_threshold>:
2040084c:	0000 0002                                   ....

20400850 <__atexit_recursive_mutex>:
20400850:	ca60 2040                                   `.@ 

20400854 <__global_locale>:
20400854:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400874:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400934:	9371 0040 8d01 0040 0000 0000 9c6c 0040     q.@...@.....l.@.
20400944:	9c68 0040 9a10 0040 9a10 0040 9a10 0040     h.@...@...@...@.
20400954:	9a10 0040 9a10 0040 9a10 0040 9a10 0040     ..@...@...@...@.
20400964:	9a10 0040 9a10 0040 ffff ffff ffff ffff     ..@...@.........
20400974:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040099c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
